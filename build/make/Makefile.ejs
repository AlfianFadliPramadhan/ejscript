# 
#	Makefile.ejs -- Top level Makefile extensions Ejscript
#
#	Copyright (c) Embedthis Software LLC, 2003-2011. All Rights Reserved.
#

#
#	Top level test targets to test installing and removing packages
#
testExtra::
	if [ "$(BUILD_DEPTH)" -ge 3 ] ; then \
		$(MAKE) uninstall ; \
		$(MAKE) test-uninstalled ; \
		$(MAKE) test-install-package ; \
		$(MAKE) test-installed ; \
		$(MAKE) test-uninstall-package ; \
		$(MAKE) test-uninstalled ; \
		$(MAKE) test-install-native-package ; \
		$(MAKE) test-installed ; \
		$(MAKE) test-uninstall-native-package ; \
		$(MAKE) test-uninstalled ; \
	fi

NATIVE_BUILD	=0
ifeq    ($(BLD_HOST_OS),WIN)
	NATIVE_BUILD=1
endif
ifeq    ($(BLD_HOST_OS),MACOSX)
	NATIVE_BUILD=1
endif

test-projects:
ifeq    ($(NATIVE_BUILD),1)
	if [ "$(BUILD_DEPTH)" -ge 3 ] ; then \
		$(BLD_TOOLS_DIR)/nativeBuild ; \
	fi
endif

test-install-package:
	set -e ; name="$(BASE_NAME).tgz" ; \
	dir=/tmp/$(BLD_PRODUCT)-$$$$ ; \
	rm -rf $$dir ; mkdir -p $$dir ; \
	tar -C $$dir -zxf $(BLD_OUT_DIR)/releases/$$name ; \
	cd $$dir >/dev/null 2>&1 ; \
	priv "$(BLD_PRODUCT)_HEADLESS=1 ./install" ; \
	rm -rf $$dir

test-uninstall-package:
	set -e ; name="$(BASE_NAME).tgz" ; \
	dir=/tmp/$(BLD_PRODUCT)-$$$$ ; \
	rm -rf $$dir ; mkdir -p $$dir ; \
	tar -C $$dir -zxf $(BLD_OUT_DIR)/releases/$$name ; \
	cd $$dir >/dev/null 2>&1 ; \
	priv "$(BLD_PRODUCT)_HEADLESS=1 ./uninstall" ; \
	rm -rf $$dir

test-install-native-package:
	set -e ; \
	if [ $(BLD_HOST_OS) = WIN ] ; then \
		rm -fr "$(STAGE_DIR)/*" ; \
		name="$(BASE_NAME).exe.zip" ; \
		cp WIN/unattended.ans $(BLD_OUT_DIR)/releases/$$name "$(STAGE_DIR)" ; cd "$(STAGE_DIR)" ; \
		unzip -q -o $$name ; \
		echo "Dir=$(STAGE_DIR)" >>unattended.ans ; \
		./$(BASE_NAME).exe /loadinf=/tmp/unattended.ans /silent ; \
	elif [ $(BLD_HOST_OS) = MACOSX ] ; then \
		set -x ; \
		hdiutil eject /Volumes/$(BLD_PRODUCT)-$(BLD_VERSION) >/dev/null 2>&1 || true ; \
		hdid $(BLD_OUT_DIR)/releases/$(BASE_NAME).dmg >/dev/null ; \
		priv installer -package /Volumes/$(BLD_PRODUCT)-$(BLD_VERSION)/$(BLD_PRODUCT).mpkg -target /; \
		hdiutil eject /Volumes/$(BLD_PRODUCT)-$(BLD_VERSION) >/dev/null 2>&1 ; \
	else \
		name="$(BASE_NAME).tgz" ; \
		tar -C /tmp xvfz $(BLD_OUT_DIR)/releases/$$name ; \
		priv $(BLD_PRODUCT)_HEADLESS=1 ./install ; \
	fi

test-uninstall-native-package:
	set -e ; \
	if [ $(BLD_HOST_OS) = WIN ] ; then \
		if [ ! -x "$(STAGE_DIR)/unins000.exe" ] ; then \
			echo "Can't find $(STAGE_DIR)/unins000.exe to uninstall" ; \
			exit 255 ; \
		fi ; \
		"$(STAGE_DIR)/unins000.exe" /silent ; \
		rm -fr "$(STAGE_DIR)/*" ; \
	else \
		name="$(BASE_NAME).tgz" ; \
		dir=/tmp/$(BLD_PRODUCT)-$$$$ ; \
		rm -rf $$dir ; mkdir -p $$dir ; \
		tar -C $$dir -zxf $(BLD_OUT_DIR)/releases/$$name ; \
		cd $$dir >/dev/null 2>&1 ; \
		priv "$(BLD_PRODUCT)_HEADLESS=1 ./uninstall" ; \
		rm -rf $$dir ; \
	fi

test-installed:
	set -e ; \
	complete=1 ; \
	for dir in $(BLD_CFG_PREFIX) $(BLD_BIN_PREFIX) $(BLD_INC_PREFIX) \
		$(BLD_LIB_PREFIX) $(BLD_LOG_PREFIX) $(BLD_MAN_PREFIX) $(BLD_PRD_PREFIX) \
		$(BLD_VER_PREFIX) $(BLD_WEB_PREFIX) ; \
	do \
		if [ ! -x $$dir ] ; then \
			echo Missing directory: $$dir ; \
			complete=0 ; \
		fi ; \
	done ; \
	[ $$complete = 0 ] && exit 255 ; \
	echo Installed

test-uninstalled:
	partial=0 ; \
	for dir in $(BLD_CFG_PREFIX) $(BLD_BIN_PREFIX) $(BLD_INC_PREFIX) $(BLD_LIB_PREFIX) $(BLD_LOG_PREFIX) \
		$(BLD_MAN_PREFIX) $(BLD_PRD_PREFIX) $(BLD_VER_PREFIX) $(BLD_WEB_PREFIX) ; do \
		if [ -x $$dir ] ; then \
			partial=1 ; \
			echo Directory present: $$dir ; \
		fi ; \
	done ; \
	[ $$partial = 1 ] && exit 255 ; \
	echo Uninstalled

#
#	Convenient configure targets
#
config:
	$(call log) "[Config]" "configure"
	./configure

release:
	$(call log) "[Config]" "configure --defaults=release --tune=size"
	./configure --defaults=release --tune=size

cross32:
	./configure --debug --host=i386-apple-darwin --without-ssl 

cross64:
	./configure --build=i386-apple-darwin --host=x86_64-apple-darwin --without-ssl --enable-complete-cross

cross-ppc:
	./configure --host=ppc-apple-darwin --without-ssl

config32:
	./configure --debug --host=i386-apple-darwin --build=i386-apple-darwin --without-ssl --release

mob:
	./configure --release --host=i386-apple-darwin --build=i386-apple-darwin --without-ssl --enable-assert

config64:
	./configure --host=x86_64-apple-darwin --build=x86_64-apple-darwin

rom:
	./configure --host=i686-apple-darwin --build=x86_64-apple-darwin --rom --static --without-ssl 

external:
	./configure --with-mpr=../mpr --with-sqlite=/usr --with-openssl --with-matrixssl

small:
	./configure --disable-all --tune=size --type=release --enable-shared --number=int 

speed:
	./configure --type=release --tune=size

vx:
	unset WIND_HOME WIND_BASE ; \
	SEARCH_PATH=/tornado ./configure --host=i386-wrs-vxworks --enable-all --without-ssl

vx5:
	unset WIND_HOME WIND_BASE ; \
	SEARCH_PATH=/tornado ./configure --host=i386-wrs-vxworks --enable-all --without-ssl

vx6:
	unset WIND_HOME WIND_BASE ; \
	./configure --host=pentium-wrs-vxworks --enable-all --without-ssl

#
#	Sample for cross compilation
#
vx5env:
	ARCH=386 ; \
	WIND_HOME=c:/tornado ; \
	WIND_BASE=$$WIND_HOME ; \
	WIND_GNU_PATH=$$WIND_BASE/host ; \
	AR=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/ar$${ARCH}.exe \
	CC=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/cc$${ARCH}.exe \
	LD=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/ld$${ARCH}.exe \
	NM=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/nm$${ARCH}.exe \
	RANLIB=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/ranlib$${ARCH}.exe \
	STRIP=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/strip$${ARCH}.exe \
	IFLAGS="-I$$WIND_BASE/target/h -I$$WIND_BASE/target/h/wrn/coreip" \
	SEARCH_PATH=/tornado ./configure --host=i386-wrs-vxworks --enable-all --without-ssl

vx6env:
	ARCH=pentium ; \
	WIND_HOME=c:/WindRiver ; \
	VXWORKS=vxworks-6.3 ; \
	WIND_BASE=$$WIND_HOME/$$VXWORKS ; \
	PLATFORM=i586-wrs-vxworks ; \
	WIND_GNU_PATH=$$WIND_HOME/gnu/3.4.4-vxworks-6.3 ; \
	AR=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/ar$${ARCH}.exe \
	CC=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/cc$${ARCH}.exe \
	LD=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/cc$${ARCH}.exe \
	NM=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/$${PLATFORM}/bin/nm.exe \
	RANLIB=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/$${PLATFORM}/bin/ranlib.exe \
	STRIP=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/$${PLATFORM}/bin/strip.exe \
	CFLAGS="-I$$WIND_BASE/target/h -I$$WIND_BASE/target/h/wrn/coreip" \
	./configure --host=i386-wrs-vxworks --enable-all --without-ssl

cygwin:
	./configure --cygwin

wince:
	./configure --host=arm-ms-wince --without-ssl

vxenv:
	wrenv -p vxworks-6.3 -f sh -o print_env

#
#	Build with the uclibc small C library.
#	If using ubuntu, then install the  packages: uclibc-toolchain, libuclibc-dev
#	Use dpkg -L package to see installed files. Typically installed under /usr/i386-uclibc-linux
#
uclibc:
	CFLAGS="-nostdlibs -fno-stack-protector" \
	IFLAGS="-I/usr/i386-uclibc-linux/include" \
	LDFLAGS="-nodefaultlibs -nostartfiles /usr/i386-uclibc-linux/lib/crt1.o /usr/i386-uclibc-linux/lib/crti.o /usr/i386-uclibc-linux/lib/crtn.o /usr/i386-uclibc-linux/lib/libc.a /usr/lib/gcc/i486-linux-gnu/4.1.2/libgcc.a" \
	./configure --type=debug --tune=size

uclibc-detailed:
	PREFIX=i386-uclibc-linux; \
	DIR=/usr/i386-uclibc-linux/bin ; \
	AR=$${DIR}/$${PREFIX}-ar \
	CC=$${DIR}/$${PREFIX}-gcc \
	LD=$${DIR}/$${PREFIX}-gcc \
	NM=$${DIR}/$${PREFIX}-nm \
	RANLIB=$${DIR}/$${PREFIX}-ranlib \
	STRIP=$${DIR}/$${PREFIX}-strip \
	CFLAGS="-fno-stack-protector" \
	CXXFLAGS="-fno-rtti -fno-exceptions" \
	BUILD_CC=/usr/bin/cc \
	BUILD_LD=/usr/bin/cc \
	./configure --host=i386-pc-linux --type=RELEASE --tune=size --disable-assert

#
#	Compute lines of code
#
lines:
	@echo -n "Lines of C: "
	@find . -name '*.c' | egrep -v 'OLD|sav' | xargs cat | wc -l
	@echo -n "Lines of C Headers: "
	@find . -name '*.h' | egrep -v 'OLD|sav' | xargs cat | wc -l
	@echo -n "Lines of Java: "
	@find . -name '*.java' | egrep -v 'OLD|sav' | xargs cat | wc -l
	@echo -n "Lines of Ejscript: "
	@find . -name '*.es' -o -name '*.as' | egrep -v 'OLD|sav' | xargs cat | wc -l
	@echo -n "MPR: "
	@find src/mpr -name '*.c' -o -name '*.h' | egrep -v 'OLD|sav' | xargs cat | wc -l
	@echo -n "Tools: "
	@find build -name '*.c' -o -name '*.h' | egrep -v 'OLD|sav' | xargs cat | wc -l
	@echo -n "C VM: "
	@find src/vm -name '*.c' -o -name '*.h' | egrep -v 'OLD|sav' | xargs cat | wc -l
	@echo -n "C Types: "
	@find src/types -name '*.c' -o -name '*.h' | egrep -v 'OLD|sav' | xargs cat | wc -l
	@echo -n "Compiler: "
	@find src/compiler -name '*.c' -o -name '*.h' | egrep -v 'OLD|sav' | xargs cat | wc -l
	@echo -n "Total: "
	@find . -name '*.c' -o -name '*.h' -o -name '*.java' -o -name '*.es' -o -name '*.as' | \
		egrep -v 'OLD|sav' | xargs cat | wc -l

#
#	Profile guided optimization build
#
pgo:
	rm -f obj/*.gcda obj/*.gcno
	$(MAKE) clean
	$(MAKE) -C build/bin compile 
	$(MAKE) depend
	$(MAKE) PGO=-fprofile-generate clean compile
	$(MAKE) -C src/test/bench src/test
	$(MAKE) PGO=-fprofile-use compile
	$(MAKE) -C src/test/bench src/test
	rm -f obj/*.gcda obj/*.gcno

redo:
	git pull
	$(MAKE) TRACE=0 release clean depend compile install-binary test

update:
	git pull
	$(MAKE) TRACE=0 clean depend compile install-binary test

debug:
	open projects/MACOSX/ejs-all/ejs-all.xcodeproj

checkInstalled: installedFiles

installedFiles:
	( \
	for d in $(BLD_CFG_PREFIX) $(BLD_BIN_PREFIX) $(BLD_DOC_PREFIX) $(BLD_INC_PREFIX) $(BLD_JEM_PREFIX) \
		$(BLD_LIB_PREFIX) $(BLD_LOG_PREFIX) $(BLD_MAN_PREFIX) $(BLD_PRD_PREFIX) \
		$(BLD_VER_PREFIX) $(BLD_WEB_PREFIX) /var/log /var/www /usr/share /usr/share/doc /usr/include /var/lib /var/spool ; \
		do \
			if [ "`echo $$d/$(BLD_PRODUCT)*`" != $$d/$(BLD_PRODUCT)'*' ] ; then \
				eval echo "$$d/$(BLD_PRODUCT)*" ; \
				continue ; \
			fi ; \
			if [ -x "$$d/$(BLD_PRODUCT)" ] ; then \
				echo "$$d/$(BLD_PRODUCT)" ; \
				continue ; \
			fi ; \
		done ; \
		for d in "$(BLD_CFG_PREFIX)" "$(BLD_DOC_PREFIX)" "$(BLD_INC_PREFIX)" "$(BLD_LIB_PREFIX)" "$(BLD_LOG_PREFIX)" \
			"$(BLD_SAM_PREFIX)" "$(BLD_SRC_PREFIX)" ; \
		do \
			[ -x "$$d" ] && echo "$$d" || true; \
		done ; \
	) | sort | uniq

