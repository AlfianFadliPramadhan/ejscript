#
#  default.lst -- Module Listing for default.mod
#

==============================================================================================

MODULE:   default <hasInitializer, >


FUNCTION:   [initializer]  intrinsic function __initializer__() : Void

   LOCAL:   [local-00] var block_0000_0 : Block

    0000: [0] 8d 00 00 ................... openBlock <slot: 0> <0> 
    0003: [0] 33 0a 0a 24 ................ debug 

    # utest.worker:5            public class Test {

    0007: [0] 01 4c ...................... addNamespace <internal-ff3fbf5aca8a9a9068f68f49a5232627-0> 
    0009: [0] 34 b4 08 ................... defineClass <type: 0x21a,  public::Test> 
    0012: [0] 33 0a 8c 01 80 1f .......... debug 

    # utest.worker:70           public function assert(cond: Boolean, message: String = null): Void {

    0018: [0] 33 0a a4 01 8c 23 .......... debug 

    # utest.worker:82           public function cleanDir(path) {

    0024: [0] 33 0a b6 01 c4 24 .......... debug 

    # utest.worker:91           public function sh(args): String {

    0030: [0] 33 0a c8 01 c4 26 .......... debug 

    # utest.worker:100          public function testCmdNoCapture(args): Boolean {

    0036: [0] 33 0a e4 01 f8 2c .......... debug 

    # utest.worker:114          public function testCmd(args): Boolean {

    0042: [0] 33 0a 82 02 ee 2e .......... debug 

    # utest.worker:129          public function env(): String {

    0048: [0] 33 0a 9e 02 d2 2f .......... debug 

    # utest.worker:143          public function locate(program): String {

    0054: [0] 33 0a a8 02 cc 31 .......... debug 

    # utest.worker:148          public function share(key: String, value: String)

    0060: [0] 24 ......................... closeBlock 
    0061: [0] 3b ......................... endCode 
    

BLOCK:      [__initializer__-00]  block_0000_0 (Slots 0)

CLASS:      class Test extends Object
            #  Class Details: 31 class traits, 12 instance traits, requested slot 134

FUNCTION:   [Test-25]  -constructor- function Test() : void


    0000: [0] 7e 54 ...................... getGlobalSlot <slot: 42> 
    0002: [1] ba 14 ...................... putThisSlot <slot: 10> 
    0004: [0] 7e f2 01 ................... getGlobalSlot <slot: 121> 
    0007: [1] 82 56 00 ................... getTypeSlot <slot: 43> <0> 
    0010: [1] ba 16 ...................... putThisSlot <slot: 11> 
    0012: [0] be ......................... return 
    

FUNCTION:   [Test-26]  public const function log(level: Number, name: String, items: Array) : void

     ARG:   [arg-00]   private level : Number
     ARG:   [arg-01]   private name : String
     ARG:   [arg-02]   private items : Array

    0000: [0] 33 0a 2a a6 09 ............. debug 

    # utest.worker:21                   if (verbosity >= level) {

    0005: [0] 81 14 ...................... getThisSlot <slot: 10> 
    0007: [1] 5b ......................... getLocalSlot0 
    0008: [2] 28 ......................... compareGe 
    0009: [1] 13 5a ...................... branchFalse8 <addr: 101> 
    0011: [0] 33 0a 2c ea 09 ............. debug 

    # utest.worker:22                       out.write("%12s " % [name])

    0016: [0] 81 16 ...................... getThisSlot <slot: 11> 
    0018: [1] 56 ba 0a ................... loadString <%12s > 
    0021: [2] 7e 00 ...................... getGlobalSlot <slot: 0> 
    0023: [3] 89 ......................... new 
    0024: [3] 39 ......................... dup 
    0025: [4] 5c ......................... getLocalSlot1 
    0026: [5] c5 ......................... swap 
    0027: [5] 56 c6 0a ................... loadString <> 
    0030: [6] 44 ......................... load0 
    0031: [7] b2 ......................... putObjNameExpr 
    0032: [3] bd ......................... rem 
    0033: [2] 1e c8 0a 00 02 ............. callObjName <write> <> <argc: 1> 
    0038: [0] 33 0a 2e d4 0a ............. debug 

    # utest.worker:23                       out.write(items)

    0043: [0] 81 16 ...................... getThisSlot <slot: 11> 
    0045: [1] 5d ......................... getLocalSlot2 
    0046: [2] 1e c8 0a 00 02 ............. callObjName <write> <> <argc: 1> 
    0051: [0] 33 0a 30 8e 0b ............. debug 

    # utest.worker:24                       if (verbosity > 1) {

    0056: [0] 81 14 ...................... getThisSlot <slot: 10> 
    0058: [1] 45 ......................... load1 
    0059: [2] 29 ......................... compareGt 
    0060: [1] 13 11 ...................... branchFalse8 <addr: 79> 
    0062: [0] 33 0a 32 d0 0b ............. debug 

    # utest.worker:25                           out.write("\n")

    0067: [0] 81 16 ...................... getThisSlot <slot: 11> 
    0069: [1] 56 90 0c ................... loadString <
> 
    0072: [2] 1e c8 0a 00 02 ............. callObjName <write> <> <argc: 1> 
    0077: [0] 3e 14 ...................... goto8 <addr: 99> 
    0079: [0] 33 0a 34 94 0c ............. debug 

    # utest.worker:26                       } else {

    0084: [0] 33 0a 36 be 0c ............. debug 

    # utest.worker:27                           out.write(": ")

    0089: [0] 81 16 ...................... getThisSlot <slot: 11> 
    0091: [1] 56 fe 0c ................... loadString <: > 
    0094: [2] 1e c8 0a 00 02 ............. callObjName <write> <> <argc: 1> 
    0099: [0] 3e 00 ...................... goto8 <addr: 101> 
    0101: [0] be ......................... return 
    0102: [0] 33 0a 3c 84 0d ............. debug 

    # utest.worker:30               }
    
VARIABLE:   [log-00]  private var level : Number
VARIABLE:   [log-01]  private var name : String
VARIABLE:   [log-02]  private var items : Array

FUNCTION:   [Test-27]  public const function mapVerbosity(adj: Number) : String

     ARG:   [arg-00]   private adj : Number

    0000: [0] 33 0a 42 e8 0e ............. debug 

    # utest.worker:33                   str = ""

    0005: [0] 56 c6 0a ................... loadString <> 
    0008: [1] b4 8a 0f c6 0a ............. putScopedName <str> <> 
    0013: [0] 33 0a 48 92 0f ............. debug 

    # utest.worker:36                   return str

    0018: [0] 33 0a 44 b8 0f ............. debug 

    # utest.worker:34                   for (i = test.verbosity + adj; i > 0; i--)

    0023: [0] 79 9e 10 c6 0a ............. getScopedName <test> <> 
    0028: [1] 7b ca 07 00 ................ getObjName <verbosity> <> 
    0032: [1] 5b ......................... getLocalSlot0 
    0033: [2] 00 ......................... add 
    0034: [1] b4 a8 10 c6 0a ............. putScopedName <i> <> 
    0039: [0] 79 a8 10 c6 0a ............. getScopedName <i> <> 
    0044: [1] 44 ......................... load0 
    0045: [2] 29 ......................... compareGt 
    0046: [1] 13 28 ...................... branchFalse8 <addr: 88> 
    0048: [0] 33 0a 46 ac 10 ............. debug 

    # utest.worker:35                       str += "-v "

    0053: [0] 79 8a 0f c6 0a ............. getScopedName <str> <> 
    0058: [1] 56 de 10 ................... loadString <-v > 
    0061: [2] 00 ......................... add 
    0062: [1] b4 8a 0f c6 0a ............. putScopedName <str> <> 
    0067: [0] 33 0a 44 b8 0f ............. debug 

    # utest.worker:34                   for (i = test.verbosity + adj; i > 0; i--)

    0072: [0] 79 a8 10 c6 0a ............. getScopedName <i> <> 
    0077: [1] 39 ......................... dup 
    0078: [2] 3f ff ...................... inc <255> 
    0080: [2] b4 a8 10 c6 0a ............. putScopedName <i> <> 
    0085: [1] 90 ......................... pop 
    0086: [0] 3e cf ...................... goto8 <addr: 39> 
    0088: [0] 33 0a 48 92 0f ............. debug 

    # utest.worker:36                   return str

    0093: [0] 79 8a 0f c6 0a ............. getScopedName <str> <> 
    0098: [1] bf ......................... returnValue 
    
VARIABLE:   [mapVerbosity-00]  private var adj : Number

FUNCTION:   [Test-28]  internal-ff3fbf5aca8a9a9068f68f49a5232627-0 const function searchUp(path: Path) : String

     ARG:   [arg-00]   private path : Path

    0000: [0] 33 0a 50 e0 11 ............. debug 

    # utest.worker:40                   if (exists(path))

    0005: [0] 5b ......................... getLocalSlot0 
    0006: [1] 1f 94 12 c6 0a 02 .......... callScopedName <exists> <> <argc: 1> 
    0012: [0] 93 ......................... pushResult 
    0013: [1] 13 09 ...................... branchFalse8 <addr: 24> 
    0015: [0] 33 0a 52 a2 12 ............. debug 

    # utest.worker:41                       return path

    0020: [0] 5b ......................... getLocalSlot0 
    0021: [1] bf ......................... returnValue 
    0022: [0] 3e 00 ...................... goto8 <addr: 24> 
    0024: [0] 33 0a 54 d2 12 ............. debug 

    # utest.worker:42                   path = Path(path).relative

    0029: [0] 5b ......................... getLocalSlot0 
    0030: [1] 17 de 01 02 ................ callGlobalSlot <slot: 111> <argc: 1> 
    0034: [0] 93 ......................... pushResult 
    0035: [1] 82 86 01 00 ................ getTypeSlot <slot: 67> <0> 
    0039: [1] 94 ......................... putLocalSlot0 
    0040: [0] 33 0a 56 98 13 ............. debug 

    # utest.worker:43                   dir = Path("..")

    0045: [0] 56 ca 13 ................... loadString <..> 
    0048: [1] 17 de 01 02 ................ callGlobalSlot <slot: 111> <argc: 1> 
    0052: [0] 93 ......................... pushResult 
    0053: [1] ab ......................... putThisSlot3 
    0054: [0] 33 0a 58 d0 13 ............. debug 

    # utest.worker:44                   while (true) {

    0059: [0] 7e 62 ...................... getGlobalSlot <slot: 49> 
    0061: [1] 13 59 ...................... branchFalse8 <addr: 152> 
    0063: [0] 33 0a 5a fe 13 ............. debug 

    # utest.worker:45                       up = Path(dir.relative).join(path)

    0068: [0] 72 ......................... getThisSlot3 
    0069: [1] 82 86 01 02 ................ getTypeSlot <slot: 67> <1> 
    0073: [1] 17 de 01 02 ................ callGlobalSlot <slot: 111> <argc: 1> 
    0077: [0] 93 ......................... pushResult 
    0078: [1] 5b ......................... getLocalSlot0 
    0079: [2] 18 5a 02 ................... callObjSlot <slot: 45> <argc: 1> 
    0082: [0] 93 ......................... pushResult 
    0083: [1] b4 dc 14 c6 0a ............. putScopedName <up> <> 
    0088: [0] 33 0a 5c e2 14 ............. debug 

    # utest.worker:46                       if (exists(up))

    0093: [0] 79 dc 14 c6 0a ............. getScopedName <up> <> 
    0098: [1] 1f 94 12 c6 0a 02 .......... callScopedName <exists> <> <argc: 1> 
    0104: [0] 93 ......................... pushResult 
    0105: [1] 13 0d ...................... branchFalse8 <addr: 120> 
    0107: [0] 33 0a 5e 9a 15 ............. debug 

    # utest.worker:47                           return up

    0112: [0] 79 dc 14 c6 0a ............. getScopedName <up> <> 
    0117: [1] bf ......................... returnValue 
    0118: [0] 3e 00 ...................... goto8 <addr: 120> 
    0120: [0] 33 0a 60 ce 15 ............. debug 

    # utest.worker:48                       if (dir.parent == dir) break

    0125: [0] 72 ......................... getThisSlot3 
    0126: [1] 82 78 02 ................... getTypeSlot <slot: 60> <1> 
    0129: [1] 72 ......................... getThisSlot3 
    0130: [2] 25 ......................... compareEq 
    0131: [1] 13 07 ...................... branchFalse8 <addr: 140> 
    0133: [0] 3d 1c f7 f7 f7 ............. goto <addr: 152> 
    0138: [0] 3e 00 ...................... goto8 <addr: 140> 
    0140: [0] 33 0a 62 a0 16 ............. debug 

    # utest.worker:49                       dir = dir.parent

    0145: [0] 72 ......................... getThisSlot3 
    0146: [1] 82 78 02 ................... getTypeSlot <slot: 60> <1> 
    0149: [1] ab ......................... putThisSlot3 
    0150: [0] 3e a3 ...................... goto8 <addr: 59> 
    0152: [0] 33 0a 66 da 16 ............. debug 

    # utest.worker:51                   return null

    0157: [0] 7e 58 ...................... getGlobalSlot <slot: 44> 
    0159: [1] bf ......................... returnValue 
    
VARIABLE:   [searchUp-00]  private var path : Path

FUNCTION:   [Test-29]  public const function setLogPath(path: Path) : Void

     ARG:   [arg-00]   private path : Path

    0000: [0] 33 0a 6e 92 18 ............. debug 

    # utest.worker:55                   if (path) {

    0005: [0] 5b ......................... getLocalSlot0 
    0006: [1] 13 16 ...................... branchFalse8 <addr: 30> 
    0008: [0] 33 0a 70 ba 18 ............. debug 

    # utest.worker:56                       out = File(path).open("aw")

    0013: [0] 5b ......................... getLocalSlot0 
    0014: [1] 17 d8 01 02 ................ callGlobalSlot <slot: 108> <argc: 1> 
    0018: [0] 93 ......................... pushResult 
    0019: [1] 56 8a 19 ................... loadString <aw> 
    0022: [2] 18 44 02 ................... callObjSlot <slot: 34> <argc: 1> 
    0025: [0] 93 ......................... pushResult 
    0026: [1] ba 16 ...................... putThisSlot <slot: 11> 
    0028: [0] 3e 12 ...................... goto8 <addr: 48> 
    0030: [0] 33 0a 72 90 19 ............. debug 

    # utest.worker:57                   } else {

    0035: [0] 33 0a 74 b2 19 ............. debug 

    # utest.worker:58                       out = App.outputStream

    0040: [0] 7e f2 01 ................... getGlobalSlot <slot: 121> 
    0043: [1] 82 56 00 ................... getTypeSlot <slot: 43> <0> 
    0046: [1] ba 16 ...................... putThisSlot <slot: 11> 
    0048: [0] be ......................... return 
    0049: [0] 33 0a 78 84 0d ............. debug 

    # utest.worker:60               }
    
VARIABLE:   [setLogPath-00]  private var path : Path

FUNCTION:   [Test-30]  public const function skip(message: String) : Void

     ARG:   [arg-00]   private message : String

    0000: [0] 33 0a 7e f8 1a ............. debug 

    # utest.worker:63                   postMessage({ skip: message })

    0005: [0] 56 00 ...................... loadString <> 
    0007: [1] 56 c6 1b ................... loadString <skip> 
    0010: [2] 5b ......................... getLocalSlot0 
    0011: [3] 8a bc 05 02 00 ............. newObject <type: 0x15e,  intrinsic::Object> <argc: 1> <att: 1 >
    0016: [1] 1f d0 1b c6 0a 02 .......... callScopedName <postMessage> <> <argc: 1> 
    0022: [0] be ......................... return 
    
VARIABLE:   [skip-00]  private var message : String
VARIABLE:   [bin-00]  public var bin : Path
VARIABLE:   [config-01]  public var config : Object
VARIABLE:   [depth-02]  public var depth : Number
VARIABLE:   [dir-03]  public var dir : Path
VARIABLE:   [lib-04]  public var lib : Path
VARIABLE:   [multithread-05]  public var multithread : Number
VARIABLE:   [threads-06]  public var threads : Number
VARIABLE:   [top-07]  public var top : Path
VARIABLE:   [os-08]  public var os : Path
VARIABLE:   [hostOs-09]  public var hostOs : Path
VARIABLE:   [verbosity-10]  public var verbosity : Number
VARIABLE:   [out-11]  internal-ff3fbf5aca8a9a9068f68f49a5232627-0 var out

FUNCTION:   [assert-135]  public function assert(cond: Boolean, message: String) : Void

     ARG:   [arg-00]   private cond : Boolean
     ARG:   [arg-01]   private message : String

    0000: [0] 41 02 02 05 ................ initDefaultArgs8 <2> <4> <7> 
    0004: [0] 7e 58 ...................... getGlobalSlot <slot: 44> 
    0006: [1] 95 ......................... putLocalSlot1 
    0007: [0] 33 0a 8e 01 8c 20 .......... debug 

    # utest.worker:71               if (cond) {

    0013: [0] 5b ......................... getLocalSlot0 
    0014: [1] 13 1a ...................... branchFalse8 <addr: 42> 
    0016: [0] 33 0a 90 01 ac 20 .......... debug 

    # utest.worker:72                   postMessage({ passed: true })

    0022: [0] 56 00 ...................... loadString <> 
    0024: [1] 56 f8 20 ................... loadString <passed> 
    0027: [2] 7e 62 ...................... getGlobalSlot <slot: 49> 
    0029: [3] 8a bc 05 02 00 ............. newObject <type: 0x15e,  intrinsic::Object> <argc: 1> <att: 1 >
    0034: [1] 1f d0 1b c6 0a 02 .......... callScopedName <postMessage> <> <argc: 1> 
    0040: [0] 3e 33 ...................... goto8 <addr: 93> 
    0042: [0] 33 0a 92 01 86 21 .......... debug 

    # utest.worker:73               } else {

    0048: [0] 33 0a 94 01 a0 21 .......... debug 

    # utest.worker:74                   if (message) {

    0054: [0] 5c ......................... getLocalSlot1 
    0055: [1] 13 0f ...................... branchFalse8 <addr: 72> 
    0057: [0] 33 0a 96 01 ce 21 .......... debug 

    # utest.worker:75                       throw new AssertError(message)

    0063: [0] 7e 10 ...................... getGlobalSlot <slot: 8> 
    0065: [1] 89 ......................... new 
    0066: [1] 5c ......................... getLocalSlot1 
    0067: [2] 20 02 ...................... callConstructor <argc: 1> 
    0069: [1] c6 ......................... throw 
    0070: [1] 3e 15 ...................... goto8 <addr: 93> 
    0072: [1] 33 0a 98 01 90 19 .......... debug 

    # utest.worker:76                   } else {

    0078: [1] 33 0a 9a 01 a4 22 .......... debug 

    # utest.worker:77                       throw new AssertError("")

    0084: [1] 7e 10 ...................... getGlobalSlot <slot: 8> 
    0086: [2] 89 ......................... new 
    0087: [2] 56 c6 0a ................... loadString <> 
    0090: [3] 20 02 ...................... callConstructor <argc: 1> 
    0092: [2] c6 ......................... throw 
    0093: [2] be ......................... return 
    0094: [0] 33 0a a0 01 f0 22 .......... debug 

    # utest.worker:80           }
    
VARIABLE:   [assert-00]  private var cond : Boolean
VARIABLE:   [assert-01]  private var message : String

FUNCTION:   [cleanDir-136]  public function cleanDir(path) : void

     ARG:   [arg-00]   private path

    0000: [0] 33 0a a6 01 ce 23 .......... debug 

    # utest.worker:83               rmdir(path, true)

    0006: [0] 5b ......................... getLocalSlot0 
    0007: [1] 7e 62 ...................... getGlobalSlot <slot: 49> 
    0009: [2] 1f fa 23 c6 0a 04 .......... callScopedName <rmdir> <> <argc: 2> 
    0015: [0] 33 0a a8 01 86 24 .......... debug 

    # utest.worker:84               mkdir(path)

    0021: [0] 5b ......................... getLocalSlot0 
    0022: [1] 1f a6 24 c6 0a 02 .......... callScopedName <mkdir> <> <argc: 1> 
    0028: [0] be ......................... return 
    0029: [0] 33 0a aa 01 f0 22 .......... debug 

    # utest.worker:85           }
    
VARIABLE:   [cleanDir-00]  private var path

FUNCTION:   [sh-137]  public function sh(args) : String

     ARG:   [arg-00]   private args

    0000: [0] 33 0a b8 01 8a 25 .......... debug 

    # utest.worker:92               test.log(2, "[Run]", "Run: " + args)

    0006: [0] 79 9e 10 c6 0a ............. getScopedName <test> <> 
    0011: [1] 46 ......................... load2 
    0012: [2] 56 dc 25 ................... loadString <[Run]> 
    0015: [3] 56 e8 25 ................... loadString <Run: > 
    0018: [4] 5b ......................... getLocalSlot0 
    0019: [5] 00 ......................... add 
    0020: [4] 1e 90 0d 00 06 ............. callObjName <log> <> <argc: 3> 
    0025: [0] 33 0a ba 01 f4 25 .......... debug 

    # utest.worker:93               return Cmd.sh(env() + args)

    0031: [0] 7e f6 01 ................... getGlobalSlot <slot: 123> 
    0034: [1] 17 98 02 00 ................ callGlobalSlot <slot: 140> <argc: 0> 
    0038: [1] 93 ......................... pushResult 
    0039: [2] 5b ......................... getLocalSlot0 
    0040: [3] 00 ......................... add 
    0041: [2] 1c 32 00 02 ................ callObjStaticSlot <slot: 25> <0> <argc: 1> 
    0045: [0] 93 ......................... pushResult 
    0046: [1] bf ......................... returnValue 
    
VARIABLE:   [sh-00]  private var args

FUNCTION:   [testCmdNoCapture-138]  public function testCmdNoCapture(args) : Boolean

     ARG:   [arg-00]   private args
   LOCAL:   [local-01] var e

    0000: [0] 33 0a ca 01 a8 27 .......... debug 

    # utest.worker:101              test.log(2, "[Test]", "Run test: " + args)

    0006: [0] 79 9e 10 c6 0a ............. getScopedName <test> <> 
    0011: [1] 46 ......................... load2 
    0012: [2] 56 86 28 ................... loadString <[Test]> 
    0015: [3] 56 94 28 ................... loadString <Run test: > 
    0018: [4] 5b ......................... getLocalSlot0 
    0019: [5] 00 ......................... add 
    0020: [4] 1e 90 0d 00 06 ............. callObjName <log> <> <argc: 3> 
    0025: [0] 33 0a cc 01 aa 28 .......... debug 

    # utest.worker:102              try {

    0031: [0] 33 0a ce 01 be 28 .......... debug 

    # utest.worker:103                  args = args.toString().toJSON().trim('"')

    0037: [0] 5b ......................... getLocalSlot0 
    0038: [1] 1e de 1e 00 00 ............. callObjName <toString> <> <argc: 0> 
    0043: [0] 93 ......................... pushResult 
    0044: [1] 1e b2 1e 00 00 ............. callObjName <toJSON> <> <argc: 0> 
    0049: [0] 93 ......................... pushResult 
    0050: [1] 56 a2 29 ................... loadString <"> 
    0053: [2] 1e a6 29 00 02 ............. callObjName <trim> <> <argc: 1> 
    0058: [0] 93 ......................... pushResult 
    0059: [1] 94 ......................... putLocalSlot0 
    0060: [0] 33 0a d0 01 b0 29 .......... debug 

    # utest.worker:104                  Cmd.runx(("/bin/sh -c \"" + env() + args + "\"").trim('\n'), data)

    0066: [0] 7e f6 01 ................... getGlobalSlot <slot: 123> 
    0069: [1] 56 c6 2a ................... loadString </bin/sh -c "> 
    0072: [2] 17 98 02 00 ................ callGlobalSlot <slot: 140> <argc: 0> 
    0076: [2] 93 ......................... pushResult 
    0077: [3] 00 ......................... add 
    0078: [2] 5b ......................... getLocalSlot0 
    0079: [3] 00 ......................... add 
    0080: [2] 56 a2 29 ................... loadString <"> 
    0083: [3] 00 ......................... add 
    0084: [2] 56 90 0c ................... loadString <
> 
    0087: [3] 1e a6 29 00 02 ............. callObjName <trim> <> <argc: 1> 
    0092: [1] 93 ......................... pushResult 
    0093: [2] 79 e0 2a c6 0a ............. getScopedName <data> <> 
    0098: [3] 1c 38 00 04 ................ callObjStaticSlot <slot: 28> <0> <argc: 2> 
    0102: [0] 33 0a d2 01 ea 2a .......... debug 

    # utest.worker:105                  assert(true)

    0108: [0] 7e 62 ...................... getGlobalSlot <slot: 49> 
    0110: [1] 17 8e 02 02 ................ callGlobalSlot <slot: 135> <argc: 1> 
    0114: [0] 33 0a d4 01 94 2b .......... debug 

    # utest.worker:106                  return true

    0120: [0] 7e 62 ...................... getGlobalSlot <slot: 49> 
    0122: [1] bf ......................... returnValue 
    0123: [0] 3e 23 ...................... goto8 <addr: 160> 
    0125: [0] 33 0a d6 01 bc 2b .......... debug 

    # utest.worker:107              } catch (e) {

    0131: [0] 92 ......................... pushCatchArg 
    0132: [1] b6 02 02 ................... putBlockSlot <slot: 1> <1> 
    0135: [0] 33 0a d8 01 fa 2b .......... debug 

    # utest.worker:108                  assert(false, e)

    0141: [0] 7e 54 ...................... getGlobalSlot <slot: 42> 
    0143: [1] 7d 02 02 ................... getBlockSlot <slot: 1> <1> 
    0146: [2] 17 8e 02 04 ................ callGlobalSlot <slot: 135> <argc: 2> 
    0150: [0] 33 0a da 01 ac 2c .......... debug 

    # utest.worker:109                  return false

    0156: [0] 7e 54 ...................... getGlobalSlot <slot: 42> 
    0158: [1] bf ......................... returnValue 
    0159: [0] 3c ......................... endException 
    0160: [0] 54 ......................... loadNull 
    0161: [1] bf ......................... returnValue 
    0162: [0] 33 0a de 01 f0 22 .......... debug 

    # utest.worker:111          }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   catch         25     125        125          160       Void

VARIABLE:   [testCmdNoCapture-00]  private var args
VARIABLE:   [testCmdNoCapture-01]  -hoisted-1 static var e

FUNCTION:   [testCmd-139]  public function testCmd(args) : Boolean

     ARG:   [arg-00]   private args
   LOCAL:   [local-01] var e

    0000: [0] 33 0a e6 01 a8 27 .......... debug 

    # utest.worker:115              test.log(2, "[Test]", "Run test: " + args)

    0006: [0] 79 9e 10 c6 0a ............. getScopedName <test> <> 
    0011: [1] 46 ......................... load2 
    0012: [2] 56 86 28 ................... loadString <[Test]> 
    0015: [3] 56 94 28 ................... loadString <Run test: > 
    0018: [4] 5b ......................... getLocalSlot0 
    0019: [5] 00 ......................... add 
    0020: [4] 1e 90 0d 00 06 ............. callObjName <log> <> <argc: 3> 
    0025: [0] 33 0a e8 01 aa 28 .......... debug 

    # utest.worker:116              try {

    0031: [0] 33 0a ea 01 be 28 .......... debug 

    # utest.worker:117                  args = args.toString().toJSON().trim('"')

    0037: [0] 5b ......................... getLocalSlot0 
    0038: [1] 1e de 1e 00 00 ............. callObjName <toString> <> <argc: 0> 
    0043: [0] 93 ......................... pushResult 
    0044: [1] 1e b2 1e 00 00 ............. callObjName <toJSON> <> <argc: 0> 
    0049: [0] 93 ......................... pushResult 
    0050: [1] 56 a2 29 ................... loadString <"> 
    0053: [2] 1e a6 29 00 02 ............. callObjName <trim> <> <argc: 1> 
    0058: [0] 93 ......................... pushResult 
    0059: [1] 94 ......................... putLocalSlot0 
    0060: [0] 33 0a ec 01 ca 2d .......... debug 

    # utest.worker:118                  Cmd.run(("/bin/sh -c \"" + env() + args + "\"").trim('\n'), data)

    0066: [0] 7e f6 01 ................... getGlobalSlot <slot: 123> 
    0069: [1] 56 c6 2a ................... loadString </bin/sh -c "> 
    0072: [2] 17 98 02 00 ................ callGlobalSlot <slot: 140> <argc: 0> 
    0076: [2] 93 ......................... pushResult 
    0077: [3] 00 ......................... add 
    0078: [2] 5b ......................... getLocalSlot0 
    0079: [3] 00 ......................... add 
    0080: [2] 56 a2 29 ................... loadString <"> 
    0083: [3] 00 ......................... add 
    0084: [2] 56 90 0c ................... loadString <
> 
    0087: [3] 1e a6 29 00 02 ............. callObjName <trim> <> <argc: 1> 
    0092: [1] 93 ......................... pushResult 
    0093: [2] 79 e0 2a c6 0a ............. getScopedName <data> <> 
    0098: [3] 1c 34 00 04 ................ callObjStaticSlot <slot: 26> <0> <argc: 2> 
    0102: [0] 33 0a ee 01 ea 2a .......... debug 

    # utest.worker:119                  assert(true)

    0108: [0] 7e 62 ...................... getGlobalSlot <slot: 49> 
    0110: [1] 17 8e 02 02 ................ callGlobalSlot <slot: 135> <argc: 1> 
    0114: [0] 33 0a f0 01 94 2b .......... debug 

    # utest.worker:120                  return true

    0120: [0] 7e 62 ...................... getGlobalSlot <slot: 49> 
    0122: [1] bf ......................... returnValue 
    0123: [0] 3e 23 ...................... goto8 <addr: 160> 
    0125: [0] 33 0a f2 01 bc 2b .......... debug 

    # utest.worker:121              } catch (e) {

    0131: [0] 92 ......................... pushCatchArg 
    0132: [1] b6 02 02 ................... putBlockSlot <slot: 1> <1> 
    0135: [0] 33 0a f4 01 fa 2b .......... debug 

    # utest.worker:122                  assert(false, e)

    0141: [0] 7e 54 ...................... getGlobalSlot <slot: 42> 
    0143: [1] 7d 02 02 ................... getBlockSlot <slot: 1> <1> 
    0146: [2] 17 8e 02 04 ................ callGlobalSlot <slot: 135> <argc: 2> 
    0150: [0] 33 0a f6 01 ac 2c .......... debug 

    # utest.worker:123                  return false

    0156: [0] 7e 54 ...................... getGlobalSlot <slot: 42> 
    0158: [1] bf ......................... returnValue 
    0159: [0] 3c ......................... endException 
    0160: [0] 54 ......................... loadNull 
    0161: [1] bf ......................... returnValue 
    0162: [0] 33 0a fa 01 f0 22 .......... debug 

    # utest.worker:125          }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   catch         25     125        125          160       Void

VARIABLE:   [testCmd-00]  private var args
VARIABLE:   [testCmd-01]  -hoisted-1 static var e

FUNCTION:   [env-140]  public function env() : String


    0000: [0] 33 0a 96 02 ae 2f .......... debug 

    # utest.worker:139              return ""

    0006: [0] 56 c6 0a ................... loadString <> 
    0009: [1] bf ......................... returnValue 
    

FUNCTION:   [locate-141]  public function locate(program) : String

     ARG:   [arg-00]   private program

    0000: [0] 33 0a a0 02 a6 30 .......... debug 

    # utest.worker:144              return test.bin.join(program).portable.toString()

    0006: [0] 79 9e 10 c6 0a ............. getScopedName <test> <> 
    0011: [1] 7b d6 01 00 ................ getObjName <bin> <> 
    0015: [1] 5b ......................... getLocalSlot0 
    0016: [2] 1e 92 31 00 02 ............. callObjName <join> <> <argc: 1> 
    0021: [0] 93 ......................... pushResult 
    0022: [1] 7b 9c 31 00 ................ getObjName <portable> <> 
    0026: [1] 1e de 1e 00 00 ............. callObjName <toString> <> <argc: 0> 
    0031: [0] 93 ......................... pushResult 
    0032: [1] bf ......................... returnValue 
    
VARIABLE:   [locate-00]  private var program

FUNCTION:   [share-142]  public function share(key: String, value: String) : void

     ARG:   [arg-00]   private key : String
     ARG:   [arg-01]   private value : String

    0000: [0] 33 0a aa 02 b0 32 .......... debug 

    # utest.worker:149              postMessage({ key: key, value: value })

    0006: [0] 56 00 ...................... loadString <> 
    0008: [1] 56 88 33 ................... loadString <key> 
    0011: [2] 5b ......................... getLocalSlot0 
    0012: [3] 56 00 ...................... loadString <> 
    0014: [4] 56 90 33 ................... loadString <value> 
    0017: [5] 5c ......................... getLocalSlot1 
    0018: [6] 8a bc 05 04 00 00 .......... newObject <type: 0x15e,  intrinsic::Object> <argc: 2> <att: 2 2 >
    0024: [1] 1f d0 1b c6 0a 02 .......... callScopedName <postMessage> <> <argc: 1> 
    0030: [0] 93 ......................... pushResult 
    0031: [1] bf ......................... returnValue 
    
VARIABLE:   [share-00]  private var key : String
VARIABLE:   [share-01]  private var value : String

----------------------------------------------------------------------------------------------

#
#  Global slot assignments (Num prop 143, num inherited 0)
#
0134    public var Test: Type
0135    public function assert
0136    public function cleanDir
0137    public function sh
0138    public function testCmdNoCapture
0139    public function testCmd
0140    public function env
0141    public function locate
0142    public function share

#
#  Initializer slot assignments (Num prop 1)
#
0000    -block- var block_0000_0: Block

#
#  Class slot assignments for the "Test" class (Num slots 31, num inherited 25)
#
0000    reserved slot for base class property
0001    public function clone
0002    reserved slot for base class property
0003    reserved slot for base class property
0004    reserved slot for base class property
0005    reserved slot for base class property
0006    iterator function get
0007    reserved slot for base class property
0008    reserved slot for base class property
0009    reserved slot for base class property
0010    iterator function getValues
0011    public function hasOwnProperty
0012    reserved slot for base class property
0013    reserved slot for base class property
0014    public function isPrototypeOf
0015    reserved slot for base class property
0016    reserved slot for base class property
0017    public function length
0018    reserved slot for base class property
0019    public function propertyIsEnumerable
0020    reserved slot for base class property
0021    public function toJSON
0022    public function toLocaleString
0023    public function toString
0024    public function valueOf
0025    -constructor- function Test
0026    public function log
0027    public function mapVerbosity
0028    internal-ff3fbf5aca8a9a9068f68f49a5232627-0 function searchUp
0029    public function setLogPath
0030    public function skip

#
#  Instance slot assignments for the "Test" class (Num prop 12, num inherited 0)
#
0000    public var bin: Path
0001    public var config: Object
0002    public var depth: Number
0003    public var dir: Path
0004    public var lib: Path
0005    public var multithread: Number
0006    public var threads: Number
0007    public var top: Path
0008    public var os: Path
0009    public var hostOs: Path
0010    public var verbosity: Number
0011    internal-ff3fbf5aca8a9a9068f68f49a5232627-0 var out

#
#  Local slot assignments for the "clone" function (Num slots 1)
#
0000    private var deep: Boolean

#
#  Local slot assignments for the "get" function (Num slots 1)
#
0000    private var options: Object

#
#  Local slot assignments for the "hasOwnProperty" function (Num slots 1)
#
0000    private var name: String

#
#  Local slot assignments for the "isPrototypeOf" function (Num slots 1)
#
0000    private var obj: Object

#
#  Local slot assignments for the "propertyIsEnumerable" function (Num slots 1)
#
0000    private var property: String

#
#  Local slot assignments for the "log" function (Num slots 3)
#
0000    private var level: Number
0001    private var name: String
0002    private var items: Array

#
#  Local slot assignments for the "mapVerbosity" function (Num slots 1)
#
0000    private var adj: Number

#
#  Local slot assignments for the "searchUp" function (Num slots 1)
#
0000    private var path: Path

#
#  Local slot assignments for the "setLogPath" function (Num slots 1)
#
0000    private var path: Path

#
#  Local slot assignments for the "skip" function (Num slots 1)
#
0000    private var message: String

#
#  Local slot assignments for the "assert" function (Num slots 2)
#
0000    private var cond: Boolean
0001    private var message: String

#
#  Local slot assignments for the "cleanDir" function (Num slots 1)
#
0000    private var path

#
#  Local slot assignments for the "sh" function (Num slots 1)
#
0000    private var args

#
#  Local slot assignments for the "testCmdNoCapture" function (Num slots 2)
#
0000    private var args
0001    -hoisted-1 var e

#
#  Local slot assignments for the "testCmd" function (Num slots 2)
#
0000    private var args
0001    -hoisted-1 var e

#
#  Local slot assignments for the "locate" function (Num slots 1)
#
0000    private var program

#
#  Local slot assignments for the "share" function (Num slots 2)
#
0000    private var key: String
0001    private var value: String

----------------------------------------------------------------------------------------------
#
#  Constant Pool (size 3329 bytes)
#
0000   ""
0001   "ejs"
0002   "utest.worker"
0003   "public class Test {"
0004   "internal-ff3fbf5aca8a9a9068f68f49a5232627-0"
0005   "    public var bin: Path"
0006   "bin"
0007   "public"
0008   "Path"
0009   "    public var config: Object"
0010   "config"
0011   "Object"
0012   "    public var depth: Number"
0013   "depth"
0014   "Number"
0015   "    public var dir: Path"
0016   "dir"
0017   "    public var lib: Path"
0018   "lib"
0019   "    public var multithread: Number"
0020   "multithread"
0021   "    public var threads: Number"
0022   "threads"
0023   "    public var top: Path"
0024   "top"
0025   "    public var os: Path"
0026   "os"
0027   "    public var hostOs: Path"
0028   "hostOs"
0029   "    public var verbosity: Number = false"
0030   "verbosity"
0031   "    let out = App.outputStream"
0032   "out"
0033   "    public function log(level: Number, name: String, ...items) {"
0034   "        if (verbosity >= level) {"
0035   "            out.write("%12s " % [name])"
0036   "%12s "
0037   ""
0038   "write"
0039   "            out.write(items)"
0040   "            if (verbosity > 1) {"
0041   "                out.write("\n")"
0042   "
"
0043   "            } else {"
0044   "                out.write(": ")"
0045   ": "
0046   "    }"
0047   "log"
0048   "level"
0049   "private"
0050   "intrinsic"
0051   "name"
0052   "String"
0053   "items"
0054   "Array"
0055   "    public function mapVerbosity(adj: Number): String {"
0056   "        str = """
0057   "str"
0058   "        return str"
0059   "        for (i = test.verbosity + adj; i > 0; i--)"
0060   "test"
0061   "i"
0062   "            str += "-v ""
0063   "-v "
0064   "mapVerbosity"
0065   "adj"
0066   "    function searchUp(path: Path): String {"
0067   "        if (exists(path))"
0068   "exists"
0069   "            return path"
0070   "        path = Path(path).relative"
0071   "        dir = Path("..")"
0072   ".."
0073   "        while (true) {"
0074   "            up = Path(dir.relative).join(path)"
0075   "up"
0076   "            if (exists(up))"
0077   "                return up"
0078   "            if (dir.parent == dir) break"
0079   "            dir = dir.parent"
0080   "        return null"
0081   "searchUp"
0082   "path"
0083   "ejs.io"
0084   "    public function setLogPath(path: Path): Void {"
0085   "        if (path) {"
0086   "            out = File(path).open("aw")"
0087   "aw"
0088   "        } else {"
0089   "            out = App.outputStream"
0090   "setLogPath"
0091   "Void"
0092   "    public function skip(message: String): Void"
0093   "        postMessage({ skip: message })"
0094   "skip"
0095   "postMessage"
0096   "message"
0097   "-constructor-"
0098   "Test"
0099   "clone"
0100   "Function"
0101   "deep"
0102   "Boolean"
0103   "get"
0104   "iterator"
0105   "Iterator"
0106   "options"
0107   "getValues"
0108   "hasOwnProperty"
0109   "isPrototypeOf"
0110   "obj"
0111   "length"
0112   "propertyIsEnumerable"
0113   "property"
0114   "toJSON"
0115   "toLocaleString"
0116   "toString"
0117   "valueOf"
0118   "public function assert(cond: Boolean, message: String = null): Void {"
0119   "    if (cond) {"
0120   "        postMessage({ passed: true })"
0121   "passed"
0122   "    } else {"
0123   "        if (message) {"
0124   "            throw new AssertError(message)"
0125   "            throw new AssertError("")"
0126   "}"
0127   "assert"
0128   "cond"
0129   "public function cleanDir(path) {"
0130   "    rmdir(path, true)"
0131   "rmdir"
0132   "    mkdir(path)"
0133   "mkdir"
0134   "cleanDir"
0135   "public function sh(args): String {"
0136   "    test.log(2, "[Run]", "Run: " + args)"
0137   "[Run]"
0138   "Run: "
0139   "    return Cmd.sh(env() + args)"
0140   "sh"
0141   "args"
0142   "public function testCmdNoCapture(args): Boolean {"
0143   "    test.log(2, "[Test]", "Run test: " + args)"
0144   "[Test]"
0145   "Run test: "
0146   "    try {"
0147   "        args = args.toString().toJSON().trim('"')"
0148   """
0149   "trim"
0150   "        Cmd.runx(("/bin/sh -c \"" + env() + args + "\"").trim('\n'), data)"
0151   "/bin/sh -c ""
0152   "data"
0153   "        assert(true)"
0154   "        return true"
0155   "    } catch (e) {"
0156   "e"
0157   "-hoisted-1"
0158   "        assert(false, e)"
0159   "        return false"
0160   "testCmdNoCapture"
0161   "public function testCmd(args): Boolean {"
0162   "        Cmd.run(("/bin/sh -c \"" + env() + args + "\"").trim('\n'), data)"
0163   "testCmd"
0164   "public function env(): String {"
0165   "    return """
0166   "env"
0167   "public function locate(program): String {"
0168   "    return test.bin.join(program).portable.toString()"
0169   "join"
0170   "portable"
0171   "locate"
0172   "program"
0173   "public function share(key: String, value: String)"
0174   "    postMessage({ key: key, value: value })"
0175   "key"
0176   "value"
0177   "share"
0178   "block_0000_0"
0179   "-block-"
0180   "__initializer__"
0181   "default"
