#!/bin/bash
#
#   Build a project using the native IDE
#
#   Currently supports Visual Studio, MSBuild and XCode
#   This is an internal-script used when testing only
#
VS="/Program Files/Microsoft Visual Studio 10/Common7/IDE/devenv.exe"
MB="c:/Windows/Microsoft.NET/Framework/v4.0.30319/msbuild.exe"
BLD_TOP=`pwd`
if [ `uname` = Darwin ] ; then
    BLD_OS=MACOSX
elif [ -x c:/windows ] ; then
    BLD_OS=WIN
else
    echo Unsupported OS for native build
    exit 255
fi

if [ ! -f ./configure ] ; then
    echo "Can't find buildConfig Must run from top of tree"
    exit 255
fi
if [ -x src/include ] ; then
    cp src/include/master/buildConfig.h src/include
    . build/bin/buildConfig.sh
else
    mkdir -p out/inc out/bin
    cp projects/${BLD_OS}/*-all/buildConfig.default out/inc/buildConfig.h
    . `cacheConfig out/inc/buildConfig.h`
fi
touch projects/${BLD_OS}/${BLD_PRODUCT}-all/buildConfig.default

log() {
    tag=$1
    shift
    printf "%12s %s\n" $tag "$*"
}

vsBuild() {
    local status=0
    if [ -x "${VS}" ] ; then
        log "[Test]" "Building ${BLD_PRODUCT}-static VS project"
        rm -fr projects/WIN/*/Win32
        "${VS}" projects/WIN/${BLD_PRODUCT}-static/*.sln /clean
        "${VS}" projects/WIN/${BLD_PRODUCT}-static/*.sln /build

        log "[Test]" "Building ${BLD_PRODUCT}-dynamic VS project"
        rm -fr projects/WIN/*/Win32
        "${VS}" projects/WIN/${BLD_PRODUCT}-dynamic/*.sln /clean

        if [ $? != 0 ] ; then
            echo Failed to clean: "${VS}" projects/WIN/${BLD_PRODUCT}-dynamic/*.sln /clean
            exit 255
        fi
        "${VS}" projects/WIN/${BLD_PRODUCT}-dynamic/*.sln /build
        if [ $? != 0 ] ; then
            echo Failed to build: "${VS}" projects/WIN/${BLD_PRODUCT}-dynamic/*.sln /build
            exit 255
        fi
        rm -fr projects/WIN/*/Win32

        status=0
        for f in ejs ejsc ejsmod sqlite http
        do
            if [ ! -x "$BLD_BIN_DIR/${f}${BLD_EXE}" ] ; then
                echo Missing target $BLD_BIN_DIR/${f}${BLD_EXE} >&2
                status=255
            fi
        done
    fi
    exit $status
}


msBuild() {
    local home status=0

    home=`pwd`
    cd projects/WIN/${BLD_PRODUCT}-all
    touch buildConfig.default
    log "[Test]" "Building ${BLD_PRODUCT}-all project"
    rm -fr Win32
    "${MB}" /t:clean ${BLD_PRODUCT}-all.sln
    if [ $? != 0 ] ; then
        echo Failed to clean: "${MB}" projects/WIN/${BLD_PRODUCT}-all/*.sln /clean
        exit 255
    fi
    "${MB}" /t:rebuild ${BLD_PRODUCT}-all.sln
    if [ $? != 0 ] ; then
        echo Failed to build: "${MB}" projects/WIN/${BLD_PRODUCT}-all/*.sln /build
        exit 255
    fi
    rm -fr Win32
    cd $home >/dev/null 2>&1
}

winBuild() {
    local status=0
    if [ -x src/include ] ; then
        if [ ! -x "${VS}" ] ; then
            echo "Can't find $VS" >&2
            exit 255
        else
            vsBuild
        fi
    else
        if [ ! -x "${MB}" ] ; then
            echo "Can't find $MB" >&2
            exit 255
        else
            msBuild
        fi
    fi
}

macBuild() {
    if which xcodebuild >/dev/null 2>&1 ; then
        if [ "$BLD_TYPE" = "DEBUG" ] ; then
            config=Debug
        else
            config=Release
        fi
        xcodebuild -project projects/MACOSX/ejs-all/ejs-all.xcodeproj -configuration $config clean
        if [ $? != 0 ] ; then
            echo Failed to clean: xcodebuild -project projects/MACOSX/ejs-all/ejs-all.xcodeproj -configuration $config clean
        fi
        xcodebuild -project projects/MACOSX/ejs-all/ejs-all.xcodeproj -configuration $config
        if [ $? != 0 ] ; then
            echo Failed to build: xcodebuild -project projects/MACOSX/ejs-all/ejs-all.xcodeproj -configuration $config
        fi
    fi
}

case $BLD_OS in
WIN)
    winBuild
    ;;
MACOSX)
    macBuild
    ;;
*)
    ;;
esac

status=0
for f in ejs ejsc ejsmod sqlite http
do
    if [ ! -x "${BLD_BIN_DIR}/${f}${BLD_EXE}" ] ; then
        echo Missing target ${BLD_BIN_DIR}/${f}${BLD_EXE} >&2
        status=255
    fi
done
exit $status
