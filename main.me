/*
    main.me -- MakeMe file for Ejscript
 */

Me.load({
    makeme: '>=0.8.6',

    plugins: [ 'configuration', 'installs' ],

    blend: [
        'src/*.me',
        'src/*/*.me',
        'doc/doc.me',
    ],

    customize: [
        /* 
            The optional custom.me file is loaded after main.me is fully processed. It can
            thus override any setting. Feel free to create and customize. 
         */
        'custom.me',
    ],

    configure: {
        requires:  [ 'osdep', 'http', 'mpr', 'pcre', 'zlib' ]
        discovers: [ 'sqlite', 'ssl' ],
    },

    settings: {
        integrate: true,

        /*
            Installation prefix set
         */
        prefixes: 'install-prefixes',
        manifest: 'installs/manifest.me',

        /* Must build locally to build tools */
        platforms: [ 'local' ],

        /*
            EJS configuration
         */
        ejs: {
            /*
                Control if ejs.* is enabled or disabled
             */
            db: true,
            mail: true,
            mapper: true,
            tar: true,
            template: true,
            web: true,
            zlib: true,
        },

        /*
            EST SSL stack configuration
         */
        est: {
            camellia: false,
            padlock: false,                                                                                
            sslClient: false,                                                                              
            des: false,                                                                                    
            testCerts: false,                                                                              
            xtea: false,                                                                                   
            romTables: false,                                                                              
            genPrime: false,                                                                               
        }, 
                                                                                                           
        http: {                                                                                            
            /* Use PAM (Plugable Authentication Module) to store passwords */                              
            pam: true,
            webSockets: true,
        },

        mpr: {
            /*
                Enable logging via mprLog to the log file
                The default is to enable logging for both debug and release builds.
             */
            logging: true,


            alloc: {
                parallel: true
            },
        },

        watchdog: {
            name: 'ejsman',
        },

        /*
            Tailor the optimization for size|speed
            Currently, some ejs.web unit tests require tune == speed 
         */
        tune: 'speed',
    },

    usage: {
        'http.pam':         'Enable Unix Pluggable Auth Module (true|false)',
        'http.webSockets':  'Enable WebSockets (true|false)',                
        'mpr.logging':      'Enable application logging (true|false)',
    },

    scripts: {
        loaded: `
            if (me.targets.httpcmd) {
                me.targets.httpcmd.enable = false
            }
        `,
    },

    targets: {
        init: {
            first: true,
            path: 'init',
            'generate-make': `
                if [ ! -d /usr/include/openssl ] ; then echo
                    echo Install libssl-dev to get /usr/include/openssl
                    exit 255
                fi
            `,
            action: ' ',
            enable: "me.platform.os == 'linux'",
        },
        /*
            See src/core/core.me for building the core library
            See src/cmd/cmd.me for building the language commands
            See installs/installs.me for the install targets
         */
        projects: {
            action: "genProjects('-with openssl')",
        },

        mine: {
            action: `genProjects('', 'mine', Config.OS + '-' + Config.CPU)`,
        },

        test: {
            type: 'test',
            home: '${TOP}',
            action: `
                run(['${LBIN}/utest', '-v', '-d', me.settings.depth])
            `,
            platforms: [ 'local' ],
        }
    },
})
