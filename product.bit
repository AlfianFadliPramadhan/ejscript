/*
    product.bit -- Product Bit File for Ejscript
 */

Bit.load({
    blend: [
        'src/deps/mpr/mpr.bit',
        'src/deps/pcre/pcre.bit',
        'src/deps/http/http.bit',
        'src/deps/sqlite/sqlite.bit',

        'src/libejs.bit',
        'src/cmd/cmd.bit',
        'src/core/core.bit',

        'src/jems/ejs.bit/bit.bit',
        'src/jems/ejs.unix/unix.bit',
        'src/jems/ejs.jem/jem.bit',
        'src/jems/ejs.db/db.bit',
        'src/jems/ejs.db.mapper/mapper.bit',
        'src/jems/ejs.db.sqlite/sqlite.bit',
        'src/jems/ejs.web/web.bit',
        'src/jems/ejs.template/template.bit',
        'src/jems/ejs.tar/tar.bit',
        'src/jems/ejs.zlib/zlib.bit',
        'src/jems/ejs.mvc/mvc.bit',
        'src/jems/ejs.utest/utest.bit',
        '${BITS}/embedthis.bit',
    ],

    settings: {
		product: 'ejs',
		title: 'Embedthis Ejscript',
        company: 'Embedthis',
		version: '2.0.0',
		buildNumber: 'B2',
        sync: ['http', 'mpr', 'pcre', 'sqlite'],
        manager: 'ejsman',
        packs: [ 'bits/packs' ],
        without: ['doxygen', 'dsi', 'man', 'man2html', 'ssl', 'zlib'],
    },

    usage: {
        assert: 'Enable program assertions',
        debug: 'Enable a debug build',
        tune: 'Optimize for size|speed|balanced',
    },

    profiles: {
        debug: { settings: { 
            debug: true, 
            assert: true,
        }, },
        release: { settings: { 
            debug: false, 
            assert: false,
        } },
    },

    '+optional': [ 'doxygen', 'openssl', 'matrixssl', 'sqlite', 'utest', 'zlib' ],
    '+required': [ 'pcre' ]

    packs: {
        ejs: {
            path: '${BIN}/ejs'
        },
        utest: {
            path: '${BIN}/utest'
        },
    },

    targets: {
        package: {
            depends: ['build'],
            action: "
                //  MOB - must install bits
                safeRemove(bit.dir.pkg)
                let strip = bit.settings.profile == 'debug'
                let p = {}
                for (prefix in bit.prefixes) {
                    p[prefix] = bit.dir.pkg.join(bit.prefixes[prefix])
                    p[prefix].makeDir({permissions: 0755, owner: 0, group: 0})
                }
                install('doc/licenses/LICENSE.TXT', p.product, {fold: true, expand: true})
                install('doc/product/*.TXT', p.product, {fold: true, expand: true})
                install('uninstall.sh', p.bin.join('uninstall'), {permissions: 0755, expand: true})
                install('linkup', p.bin, {permissions: 0755, expand: true})
                install(bit.dir.bin + '/*', p.bin, {
                    include: /ejs|appman|esp|http|auth|makerom|libejs|libmpr/,
                    permissions: 0755, 
                })
                install(bit.dir.bin.join('ejs'), p.bin, {
                    permissions: 0755, 
                    strip: strip,
                })
                install(bit.dir.lib + '/*', p.lib, {
                    permissions: 0755, 
                    exclude: /file-save|www|simple|sample/,
                })
                install('src/server/appweb.conf', p.config)
                install('src/server/mime.types', p.config)
                install('src/server/php.ini', p.config)
                install('src/server/web/**/*', p.web, {exclude: /mgmt\// })
                install('src/server/web/test/*', p.web.join('test'))
                install('src/esp/web/test/*', p.web.join('test'))
                install('src/esp/web/test/*', p.web.join('test'), {
                    include: /.cgi|test.pl|test.py/,
                    permissions: 0755,
                })
                install(bit.dir.lib + '/*', p.lib, {
                    permissions: 0644, 
                    include: /esp.conf|esp-www/,
                })
                let user = getWebUser(), group = getWebUser()
                install('', p.spool.join('cache/.dummy'), {create: true, permissions: 0755, owner: user, group: group})
                install('', p.spool.join('cache/.dummy'), {create: true, permissions: 0755, owner: user, group: group})

                if (bit.settings.task != 'remove') {
                    if (bit.packs.ssl.enable && bit.platform.os == 'linux') {
                        install(bit.dir.lib.join(bit.ext.shobj + '.*', p.lib, {strip: strip, permissions: 0755}
                        for each (f in p.lib.glob('*.so.*')) {
                            let withver = f.basename
                            let nover = withver.name.replace(/\.[0-9]*.*/, '.so')
                            lib.join(nover).remove()
                            //  MOB - withver.link(p.lib.join(nover))
                            Cmd.sh('ln -s ' + withver + ' ' + lib.join(nover)) 
                        }
                    }
                    if (build.BLD_HOST_OS == 'WIN') {
                        Cmd(['setConfig', 
                            '--home', '.', 
                            '--documents', 'web', 
                            '--logs', 'logs', 
                            '--port', bit.settings.http_port,
                            '--ssl', bit.settings.ssl_port,
                            '--cache', 'cache', 
                            '--modules', 'bin', 
                            cfg.join('appweb.conf')])
                    } else {
                        Cmd(['setConfig', 
                            '--home', bit.dir.prefix.config,
                            '--documents', bit.dir.prefix.web,
                            '--logs', bit.dir.prefix.log,
                            '--port', build.BLD_HTTP_PORT, 
                            '--ssl', build.BLD_SSL_PORT, 
                            '--user', user,
                            '--group', group,
                            '--cache', bit.dir.prefix.spool.join('cache'), 
                            '--modules', bit.dir.prefix.lib,
                            cfg.join('appweb.conf')])
                    }
                    cfg.join('appweb.conf.bak').remove()
                }
                if (bit.packs.ejscript.enable) {
                    install(bit.dir.lib.join('ejs*.mod', p.lib);
                }
                package(['tar', 'native'])
            ",
        },
    },
})
