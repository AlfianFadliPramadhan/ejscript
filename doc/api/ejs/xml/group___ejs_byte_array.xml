<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.8">
  <compounddef id="group___ejs_byte_array" kind="group">
    <compoundname>EjsByteArray</compoundname>
    <title>EjsByteArray</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___ejs_byte_array_1g7c58836430321096069355ee4f0f1114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EjsByteArray *</type>
        <definition>EjsByteArray* ejsCreateByteArray</definition>
        <argsstring>(Ejs *ejs, int size)</argsstring>
        <name>ejsCreateByteArray</name>
        <param>
          <type>Ejs *</type>
          <declname>ejs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Create a byte array. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Create a new byte array instance. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ejs</parametername>
</parameternamelist>
<parameterdescription>
<para>Ejs reference returned from <ref refid="group___ejs_obj_1g50d9d774b3cddd1784d654326cddc237" kindref="member">ejsCreate</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial size of the byte array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new byte array instance </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/ejs/all/ejs.h" line="2938"/>
      </memberdef>
      <memberdef kind="function" id="group___ejs_byte_array_1gd776821fe6df5db995543ec0d60387f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ejsIsByteArray</definition>
        <argsstring>(EjsObj *vp)</argsstring>
        <name>ejsIsByteArray</name>
        <param>
          <type>EjsObj *</type>
          <declname>vp</declname>
        </param>
        <briefdescription>
<para>Determine if a variable is a byte array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vp</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable to test </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the variable is a byte array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/ejs/all/ejs.h" line="2925"/>
      </memberdef>
      <memberdef kind="function" id="group___ejs_byte_array_1gb8ca386fac3fe62e25d296a15da3e80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ejsSetByteArrayPositions</definition>
        <argsstring>(Ejs *ejs, EjsByteArray *ba, int readPosition, int writePosition)</argsstring>
        <name>ejsSetByteArrayPositions</name>
        <param>
          <type>Ejs *</type>
          <declname>ejs</declname>
        </param>
        <param>
          <type>EjsByteArray *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>readPosition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>writePosition</declname>
        </param>
        <briefdescription>
<para>Set the I/O byte array positions. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Set the read and/or write positions into the byte array. ByteArrays implement the Stream interface and support sequential and random access reading and writing of data in the array. The byte array maintains read and write positions that are automatically updated as data is read or written from or to the array. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ejs</parametername>
</parameternamelist>
<parameterdescription>
<para>Ejs reference returned from <ref refid="group___ejs_obj_1g50d9d774b3cddd1784d654326cddc237" kindref="member">ejsCreate</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte array object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>readPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>New read position to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>writePosition</parametername>
</parameternamelist>
<parameterdescription>
<para>New write position to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/ejs/all/ejs.h" line="2951"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>ByteArray class. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>ByteArrays provide a growable, integer indexed, in-memory store for bytes. ByteArrays can be used as a simple array type to store and encode data as bytes or they can be used as buffered Streams implementing the Stream interface. <linebreak/>
<linebreak/>
 When used as a simple byte array, the ByteArray class offers a low level set of methods to insert and extract bytes. The index operator [] can be used to access individual bytes and the copyIn and copyOut methods can be used to get and put blocks of data. In this mode, the read and write position properties are ignored. Access to the byte array is from index zero up to the size defined by the length property. When constructed, the ByteArray can be designated as growable, in which case the initial size will grow as required to accomodate data and the length property will be updated accordingly. <linebreak/>
<linebreak/>
 When used as a Stream, the byte array additional write methods to store data at the location specified by the $writePosition property and read methods to read from the $readPosition property. The $available method indicates how much data is available between the read and write position pointers. The $reset method can reset the pointers to the start of the array. When used with for/in, ByteArrays will iterate or enumerate over the available data between the read and write pointers. <linebreak/>
<linebreak/>
 If numeric values are read or written, they will be encoded according to the value of the endian property which can be set to either LittleEndian or BigEndian. <linebreak/>
<linebreak/>
 In Stream mode ByteArrays can be configured to run in sync or async mode. Adding listeners via the $addListener method will put a stream into async mode. Events will then be issued for close, eof, read and write events. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving</para></simplesect>
<simplesect kind="see"><para><ref refid="group___ejs_byte_array" kindref="compound">EjsByteArray</ref> <ref refid="group___ejs_byte_array_1gd776821fe6df5db995543ec0d60387f0" kindref="member">ejsIsByteArray</ref> <ref refid="group___ejs_byte_array_1g7c58836430321096069355ee4f0f1114" kindref="member">ejsCreateByteArray</ref> <ref refid="group___ejs_byte_array_1gb8ca386fac3fe62e25d296a15da3e80e" kindref="member">ejsSetByteArrayPositions</ref> ejsCopyToByteArray </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
