<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.8">
  <compounddef id="group___ejs_type" kind="group">
    <compoundname>EjsType</compoundname>
    <title>EjsType</title>
    <innerclass refid="struct_ejs_type_helpers" prot="public">EjsTypeHelpers</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___ejs_type_1g2d265a2559f36be71d9948349f2fe9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ejsBindFunction</definition>
        <argsstring>(Ejs *ejs, void *obj, int slotNum, EjsProc fn)</argsstring>
        <name>ejsBindFunction</name>
        <param>
          <type>Ejs *</type>
          <declname>ejs</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slotNum</declname>
        </param>
        <param>
          <type>EjsProc</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Bind a native C function to a function property. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Bind a native C function to an existing javascript function. Functions are typically created by compiling a script file of native function definitions into a mod file. When loaded, this mod file will create the function properties. This routine will then bind the specified C function to the function property. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ejs</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter instance returned from <ref refid="group___ejs_obj_1g50d9d774b3cddd1784d654326cddc237" kindref="member">ejsCreate</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing the function property to bind. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slotNum</parametername>
</parameternamelist>
<parameterdescription>
<para>Slot number of the method property </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Native C function to bind </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/git/ejs/doc/api/ejs/staging/src/include/ejs.h" line="1873"/>
      </memberdef>
      <memberdef kind="function" id="group___ejs_type_1gd1d108c8341a4f6ef3be935d4dc8a723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ejsBindMethod</definition>
        <argsstring>(Ejs *ejs, void *obj, int slotNum, EjsProc fn)</argsstring>
        <name>ejsBindMethod</name>
        <param>
          <type>Ejs *</type>
          <declname>ejs</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slotNum</declname>
        </param>
        <param>
          <type>EjsProc</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Bind a native C function to a method property. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Bind a native C function to an existing javascript method. Method functions are typically created by compiling a script file of native method definitions into a mod file. When loaded, this mod file will create the method properties. This routine will then bind the specified C function to the method property. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ejs</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter instance returned from <ref refid="group___ejs_obj_1g50d9d774b3cddd1784d654326cddc237" kindref="member">ejsCreate</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Type containing the function property to bind. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slotNum</parametername>
</parameternamelist>
<parameterdescription>
<para>Slot number of the method property </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Native C function to bind </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/git/ejs/doc/api/ejs/staging/src/include/ejs.h" line="3539"/>
      </memberdef>
      <memberdef kind="function" id="group___ejs_type_1g0d0ddf8d7e1d5f07f0398749cb2e574f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EjsType *</type>
        <definition>EjsType* ejsCreateType</definition>
        <argsstring>(Ejs *ejs, EjsName *name, struct EjsModule *up, EjsType *baseType, EjsObj *prototype, int size, int slotNum, int numTypeProp, int numInstanceProp, int64 attributes, void *data)</argsstring>
        <name>ejsCreateType</name>
        <param>
          <type>Ejs *</type>
          <declname>ejs</declname>
        </param>
        <param>
          <type>EjsName *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>struct EjsModule *</type>
          <declname>up</declname>
        </param>
        <param>
          <type>EjsType *</type>
          <declname>baseType</declname>
        </param>
        <param>
          <type>EjsObj *</type>
          <declname>prototype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slotNum</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numTypeProp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numInstanceProp</declname>
        </param>
        <param>
          <type>int64</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Create a new type object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Create a new type object </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ejs</parametername>
</parameternamelist>
<parameterdescription>
<para>Ejs reference returned from <ref refid="group___ejs_obj_1g50d9d774b3cddd1784d654326cddc237" kindref="member">ejsCreate</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Qualified name to give the type. This name is merely referenced by the type and must be persistent. This name is not used to define the type as a global property. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>up</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a module that will own the type. Set to null if not owned by any module. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baseType</parametername>
</parameternamelist>
<parameterdescription>
<para>Base type for this type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prototype</parametername>
</parameternamelist>
<parameterdescription>
<para>Prototype object instance properties of this type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of instances. This is the size in bytes of an instance object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slotNum</parametername>
</parameternamelist>
<parameterdescription>
<para>Slot number that the type will be installed at. This is used by core types to define a unique type ID. For non-core types, set to -1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numTypeProp</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of type (class) properties for the type. These include static properties and methods. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numInstanceProp</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of instance properties. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute mask to modify how the type is initialized. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/git/ejs/doc/api/ejs/staging/src/include/ejs.h" line="3485"/>
      </memberdef>
      <memberdef kind="function" id="group___ejs_type_1g24a592f56804bb98240f21cea4288f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ejsDefineGlobalFunction</definition>
        <argsstring>(Ejs *ejs, cchar *name, EjsProc fn)</argsstring>
        <name>ejsDefineGlobalFunction</name>
        <param>
          <type>Ejs *</type>
          <declname>ejs</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>EjsProc</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Define a global function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Define a global public function and bind it to the C native function. This is a simple one liner to define a public global function. The more typical paradigm to define functions is to create a script file of native method definitions and and compile it. This results in a mod file that can be loaded which will create the function/method definitions. Then use <ref refid="group___ejs_type_1gd1d108c8341a4f6ef3be935d4dc8a723" kindref="member">ejsBindMethod</ref> to associate a C function with a property. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/git/ejs/doc/api/ejs/staging/src/include/ejs.h" line="3502"/>
      </memberdef>
      <memberdef kind="function" id="group___ejs_type_1g53d103cc075475c48e027d246a7f2398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ejsDefineInstanceProperty</definition>
        <argsstring>(Ejs *ejs, EjsType *type, int slotNum, EjsName *name, EjsType *propType, int attributes, EjsObj *value)</argsstring>
        <name>ejsDefineInstanceProperty</name>
        <param>
          <type>Ejs *</type>
          <declname>ejs</declname>
        </param>
        <param>
          <type>EjsType *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slotNum</declname>
        </param>
        <param>
          <type>EjsName *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>EjsType *</type>
          <declname>propType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type>EjsObj *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Define an instance property. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Define an instance property on a type. This routine should not normally be called manually. Instance properties are best created by creating a script file of native property definitions and then loading the resultant mod file. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ejs</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter instance returned from <ref refid="group___ejs_obj_1g50d9d774b3cddd1784d654326cddc237" kindref="member">ejsCreate</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type in which to create the instance property </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slotNum</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance slot number in the type that will hold the property. Set to -1 to allocate the next available free slot. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Qualified name for the property including namespace and name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the instance property. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer mask of access attributes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value of the instance property. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The slot number used for the property. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/git/ejs/doc/api/ejs/staging/src/include/ejs.h" line="3560"/>
      </memberdef>
      <memberdef kind="function" id="group___ejs_type_1gf41edbabce385e7cb73ed6526aa2cf22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EjsType *</type>
        <definition>EjsType* ejsGetType</definition>
        <argsstring>(Ejs *ejs, int slotNum)</argsstring>
        <name>ejsGetType</name>
        <param>
          <type>Ejs *</type>
          <declname>ejs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slotNum</declname>
        </param>
        <briefdescription>
<para>Get a type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the type installed at the given slot number. All core-types are installed a specific global slots. When Ejscript is built, these slots are converted into C program defines of the form: ES_TYPE where TYPE is the name of the type concerned. For example, you can get the String type object via: </para></simplesect>
<simplesect kind="pre"><para>ejsGetType(ejs, ES_String) </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ejs</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter instance returned from <ref refid="group___ejs_obj_1g50d9d774b3cddd1784d654326cddc237" kindref="member">ejsCreate</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slotNum</parametername>
</parameternamelist>
<parameterdescription>
<para>Slot number of the type to retrieve. Use ES_TYPE defines. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A type object if successful or zero if the type could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/git/ejs/doc/api/ejs/staging/src/include/ejs.h" line="3574"/>
      </memberdef>
      <memberdef kind="function" id="group___ejs_type_1gc3a3057b7806228b552a4acc82695a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ejsIsA</definition>
        <argsstring>(Ejs *ejs, EjsObj *target, EjsType *type)</argsstring>
        <name>ejsIsA</name>
        <param>
          <type>Ejs *</type>
          <declname>ejs</declname>
        </param>
        <param>
          <type>EjsObj *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>EjsType *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Test if an variable is an instance of a given type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Perform an &quot;is a&quot; test. This tests if a variable is a direct instance or subclass of a given base type. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ejs</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter instance returned from <ref refid="group___ejs_obj_1g50d9d774b3cddd1784d654326cddc237" kindref="member">ejsCreate</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target variable to test. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to compare with the target </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if target is an instance of &quot;type&quot; or an instance of a subclass of &quot;type&quot;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/git/ejs/doc/api/ejs/staging/src/include/ejs.h" line="3514"/>
      </memberdef>
      <memberdef kind="function" id="group___ejs_type_1g1b86509135212a079885a54454389eed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ejsIsPrototype</definition>
        <argsstring>(EjsObj *vp)</argsstring>
        <name>ejsIsPrototype</name>
        <param>
          <type>EjsObj *</type>
          <declname>vp</declname>
        </param>
        <briefdescription>
<para>Determine if a variable is a prototype object. </para>        </briefdescription>
        <detaileddescription>
<para>Types store the template for instance properties in a prototype object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vp</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable to test </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the variable is a prototype object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/git/ejs/doc/api/ejs/staging/src/include/ejs.h" line="3460"/>
      </memberdef>
      <memberdef kind="function" id="group___ejs_type_1ga7ededaf6f7ebf327861ea00ce62784a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ejsIsType</definition>
        <argsstring>(EjsObj *vp)</argsstring>
        <name>ejsIsType</name>
        <param>
          <type>EjsObj *</type>
          <declname>vp</declname>
        </param>
        <briefdescription>
<para>Determine if a variable is an type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vp</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable to test </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the variable is a type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/git/ejs/doc/api/ejs/staging/src/include/ejs.h" line="3452"/>
      </memberdef>
      <memberdef kind="function" id="group___ejs_type_1g1c07c5c5908c4a6db4b35f765efa31ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ejsIsTypeSubType</definition>
        <argsstring>(Ejs *ejs, EjsType *target, EjsType *baseType)</argsstring>
        <name>ejsIsTypeSubType</name>
        <param>
          <type>Ejs *</type>
          <declname>ejs</declname>
        </param>
        <param>
          <type>EjsType *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>EjsType *</type>
          <declname>baseType</declname>
        </param>
        <briefdescription>
<para>Test if a type is a derived type of a given base type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Test if a type subclasses a base type. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ejs</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter instance returned from <ref refid="group___ejs_obj_1g50d9d774b3cddd1784d654326cddc237" kindref="member">ejsCreate</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target type to test. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baseType</parametername>
</parameternamelist>
<parameterdescription>
<para>Base class to see if the target subclasses it. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if target is a &quot;baseType&quot; or a subclass of &quot;baseType&quot;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/git/ejs/doc/api/ejs/staging/src/include/ejs.h" line="3525"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Type class. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Classes in Ejscript are represented by instances of an EjsType. Types are templates for creating instances of the given type, but they are also are runtime accessible objects. Types contain the static properties and methods for objects and store these in their object slots array. They store the instance properties in the type-&gt;instance object. EjsType inherits from EjsBlock, EjsObj and EjsObj. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving</para></simplesect>
<simplesect kind="see"><para><ref refid="group___ejs_type" kindref="compound">EjsType</ref> <ref refid="group___ejs_type_1ga7ededaf6f7ebf327861ea00ce62784a" kindref="member">ejsIsType</ref> ejsIsProperty <ref refid="group___ejs_type_1g0d0ddf8d7e1d5f07f0398749cb2e574f" kindref="member">ejsCreateType</ref> ejsDefineFunction <ref refid="group___ejs_type_1gc3a3057b7806228b552a4acc82695a7d" kindref="member">ejsIsA</ref> <ref refid="group___ejs_type_1g1c07c5c5908c4a6db4b35f765efa31ca" kindref="member">ejsIsTypeSubType</ref> <ref refid="group___ejs_type_1gd1d108c8341a4f6ef3be935d4dc8a723" kindref="member">ejsBindMethod</ref> <ref refid="group___ejs_type_1g53d103cc075475c48e027d246a7f2398" kindref="member">ejsDefineInstanceProperty</ref> <ref refid="group___ejs_type_1gf41edbabce385e7cb73ed6526aa2cf22" kindref="member">ejsGetType</ref> </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
