/*
    doc.me -- MakeMe file for Ejscript documentation
 */

Me.load({

    targets: {
        api: {
            depends: ['scriptApi', 'nativeApi'],
        },

        nativeApi: {
            action: `
                apidoc('api/ejs.dox', [
                    '${SRC}/src/ejs.h'
                    '${SRC}/src/ejs.web/ejsWeb.h',
                    '${SRC}/src/ejsCompiler.h',
                ], 'Ejscript API', 'api/*.tags')
                for each (let src: Path in ['api/ejs.html', 'api/http.html', 'api/mpr.html', 'api/osdep.html',
                        'api/esp.html', 'api/edi.html']) {
                    apiLayout(src, Path('final/ref').join(src))
                }
            `
        }, 

        scriptApi: {
            action: `
                trace('Generate', 'Script library documentation')
                let src = me.dir.src.join('src')
                let files = src.files('core/*.es')
                //  FUTURE 'tar'
                for each (p in ['unix', 'db', 'db.mapper', 'db.sqlite', 'web', 'template']) {
                    files += src.files('ejs.' + p + '/*.es')
                }
                let docmod = Path('').temp().replaceExt('mod')
                run('ejsc --doc --bind --out ' + docmod + ' --require null ' + files.join(' '))
                let edir = me.dir.src.join('doc/api/ejscript')
                rmdir([edir.join('*.html'), edir.join('*.css'), edir.join('images/*')])
                run('ejsmod --warn --html ' + edir + ' --require null ' + docmod)
                docmod.remove()
            `,
        },
    },
})
