.TH BIT "1" "March 2012" "bit" "User Commands"
.SH NAME
bit \- Build It! -- Utility to build and manage programs
.SH SYNOPSIS
.B bit [\fI--benchmark\fR]
[\fI--config path-to-source\fR]
[\fI--continue\fR]
[\fI--debug\fR]
[\fI--diagnose\fR]
[\fI--dump\fR]
[\fI--emulate os-arch\fR]
[\fI--file file.bit\fR]
[\fI--force\fR]
[\fI--gen [make|sh|vs|xcode]\fR]
[\fI--import\fR]
[\fI--keep\fR]
[\fI--log logSpec\fR]
[\fI--out path\fR]
[\fI--profile [debug|release|...]\fR]
[\fI--pre sourcefile\fR]
[\fI--platform os-arch\fR]
[\fI--quiet\fR]
[\fI--set [feature=value]\fR]
[\fI--show\fR]
[\fI--rebuild\fR]
[\fI--release\fR]
[\fI--unset feature\fR]
[\fI--version\fR]
[\fI--verbose\fR]
[\fI--with PACK[-platform][=PATH]\fR]
[\fI--without PACK[-platform]\fR]
[options] [targets|actions] ...
.SH DESCRIPTION
The \fBbit\fR command is modern replacement for the venerable make and not so popular autoconf utilities.
Bit manages the building of programs and products by effectively determining which pieces have been updated and 
thus which components need to be rebuilt. It easily handles direct compilation and generation of projects. 
.PP
.SH WHY BIT?
Many projects rely on autoconf to configure products and make to build. But neither of these tools work well on Windows.
Further, creating portable Makefiles and autoconf scripts that will work on a variety of platforms and also support 
cross-compilation is an exercise in patience. Often the result is slow builds, especially on Windows.
.PP 
Bit replaces both autoconf and make with a single utility: 'bit'.
Bit provides a higher level of abstraction to simply specify the targets (libraries and executables) to build. 
It can build directly on Linux, Mac or Windows and will also generate native projects for Visual Studio and XCode. Bit
builds fast without needing Makefile nesting or recursion to handle complex projects.
.PP
Bit was initiated after evaluating Make, CMake and GYP for use by Appweb and Ejscript in an embedded, cross-compilation
environment. While all three can be made to work, we were expending a large percentage of time on the build system and
less on the actual product. Our design goals were:

    . Easily manage cross-compilation and cross-compilers
    . Support discovery, configuration and integration of external third-party packages
    . Generate native projects for IDE integration
    . Build quickly on windows without relying on Cygwin
    . Support for the entire build cycle: C dependencies, compilation, test and packaging
    . Be hackable and extendable
.SH FEATURES
Bit is implemented primarily as a single Ejscript of some 3K lines and is very hackable. 
It has the following major features:

    . Configuration and component discovery (replaces autoconf)
    . Compiler capability sleuthing
    . Generation of a configuration source configuration header (bit.h)
    . Generation of Xcode, Visual Studio, Make, Nmake and shell script projects
    . Automatic C/C++ source code dependencies
    . Projects can aggregate multiple bit files without using recursion
    . Cross platform. Easily handles Windows, Linux and Mac builds
    . Easy cross-compilation
    . Building outside source tree for read-only file systems
    . Bit files are JavaScript source and are easily modified and extened
    . Multiple build profiles (debug, release, ...)
    . FAST configuration and building, even on windows
.SH NICE BITS
While Bit has a strong feature set, there are some characteristics that make building with Bit especially nice:

    . Unified project view. No make style recursion required.
    . Bit configuration may be comprised by multiple bit files
    . Bit file targets and scripts are relative to their own directory
    . Targets can be named symbolicly not just by the target path.
    . Why option (bit -w) to display why a target was or was not rebuilt
    . Bit files and targets intelligently inherit of outer project properties

.PP

.SH OVERVIEW
A bit file is a JavaScript file with a '.bit' extension that invokes Bit.load() to process a set of build instructions. 
The build instructions are expressed as a JavaScript object literal that Bit.load() integrates into the master set of 
build instructions.
.PP
.RS 5
Bit({
    targets: {
        /* Build the rocket executable */
        rocket: {
            type: 'exe',
            sources: ['*.c'],
        },
    },
})
.RE
.PP
To build the rocket, enter:
.PP
.RS 5
\fBbit rocket\fR
.RE

.PP
There are two kinds of bit files:
.RS 5
 . Local bit files for stand-alone use
 . Main bit files for more complex programs that require a configuration step 
.RE

.SH LOCAL BIT FILES
Local bit files are used to express simple build targets that do not requiring any prior configuration step. 
Local bit files are called 'local.bit'.

.SH MAIN BIT FILES
Main bit files require running a 'bit configure' prior to building. The configuration step generates a platform 
bit file that describes the available build tools and components on the system. The main bit file is called 'main.bit'
and is loaded and blended by the platform bit file when bit is run.

.SH INVOCATION
Bit is typically invoked with zero or more targets to build. If invoked with no targets, Bit will build all out-of-date
targets. If a one or more targets are specified, only those targets will be brought up to date.
.RE
.PP
To build all targets:
.RS 5
\fBbit\fR
.RE
.PP
To build several named targets:
.RS 5
\fBbit libengine librocket space-program \fR
.RE
.PP
Bit pre-defines several targets:

    . build - To build all targets
    . compile - Same as 'build'
    . clean - To clean built targets and prepare for rebuilding
    . rebuild - Clean and build

.SH OPTIONS
.TP
\fB\--benchmark\fR
Measure the elapsed time to run bit.
.TP

\fB\--config path-to-source\fR
Configure the project to prepare for building. This configures Bit for building the project based on the instructions
specified in a 'main.bit' located in the specified path source tree. When run, bit will create a platform configuration 
bit file, a build output directory and bit.h header. The configuration
directory is of the form: OS-ARCH-PROFILE where OS may be win, linux, macosx, ARCH is x86_64, x86, ppc etc., while
PROFILE is typically set to debug or release. For example: 'macosx-x86_64-debug'. The configuration bit file omits the
PROFILE. For example: 'linux-x86.bit'.
.PP
Bit will use the settings.required and settings.optional properties in the main.bit for a list of packages to use. 
When configuring, bit will search for these packages and will create definitions in the configuration bit file for
later use.

.TP
\fB\--continue\fR
Continue to build despite any build errors. Normal operation is to stop building if any build errors are encountered.

.TP
\fB\--debug\fR
Same as --profile debug

.TP
\fB\--diagnose\fR
Run bit with stack backtrace display on errors.

.TP
\fB\--dump\fR
Dump the aggregate bit configuration into a single dump bit file.

.TP
\fB\--emulate os-arch\fR
Emulate the given platform instead of using the local platform.

.TP
\fB\--file bitfile\fR
Use the alternate named bit file instead of local.bit or main.bit.

.TP
\fB\--force\fR
Override warnings and proceed.

.TP
\fB\--gen [make|nmake|sh|vs|xcode] \fR
Generate project files for the current platform. This will generate project files under the 'projects' directory.
The projects are based on the current configuration. 

.TP
\fB\--keep\fR
Keep some intermediate build files. This is currently used by some documentation generation targets.

.TP
\fB\--log logName[:logLevel]\fR
Specify a file to log internal execution messages. Bit will log execution related trace to the log file. The log level
specifies the desired verbosity of output. Level 0 is the least verbose and level 9 is the most. The '-v' switch is
an alias for '--log stderr:2'.

.TP
\fB\--out path\fR
Save Bit trace output to a file instead of displaying to the console.

.TP
\fB\--platform os-arch\fR
Add a platform to build for cross-compilation. 

.TP
\fB\--profile [debug|release|...]\fR
Use the specified profile when building. This options is provided once when configuring and the result is saved in
the platform.profile property in the configuration bit file. Custom profiles can be added to the main.bit or local.bit
files.

.TP
\fB\--quiet\fR
Quiet operation. Suppresses output trace.

.TP
\fB\--set key=value\fR
Set a settings property to a given value. For example: 'bit -set version=1.0' will update the settings.version property.
Use this when running 'bit configure' to persist your changes in the configuration bit file.

.TP
\fB\--show\fR
Show the actual commands executed by bit.

.TP
\fB\--rebuild\fR
Rebuild the specified targets. Can also use 'bit rebuild'.

.TP
\fB\--release\fR
Select the release profile. Same as --profile release.

.TP
\fB\--unset key=value\fR
Clear a settings property.
Use this when running 'bit configure' to persist your changes in the configuration bit file.

.TP
\fB\--version\fR
Print the \fBejs\fR command version and exit.

.TP
\fB\--verbose\fR
Run in verbose mode with more trace about Bit activities.

.TP
\fB\--with PACK[=path]\fR
Build with the named pack located at the optional path. If the path is ommitted, a search is performed for the
pack at default locations. Packs must have a pack description file installed under 'bits/packs' in the bit installation.

.TP
\fB\--without PACK\fR
Build without the named pack.

.PP
.SH "REPORTING BUGS"
Report bugs to dev@embedthis.com.
.SH COPYRIGHT
Copyright \(co 2004-2012 Embedthis Software. Bit and Ejscript are a trademarks of Embedthis Software.
.br
.SH "SEE ALSO"
ejs
