/*
    winsdk.bit - WinSDK tools
 */

let search = bit.dir.programs.glob('Microsoft SDKs/Windows/*')
let wvar: Path = '$(SDK)'
let winsdk: Path = wvar
if (!bit.emulating) {
    if (search.length == 0) {
        throw 'Can\'t find the Windows SDK. Download from http://msdn.microsoft.com/en-us/windowsserver/bb980924.aspx'
    }
    winsdk = probe('Include/WinBase.h', {fullpath: true, search: search.sort().reverse()})
    winsdk = winsdk.dirname.dirname
}
Bit.load({packs: { winsdk: { path: winsdk }}})
bit.env.PATH = [ winsdk.join('Bin').portable ]
bit.env.INCLUDE = [ winsdk.join('INCLUDE').portable ]
if (bit.platform.arch == 'x86_64') {
    bit.env.LIB = [ winsdk.join('lib/x64').portable ]
} else {
    bit.env.LIB = [ winsdk.join('lib').portable ]
}
