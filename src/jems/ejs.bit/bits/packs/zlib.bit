/*
    zlib.bit - Bit package for zlib
 */

let cfg
let path = bit.packs.zlib.path
if (!path) {
    let vers = bit.dir.packs.join('zlib').glob('zlib-*').sort().reverse()
    path = vers[0]
}

if (bit.platform.os == 'win') {
    if (!path) {
        throw 'Can\'t find zlib source distribution'
    }
    let search = [path.join('out32dll')]
    let lib = probe('libeay32.dll', {fullpath: true, search: search}).absolute
    let dir = lib.parent.parent
    search = [path.join('inc32')]
    let incdir = probe('zlib.h', {search: search}).absolute
    cfg = {
        dir: dir,
        path: lib,
        includes: [ incdir ],
        libraries: [ 'libeay32', 'ssleay32' ],
        linker: [ '-libpath:' + lib.parent ],
        imports: [ lib.parent.join('libeay32.dll'), lib.parent.join('ssleay32.dll') ],
    }

} else if (bit.platform.os == 'macosx') {
    let search = [path, '/usr/lib']
    let lib = probe('libz.dylib', {fullpath: true, search: search}).absolute
    let dir = lib.parent
    search = [path, '/usr/include']
    let incdir = probe('zlib.h', {search: search}).absolute
    cfg = {
        dir: dir,
        path: lib,
        includes: [ incdir ],
        libraries: [ 'z' ],
        linker: [ '-L' + lib.parent ],
        imports: [ lib.parent.glob('libz*.dylib') ]
    }

} else {
    let search = [path, '/usr/lib', '/lib' ] + Path('/lib').glob('*-linux-gnu')
    let lib = probe('libcrypto.so', {fullpath: true, search: search}).absolute
    let dir = lib.parent
    search = [path.join('include'), '/usr/include']
    let incdir = probe('zlib.h', {search: search}).absolute
    cfg = {
        dir: dir,
        path: lib,
        includes: [ incdir ],
        libraries: [ 'ssl', 'crypto' ],
        linker: [ '-L' + lib.parent ],
        imports: lib.parent.glob('libssl*.dylib*') + lib.parent.glob('libcrypto*.dylib*'),
    }
}

let template = {packs: { zlib: cfg}}
Bit.load(template)
