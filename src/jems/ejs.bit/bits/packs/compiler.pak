/*
    compiler.bit - Compile package for Bit
 */
let cc: Path
let platform = bit.platform
pack('compiler', "C/C++ Compiler")

let path: Path = bit.packs.compiler.path

if (platform.like == 'posix') {
    path ||= (platform.os == 'macosx') ? 'clang' : 'gcc'
    cc = probe(path, {fullpath: true})
    Bit.load({packs: { compiler: { path: cc }}})

} else if (platform.like == 'windows') {
    let search
    let vsdir: Path
    if (Config.OS == 'WINDOWS') {
        /*
            The VS bin+lib directories contain 32 bit compilers and libraries
            The native VS 64 bit versions are under bin/amd64 and lib/x64
            The cross compile for 64 bit on 32 bit systems is under bin/x86_64 and lib/x64
            The cross compile for 32 bit on 64 bit systems can use the default 32 bit bin + lib

            See: http://msdn.microsoft.com/en-us/library/x4d2c09s(v=vs.80).aspx
            Also: http://blogs.msdn.com/b/david.wang/archive/2006/03/26/howto-detect-process-bitness.aspx
         */
        search = bit.dir.programs.glob('Microsoft Visual Studio*/VC/Bin').sort().reverse()
        if (!search || search.length == 0) {
            throw 'Can\'t find Visual Studio installation'
        }
        vsdir = Path(search[0]).parent.parent
        if (platform.arch == 'x64') {
            if (Config.CPU == 'x64') {
                /* Running on a 64 bit */
                search = search.map(function(e) Path(e).join('amd64'))
            } else {
                /* Cross compile for 64 bits on 32 bits */
                search = search.map(function(e) Path(e).join('x86_amd64'))
            }
        }
    }
    let vv: Path = Path('$(VS)')
    let vsbin, vslib
    if (Config.OS != 'WINDOWS') {
        cc = 'cl.exe'
        vsdir = vv
        vsbin = vsdir.join('VC/Bin'),
        vslib = vsdir.join('VC/lib')
    } else {
        path ||= 'cl.exe'
        cc = probe(path, {fullpath: true, search: search})
        vsbin = cc.dirname
        if (bit.platform.arch == 'x64') {
            vslib = vsbin.join('../../lib/amd64').normalize
        } else {
            vslib = vsbin.join('../lib').normalize
        }
    }
    Bit.load({packs: { compiler: { path: cc, dir: vsdir, search: search }}})

    bit.env.PATH += [
        vsbin,
        vsdir.join('Common7/IDE'),
        vsdir.join('Common7/Tools'),
        vsdir.join('SDK/v3.5/bin'),
        vsdir.join('VC/VCPackages'),
    ]
    bit.env.INCLUDE += [
        vsdir.join('VC/INCLUDE')
    ]
    bit.env.LIB += [ vslib ]

} else if (platform.os == 'vxworks') {
    if (!path) {
        if (platform.arch.match(/^i386$|^i486$$/)) {
            path = 'cc386'
        } else if (platform.arch.match(/^i[56]86$|^pentium$|^x86$/)) {
            path = 'ccpentium'
        } else if (platform.arch.match(/^ppc/)) {
            path = 'ccppc'
        } else if (platform.arch.match(/^xscale|^arm/)) {
            path = 'ccarm'
        } else if (platform.arch.match(/^68/)) {
            path = 'cc68k'
        } else if (platform.arch.match(/^sh/)) {
            path = 'ccsh'
        } else if (platform.arch.match(/^mips$/)) {
            path = 'ccmips'
        } else {
            throw 'Unsupported CPU architecture: ' + platform.arch
        }
    }
    cc = probe(path, {fullpath: true, search: bit.packs.vxworks.search})
    bit.env.WIND_CCNAME = path.basename
    Bit.load({packs: { compiler: { path: cc, name: path.basename }}})
}

let settings = {}

if (bit.emulating) {
    if (platform.like == 'windows') {
        settings = {
            hasMmu: true,
            hasDynLoad: true,
            hasUnnamedUnions: true,
        }
    } else if (platform.os == 'linux') {
        settings = {
            hasDoubleBraces: false,
            hasDynLoad: true,
            hasLibEdit: false,
            hasMmu: true,
            hasMtune: true,
            hasPam: false,
            hasStackProtector: true,
            hasSync: true,
            hasSyncCas: true,
            hasUnnamedUnions: true,
            warn64to32: false,
            warnUnused: true,
        }
    } else if (platform.os == 'macosx') {
        settings = {
            hasDoubleBraces: true,
            hasLibEdit: true,
            hasDynLoad: true,
            hasMmu: true,
            hasMtune: true,
            hasPam: true,
            hasStackProtector: true,
            hasSync: true,
            hasSyncCas: true,
            hasUnnamedUnions: true,
            warn64to32: false,
            warnUnused: false,
        }
    }
} else if (platform.like == 'posix' || platform.os == 'vxworks') {
    settings.hasDoubleBraces = compile(cc, '', '#include <stdarg.h>\nva_list d = {{0}};')
    //  MOB - if env CFLAGS has -mtune=xxx then it should be used instead
    settings.hasMtune = compile(cc, '-mtune=generic', 'int main() { return 0;}')
    settings.hasStackProtector = compile(cc, '-fno-stack-protector', 'int main() { return 0;}')
    settings.hasSync = compile(cc, '', '#include <stdio.h>\nint main() { __sync_synchronize(); return 0; }')
    settings.warnUnused = compile(cc, '-Wno-unused-result',
        '#include <stdio.h>\n#include <stdlib.h>\nint main() { realloc(0, 1024); return 0; }')
    settings.warn64to32 = compile(cc, '-Wshorten-64-to-32', 'int main() { return 0;}')

    if (platform.os != 'vxworks') {
        settings.hasDynLoad = compile(cc, '',
            '#include <stdio.h>\n#include <dlfcn.h>\nint main() { dlopen(\"test.so\", 0); return 0; }')
        settings.hasLibEdit = compile(cc, '',
            '#include <histedit.h>\nint main() { history_init(); return 0; }')
        settings.hasMmu = compile(cc, '',
            '#include <stdio.h>\n#include <unistd.h>\nint main() { fork(); return 0; }')
        settings.hasPam = compile(cc, '',
            '#include <security/pam_appl.h>\nint main() { void *x = pam_start; return x != 0; }')
        settings.hasSyncCas = compile(cc, '',
            '#include <stdio.h>\nint main() { void *ptr = 0; __sync_bool_compare_and_swap(&ptr, ptr, ptr); return 0; }')
        settings.hasUnnamedUnions = compile(cc, '', 
            '#include <stdio.h>\nint main() { struct test { union { int x; int y; };}; return 0; }')
    }
} else if (platform.like == 'windows') {
    settings = {
        hasMmu: true,
        hasDynLoad: true,
        hasUnnamedUnions: true,
    }
}
Bit.load({ settings: settings })

/*
    Test compile to determine supported compiler switches
 */
function compile(cc: Path, command: String, contents: String = null): Boolean {
    let file
    if (contents) {
        //  MOB - refactor dir for temp file
        file = Path('/tmp/bit-' + App.pid + '.c')
        if (bit.platform.os == 'VXWORKS') {
            contents = '#define _VSB_CONFIG_FILE "vsbConfig.h\n' + contents
        }
        file.write(contents + '\n')
        command += ' -c ' + file
    }
    command = '' + cc + ' -Werror -Wall ' + command
    let cmd
    try {
        cmd = new Cmd
        cmd.env = bit.env
        cmd.start(command)
        if (cmd.status != 0) {
            App.log.debug(3, "Test " + command)
            App.log.debug(3, "Compiler package test compile result: " + cmd.error)
        }
    } finally {
        if (file) {
            file.remove()
            file.basename.replaceExt('o').remove()
        }
    }
    return cmd.status == 0
}
