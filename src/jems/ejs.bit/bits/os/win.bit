/*
    win.bit -- Windows Settings
 */

Bit.load({
    ext: {
        exe:   'exe',
        lib:   'a',
        o:     'obj',
        res:   'res',
        shlib: 'lib',
        shobj: 'dll',
    },

    prefixes: {
        product: 'C:/Program Files/${settings.title}',
        productver: 'C:/Program Files/${settings.title}',

        config:  '${prefixes.product}',
        bin:     '${prefixes.product}/bin',
        inc:     '${prefixes.product}/inc',
        lib:     '${prefixes.product}/bin',
        log:     '${prefixes.product}/logs',
        spool:   '${prefixes.product}/tmp',
        src:     '${prefixes.product}/src',
        web:     '${prefixes.product}/web',
    },

    settings: {
        '+required': [ 'winsdk', 'compiler', 'link', 'dumpbin', 'rc' ],
        '+optional': [ 'inno' ],
    },

    defaults: {
        '+compiler':  [ '-nologo', '-GR-', '-W3' ],
        '+defines':   [ '-D_REENTRANT', '-D_MT' ],
        '+libraries': [ 'ws2_32.lib', 'advapi32.lib', 'user32.lib', 'kernel32.lib', 'oldnames.lib', 'msvcrt.lib', 'shell32.lib' ],
        '+libpaths':  [ ],
        '+linker':    [
            '-nologo',
            '-nodefaultlib',
            '-incremental:no',
        ],
        scripts: {
            '+preblend': "
                //  Runs to update defaults.* before blending defaults into targets
                let defaults = bit.defaults
                let settings = bit.settings
                if (settings.preprocess) defaults.compiler += [ '-E' ]
                defaults.libpaths.push(bit.dir.lib)
                if (bit.platform.profile == 'debug') {
                    defaults.defines.push('-DBLD_DEBUG')
                    defaults.compiler += [ '-Zi', '-Od', '-MDd' ]
                    defaults.linker += [ '-debug' ]
                } else {
                    defaults.compiler += [ '-Zi', '-Od', '-MDd' ]
                }
                defaults.linker += [(('${ARCH}' == 'x86_64') ? '-machine:x64' : '-machine:x86')]
            ",
        },
    },

    rules: {
        //  MOB -Fd{DIR} should this be named uniquely per target?
        'c->obj': '"${packs.compiler.path}" -c -Fo${OUT} -Fd${PDB} ${CFLAGS} ${DEFINES} ${INCLUDES} ${PREPROCESS} ${IN}',
        'cpp->obj': '"${packs.compiler.path}" -c -Fo${OUT} -Fd${PDB} ${CFLAGS} ${DEFINES} ${INCLUDES} ${PREPROCESS} ${IN}',
        'lib':  '"${packs.link.path}" -dll -out:${OUT} -entry:_DllMainCRTStartup@12 -def:${DEF} ${LDFLAGS} ${LIBPATHS} ${IN} ${LIBS}',
        'exe':  '"${packs.link.path}" -out:${OUT} -entry:mainCRTStartup -subsystem:console ${LDFLAGS} ${LIBPATHS} ${IN} ${LIBS}',
        'gui':  '"${packs.link.path}" -out:${OUT} -entry:WinMainCRTStartup -subsystem:Windows ${LDFLAGS} ${LIBPATHS} ${IN} ${LIBS}',
        'sym':   '"${packs.dumpbin.path}" /symbols ${IN}',
        'res':   '"${packs.rc.path}" -nologo -Fo ${OUT} ${IN}',
    },
})
