#
#  ejs.db.mapper.lst -- Module Listing for ../../modules/ejs.db.mapper.mod
#

==============================================================================================

MODULE:   ejs.db.mapper <hasInitializer, >


FUNCTION:   [initializer]  ejs function __initializer__() : Void

   LOCAL:   [local-00] var block_0013_35 : Block

    0000: [0] 8d 00 00 ................... openBlock <slot: 0> <0> 
    0003: [0] 33 18 a8 11 48 ............. debug 

    # ejs.db.mapper/Record.es:1108 }

    0008: [0] 01 4c ...................... addNamespace <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0010: [0] 01 a4 01 ................... addNamespace <ejs.db.mapper> 
    0013: [0] 33 18 1a c0 01 ............. debug 

    # ejs.db.mapper/Record.es:13 module ejs.db.mapper {

    0018: [0] 33 18 1e ee 01 ............. debug 

    # ejs.db.mapper/Record.es:15     require ejs.db

    0023: [0] 01 0a ...................... addNamespace <ejs.db> 
    0025: [0] 33 18 38 94 02 ............. debug 

    # ejs.db.mapper/Record.es:28     public class Record {

    0030: [0] 34 a2 0a d6 02 ............. defineClass <var: 0x291,  public::Record> 
    0035: [0] 33 18 d6 10 aa 93 03 ....... debug 

    # ejs.db.mapper/Record.es:1067     class Column {

    0042: [0] 34 ba b4 03 a4 01 .......... defineClass <var: 0x6d1d,  ejs.db.mapper::Column> 
    0048: [0] 33 18 f0 10 e4 97 03 ....... debug 

    # ejs.db.mapper/Record.es:1080     function plural(name: String): String

    0055: [0] 33 18 f8 10 e2 98 03 ....... debug 

    # ejs.db.mapper/Record.es:1084     function singular(name: String): String {

    0062: [0] 33 18 98 11 b8 9e 03 ....... debug 

    # ejs.db.mapper/Record.es:1100     function mapType(value: Object): String {

    0069: [0] 24 ......................... closeBlock 
    0070: [0] 3b ......................... endCode 
    

BLOCK:      [block_0013_35-00]  block_0013_35 (Slots 0)

CLASS:      class Record extends Object
            #  Class Details: 102 class traits, 3 instance traits, requested slot 143

FUNCTION:   [Record-26]  -constructor- const function Record(fields: Object) : void

     ARG:   [arg-00]   private fields : Object

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 94 ......................... putLocalSlot0 
    0010: [0] 33 18 b8 01 94 32 .......... debug 

    # ejs.db.mapper/Record.es:92             initialize(fields)

    0016: [0] 5b ......................... getLocalSlot0 
    0017: [1] 19 5a 02 ................... callThisSlot <slot: 45> <argc: 1> 
    0020: [0] be ......................... return 
    0021: [0] 33 18 ba 01 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:93         }
    
VARIABLE:   [fields-00]  private var fields : Object

FUNCTION:   [Record-27]  -initializer- static function Record-initializer() : Void


    0000: [0] 33 18 3c e4 02 ............. debug 

    # ejs.db.mapper/Record.es:30         static var  _assocName: String        //  Name for use in associations. Lower case class name

    0005: [0] 33 18 3e d4 04 ............. debug 

    # ejs.db.mapper/Record.es:31         static var  _belongsTo: Array         //  List of belonging associations

    0010: [0] 33 18 40 98 06 ............. debug 

    # ejs.db.mapper/Record.es:32         static var  _className: String        //  Model class name

    0015: [0] 33 18 42 b4 07 ............. debug 

    # ejs.db.mapper/Record.es:33         static var  _columns: Object          //  List of columns in this database table

    0020: [0] 33 18 44 86 09 ............. debug 

    # ejs.db.mapper/Record.es:34         static var  _hasOne: Array            //  List of 1-1 containment associations

    0025: [0] 33 18 46 c4 0a ............. debug 

    # ejs.db.mapper/Record.es:35         static var  _hasMany: Array           //  List of 1-many containment  associations

    0030: [0] 33 18 4a 8c 0c ............. debug 

    # ejs.db.mapper/Record.es:37         static var  _db: Database             //  Hosting database

    0035: [0] 33 18 4c ac 0d ............. debug 

    # ejs.db.mapper/Record.es:38         static var  _foreignId: String        //  Camel case class name with "Id". (userCartId))

    0040: [0] 33 18 4e 84 0f ............. debug 

    # ejs.db.mapper/Record.es:39         static var  _keyName: String          //  Name of the key column (typically "id")

    0045: [0] 33 18 50 ca 10 ............. debug 

    # ejs.db.mapper/Record.es:40         static var  _model: Type              //  Model class

    0050: [0] 33 18 52 de 11 ............. debug 

    # ejs.db.mapper/Record.es:41         static var  _tableName: String        //  Name of the database table. Plural, PascalCase

    0055: [0] 33 18 54 b6 13 ............. debug 

    # ejs.db.mapper/Record.es:42         static var  _trace: Boolean           //  Trace database SQL statements

    0060: [0] 33 18 56 f4 14 ............. debug 

    # ejs.db.mapper/Record.es:43         static var  _validations: Array

    0065: [0] 33 18 5a de 15 ............. debug 

    # ejs.db.mapper/Record.es:45         static var  _beforeFilters: Array     //  Filters that run before saving data

    0070: [0] 33 18 5c a8 17 ............. debug 

    # ejs.db.mapper/Record.es:46         static var  _afterFilters: Array      //  Filters that run after saving data

    0075: [0] 33 18 5e ee 18 ............. debug 

    # ejs.db.mapper/Record.es:47         static var  _wrapFilters: Array       //  Filters that run before and after saving data

    0080: [0] 33 18 62 c8 1a ............. debug 

    # ejs.db.mapper/Record.es:49         var _keyValue: Object                 //  Record key column value

    0085: [0] 33 18 64 f0 1b ............. debug 

    # ejs.db.mapper/Record.es:50         var _errors: Object                   //  Error message aggregation

    0090: [0] 33 18 66 98 1d ............. debug 

    # ejs.db.mapper/Record.es:51         var _cacheAssoc: Object               //  Cached association data

    0095: [0] 33 18 6a c4 1e ............. debug 

    # ejs.db.mapper/Record.es:53         static var ErrorMessages = {

    0100: [0] 33 18 6c aa 1f ............. debug 

    # ejs.db.mapper/Record.es:54             accepted: "must be accepted",

    0105: [0] 56 00 ...................... loadString <> 
    0107: [1] 56 fe 1f ................... loadString <accepted> 
    0110: [2] 56 90 20 ................... loadString <must be accepted> 
    0113: [3] 33 18 6e b2 20 ............. debug 

    # ejs.db.mapper/Record.es:55             blank: "can't be blank",

    0118: [3] 56 00 ...................... loadString <> 
    0120: [4] 56 fc 20 ................... loadString <blank> 
    0123: [5] 56 88 21 ................... loadString <can't be blank> 
    0126: [6] 33 18 70 a6 21 ............. debug 

    # ejs.db.mapper/Record.es:56             confirmation: "doesn't match confirmation",

    0131: [6] 56 00 ...................... loadString <> 
    0133: [7] 56 96 22 ................... loadString <confirmation> 
    0136: [8] 56 b0 22 ................... loadString <doesn't match confirmation> 
    0139: [9] 33 18 72 e6 22 ............. debug 

    # ejs.db.mapper/Record.es:57             empty: "can't be empty",

    0144: [9] 56 00 ...................... loadString <> 
    0146: [10] 56 b0 23 ................... loadString <empty> 
    0149: [11] 56 bc 23 ................... loadString <can't be empty> 
    0152: [12] 33 18 74 da 23 ............. debug 

    # ejs.db.mapper/Record.es:58             invalid: "is invalid",

    0157: [12] 56 00 ...................... loadString <> 
    0159: [13] 56 a0 24 ................... loadString <invalid> 
    0162: [14] 56 b0 24 ................... loadString <is invalid> 
    0165: [15] 33 18 76 c6 24 ............. debug 

    # ejs.db.mapper/Record.es:59             missing: "is missing",

    0170: [15] 56 00 ...................... loadString <> 
    0172: [16] 56 8c 25 ................... loadString <missing> 
    0175: [17] 56 9c 25 ................... loadString <is missing> 
    0178: [18] 33 18 78 b2 25 ............. debug 

    # ejs.db.mapper/Record.es:60             notNumber: "is not a number",

    0183: [18] 56 00 ...................... loadString <> 
    0185: [19] 56 86 26 ................... loadString <notNumber> 
    0188: [20] 56 9a 26 ................... loadString <is not a number> 
    0191: [21] 33 18 7a ba 26 ............. debug 

    # ejs.db.mapper/Record.es:61             notUnique: "is not unique",

    0196: [21] 56 00 ...................... loadString <> 
    0198: [22] 56 8a 27 ................... loadString <notUnique> 
    0201: [23] 56 9e 27 ................... loadString <is not unique> 
    0204: [24] 33 18 7c ba 27 ............. debug 

    # ejs.db.mapper/Record.es:62             taken: "already taken",

    0209: [24] 56 00 ...................... loadString <> 
    0211: [25] 56 82 28 ................... loadString <taken> 
    0214: [26] 56 8e 28 ................... loadString <already taken> 
    0217: [27] 33 18 7e aa 28 ............. debug 

    # ejs.db.mapper/Record.es:63             tooLong: "is too long",

    0222: [27] 56 00 ...................... loadString <> 
    0224: [28] 56 f2 28 ................... loadString <tooLong> 
    0227: [29] 56 82 29 ................... loadString <is too long> 
    0230: [30] 33 18 80 01 9a 29 .......... debug 

    # ejs.db.mapper/Record.es:64             tooShort: "is too short",

    0236: [30] 56 00 ...................... loadString <> 
    0238: [31] 56 e6 29 ................... loadString <tooShort> 
    0241: [32] 56 f8 29 ................... loadString <is too short> 
    0244: [33] 33 18 82 01 92 2a .......... debug 

    # ejs.db.mapper/Record.es:65             wrongLength: "wrong length",

    0250: [33] 56 00 ...................... loadString <> 
    0252: [34] 56 e4 2a ................... loadString <wrongLength> 
    0255: [35] 56 fc 2a ................... loadString <wrong length> 
    0258: [36] 33 18 84 01 96 2b .......... debug 

    # ejs.db.mapper/Record.es:66             wrongFormat: "wrong format",

    0264: [36] 56 00 ...................... loadString <> 
    0266: [37] 56 e8 2b ................... loadString <wrongFormat> 
    0269: [38] 56 80 2c ................... loadString <wrong format> 
    0272: [39] 8a e4 06 1a 00 00 00 00 00 00 00 00 00 00 00 00 00  newObject <type: 0x1b2,  ejs::Object> <argc: 13> <att: 13 13 13 13 13 13 13 13 13 13 13 13 13 >
    0289: [1] 33 18 6a c4 1e ............. debug 

    # ejs.db.mapper/Record.es:53         static var ErrorMessages = {

    0294: [1] bc 58 02 ................... putThisTypeSlot <slot: 44> <1> 
    0297: [0] 33 18 90 01 9a 2c .......... debug 

    # ejs.db.mapper/Record.es:72         _keyName = "id"

    0303: [0] 56 ca 2c ................... loadString <id> 
    0306: [1] bc 48 02 ................... putThisTypeSlot <slot: 36> <1> 
    0309: [0] 33 18 92 01 d0 2c .......... debug 

    # ejs.db.mapper/Record.es:73         _className = Reflect(this).name

    0315: [0] 57 ......................... loadThis 
    0316: [1] 17 de 01 02 ................ callGlobalSlot <slot: 111> <argc: 1> 
    0320: [0] 93 ......................... pushResult 
    0321: [1] 7b a0 2d d6 02 ............. getObjName <name> <public> 
    0326: [1] bc 3c 02 ................... putThisTypeSlot <slot: 30> <1> 
    0329: [0] 33 18 96 01 aa 2d .......... debug 

    # ejs.db.mapper/Record.es:75         _model = global[_className]

    0335: [0] 50 ......................... loadGlobal 
    0336: [1] 7b f2 2d 02 ................ getObjName <global> <ejs> 
    0340: [1] 56 80 2e ................... loadString <> 
    0343: [2] 83 3c 02 ................... getThisTypeSlot <slot: 30> <1> 
    0346: [3] 7c ......................... getObjNameExpr 
    0347: [1] bc 4a 02 ................... putThisTypeSlot <slot: 37> <1> 
    0350: [0] 33 18 98 01 82 2e .......... debug 

    # ejs.db.mapper/Record.es:76         _assocName = _className.toCamel()

    0356: [0] 83 3c 02 ................... getThisTypeSlot <slot: 30> <1> 
    0359: [1] 18 5e 00 ................... callObjSlot <slot: 47> <argc: 0> 
    0362: [0] 93 ......................... pushResult 
    0363: [1] bc 38 02 ................... putThisTypeSlot <slot: 28> <1> 
    0366: [0] 33 18 9a 01 d6 2e .......... debug 

    # ejs.db.mapper/Record.es:77         _foreignId = _className.toCamel() + _keyName.toPascal()

    0372: [0] 83 3c 02 ................... getThisTypeSlot <slot: 30> <1> 
    0375: [1] 18 5e 00 ................... callObjSlot <slot: 47> <argc: 0> 
    0378: [0] 93 ......................... pushResult 
    0379: [1] 83 48 02 ................... getThisTypeSlot <slot: 36> <1> 
    0382: [2] 18 60 00 ................... callObjSlot <slot: 48> <argc: 0> 
    0385: [1] 93 ......................... pushResult 
    0386: [2] 00 ......................... add 
    0387: [1] bc 46 02 ................... putThisTypeSlot <slot: 35> <1> 
    0390: [0] 33 18 9c 01 d6 2f .......... debug 

    # ejs.db.mapper/Record.es:78         _tableName = plural(_className).toPascal()

    0396: [0] 83 3c 02 ................... getThisTypeSlot <slot: 30> <1> 
    0399: [1] 1f bc 30 a4 01 02 .......... callScopedName <plural> <ejs.db.mapper> <argc: 1> 
    0405: [0] 93 ......................... pushResult 
    0406: [1] 1e ca 30 00 00 ............. callObjName <toPascal> <> <argc: 0> 
    0411: [0] 93 ......................... pushResult 
    0412: [1] bc 4c 02 ................... putThisTypeSlot <slot: 38> <1> 
    0415: [0] 33 18 a2 01 dc 30 .......... debug 

    # ejs.db.mapper/Record.es:81         use default namespace public

    0421: [0] 7e 5c ...................... getGlobalSlot <slot: 46> 
    0423: [1] 02 ......................... addNamespaceRef 
    0424: [0] 33 18 b6 01 a6 31 .......... debug 

    # ejs.db.mapper/Record.es:91         function Record(fields: Object? = null) {

    0430: [0] 33 18 c0 01 a0 33 .......... debug 

    # ejs.db.mapper/Record.es:96         function initialize(fields: Object? = null): Void {

    0436: [0] 33 18 d6 01 de 36 .......... debug 

    # ejs.db.mapper/Record.es:107         static function afterFilter(fn, options: Object? = null): Void {

    0442: [0] 33 18 ea 01 c0 39 .......... debug 

    # ejs.db.mapper/Record.es:117         static function beforeFilter(fn, options: Object? = null): Void {

    0448: [0] 33 18 86 02 94 3c .......... debug 

    # ejs.db.mapper/Record.es:131         static function belongsTo(owner, options: Object? = null): Void {

    0454: [0] 33 18 98 02 ce 3e .......... debug 

    # ejs.db.mapper/Record.es:140         private static function cachedRead(rec: Record, field: String, model, key: String, options: Object): Object {

    0460: [0] 33 18 a8 02 bc 44 .......... debug 

    # ejs.db.mapper/Record.es:148         private static function checkFormat(thisObj: Record, field: String, value, options: Object): Void {

    0466: [0] 33 18 b4 02 a4 49 .......... debug 

    # ejs.db.mapper/Record.es:154         private static function checkNumber(thisObj: Record, field: String, value, options): Void {

    0472: [0] 33 18 c0 02 cc 4d .......... debug 

    # ejs.db.mapper/Record.es:160         private static function checkPresent(thisObj: Record, field: String, value, options): Void {

    0478: [0] 33 18 d0 02 ba 54 .......... debug 

    # ejs.db.mapper/Record.es:168         private static function checkUnique(thisObj: Record, field: String, value, options): Void {

    0484: [0] 33 18 ee 02 c2 5c .......... debug 

    # ejs.db.mapper/Record.es:183         private function coerceToEjsTypes(): Void {

    0490: [0] 33 18 b6 03 9c 6d .......... debug 

    # ejs.db.mapper/Record.es:219         private static function createAssociations(rec: Record, set: Array, preload, options): Void {

    0496: [0] 33 18 fe 03 dc 7e .......... debug 

    # ejs.db.mapper/Record.es:255         private static function createRecord(data: Object, options: Object = {}) {

    0502: [0] 33 18 d6 04 b8 92 01 ....... debug 

    # ejs.db.mapper/Record.es:299         function error(field: String, msg: String): Void {

    0509: [0] 33 18 96 05 b6 94 01 ....... debug 

    # ejs.db.mapper/Record.es:331         static function find(key: Object, options: Object = {}): Object {

    0516: [0] 33 18 ba 05 94 9b 01 ....... debug 

    # ejs.db.mapper/Record.es:349         static function findAll(options: Object = {}): Array {

    0523: [0] 33 18 e4 05 82 a1 01 ....... debug 

    # ejs.db.mapper/Record.es:370         static function findOneWhere(where: String): Object {

    0530: [0] 33 18 84 06 90 a4 01 ....... debug 

    # ejs.db.mapper/Record.es:386         static function findWhere(where: String, count: Number? = null): Array {

    0537: [0] 33 18 9e 06 a2 a8 01 ....... debug 

    # ejs.db.mapper/Record.es:399         static function getColumnNames(): Array { 

    0544: [0] 33 18 ba 06 b0 ac 01 ....... debug 

    # ejs.db.mapper/Record.es:413         static function getColumnTitles(): Array { 

    0551: [0] 33 18 d4 06 94 ae 01 ....... debug 

    # ejs.db.mapper/Record.es:426         static function getColumnType(field: String): String {

    0558: [0] 33 18 e6 06 c2 b0 01 ....... debug 

    # ejs.db.mapper/Record.es:435         static function getDb(): Database {

    0565: [0] 33 18 fc 06 82 b3 01 ....... debug 

    # ejs.db.mapper/Record.es:446         function getErrors(): Array

    0572: [0] 33 18 88 07 86 b4 01 ....... debug 

    # ejs.db.mapper/Record.es:452         static function getKeyName(): String

    0579: [0] 33 18 94 07 a0 b5 01 ....... debug 

    # ejs.db.mapper/Record.es:458         static function getNumRows(): Number {

    0586: [0] 33 18 a8 07 a4 ba 01 ....... debug 

    # ejs.db.mapper/Record.es:468         private static function getSchema(): Void {

    0593: [0] 33 18 d4 07 bc c5 01 ....... debug 

    # ejs.db.mapper/Record.es:490         static function getTableName(): String

    0600: [0] 33 18 ee 07 e2 c6 01 ....... debug 

    # ejs.db.mapper/Record.es:503         static function hasAndBelongsToMany(model: Object, options: Object = {}): Void {

    0607: [0] 33 18 80 08 d0 c9 01 ....... debug 

    # ejs.db.mapper/Record.es:512         function hasError(field: String? = null): Boolean {

    0614: [0] 33 18 a8 08 b2 cd 01 ....... debug 

    # ejs.db.mapper/Record.es:532         static function hasMany(model: Object, options: Object = {}): Void {

    0621: [0] 33 18 c4 08 da cf 01 ....... debug 

    # ejs.db.mapper/Record.es:546         static function hasOne(model: Object, options: Object? = null): Void {

    0628: [0] 33 18 d4 08 80 d2 01 ....... debug 

    # ejs.db.mapper/Record.es:554         static private function innerFind(key: Object, limit: Number? = null, options: Object = {}): Array {

    0635: [0] 33 18 ae 0b bc 9e 02 ....... debug 

    # ejs.db.mapper/Record.es:727         private static function makeLazyReader(rec: Record, field: String, model, key: String, 

    0642: [0] 33 18 c2 0b a8 a4 02 ....... debug 

    # ejs.db.mapper/Record.es:737         private static function mapSqlTypeToEjs(sqlType: String): Type {

    0649: [0] 33 18 da 0b 98 aa 02 ....... debug 

    # ejs.db.mapper/Record.es:749         private static function prepareValue(field: String, value: Object): String {

    0656: [0] 33 18 a6 0c 8c ba 02 ....... debug 

    # ejs.db.mapper/Record.es:787         private static function readRecords(key: String, options: Object): Object {

    0663: [0] 33 18 cc 0c f6 c0 02 ....... debug 

    # ejs.db.mapper/Record.es:806         static function remove(...ids): Void {

    0670: [0] 33 18 da 0c a8 c5 02 ....... debug 

    # ejs.db.mapper/Record.es:813         private function runFilters(filters): Void {

    0677: [0] 33 18 a0 0d 98 ca 02 ....... debug 

    # ejs.db.mapper/Record.es:848         function save(): Boolean {

    0684: [0] 33 18 90 0e 94 dd 02 ....... debug 

    # ejs.db.mapper/Record.es:904         function saveUpdate(fields: Object): Boolean {

    0691: [0] 33 18 aa 0e d4 e0 02 ....... debug 

    # ejs.db.mapper/Record.es:917         static function setDb(database: Database) {

    0698: [0] 33 18 b8 0e 90 e2 02 ....... debug 

    # ejs.db.mapper/Record.es:924         static function setKeyName(name: String): Void {

    0705: [0] 33 18 c8 0e d0 e3 02 ....... debug 

    # ejs.db.mapper/Record.es:932         static function setTableName(name: String): Void {

    0712: [0] 33 18 e6 0e f4 e6 02 ....... debug 

    # ejs.db.mapper/Record.es:947         static function sql(cmd: String, count: Number? = null): Array {

    0719: [0] 33 18 f8 0e ca e9 02 ....... debug 

    # ejs.db.mapper/Record.es:956         static function trace(on: Boolean): void

    0726: [0] 33 18 80 0f ee ea 02 ....... debug 

    # ejs.db.mapper/Record.es:960         static function validateFormat(fields: Object, options = null) {

    0733: [0] 33 18 90 0f b2 ee 02 ....... debug 

    # ejs.db.mapper/Record.es:968         static function validateNumber(fields: Object, options = null) {

    0740: [0] 33 18 a0 0f e2 f0 02 ....... debug 

    # ejs.db.mapper/Record.es:976         static function validatePresence(fields: Object, options = null) {

    0747: [0] 33 18 b6 0f 9c f3 02 ....... debug 

    # ejs.db.mapper/Record.es:987         function validateRecord(): Boolean {

    0754: [0] 33 18 f4 0f a6 82 03 ....... debug 

    # ejs.db.mapper/Record.es:1018         static function validateUnique(fields: Object, option = null)

    0761: [0] 33 18 84 10 de 84 03 ....... debug 

    # ejs.db.mapper/Record.es:1026         static function wrapFilter(fn, options: Object? = null): Void {

    0768: [0] 33 18 92 10 a2 87 03 ....... debug 

    # ejs.db.mapper/Record.es:1033         static function get columnNames(): Array {

    0775: [0] 33 18 9a 10 e8 88 03 ....... debug 

    # ejs.db.mapper/Record.es:1037         static function get columnTitles(): Array {

    0782: [0] 33 18 a2 10 b4 8a 03 ....... debug 

    # ejs.db.mapper/Record.es:1041         static function get db(): Datbase {

    0789: [0] 33 18 aa 10 c2 8b 03 ....... debug 

    # ejs.db.mapper/Record.es:1045         static function get keyName(): String {

    0796: [0] 33 18 b2 10 f2 8c 03 ....... debug 

    # ejs.db.mapper/Record.es:1049         static function get numRows(): String {

    0803: [0] 33 18 ba 10 92 8e 03 ....... debug 

    # ejs.db.mapper/Record.es:1053         static function get tableName(): String {

    0810: [0] 33 18 c2 10 ce 8f 03 ....... debug 

    # ejs.db.mapper/Record.es:1057         function constructorOLD(fields: Object? = null): Void {

    0817: [0] be ......................... return 
    
VARIABLE:   [Record-28]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _assocName : String
VARIABLE:   [Record-29]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _belongsTo : Array
VARIABLE:   [Record-30]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _className : String
VARIABLE:   [Record-31]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _columns : Object
VARIABLE:   [Record-32]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _hasOne : Array
VARIABLE:   [Record-33]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _hasMany : Array
VARIABLE:   [Record-34]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _db : Database
VARIABLE:   [Record-35]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _foreignId : String
VARIABLE:   [Record-36]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _keyName : String
VARIABLE:   [Record-37]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _model : Type
VARIABLE:   [Record-38]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _tableName : String
VARIABLE:   [Record-39]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _trace : Boolean
VARIABLE:   [Record-40]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _validations : Array
VARIABLE:   [Record-41]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _beforeFilters : Array
VARIABLE:   [Record-42]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _afterFilters : Array
VARIABLE:   [Record-43]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var _wrapFilters : Array
VARIABLE:   [Record-44]  internal-fa62c6843d5c582731f196f8cecaee45-5 static var ErrorMessages

FUNCTION:   [Record-45]  public const function initialize(fields: Object) : Void

     ARG:   [arg-00]   private fields : Object
   LOCAL:   [local-01] var field

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 94 ......................... putLocalSlot0 
    0010: [0] 33 18 c2 01 98 34 .......... debug 

    # ejs.db.mapper/Record.es:97             if (fields) for (let field in fields) {

    0016: [0] 5b ......................... getLocalSlot0 
    0017: [1] 13 22 ...................... branchFalse8 <addr: 53> 
    0019: [0] 5b ......................... getLocalSlot0 
    0020: [1] 18 10 00 ................... callObjSlot <slot: 8> <argc: 0> 
    0023: [0] 93 ......................... pushResult 
    0024: [1] 39 ......................... dup 
    0025: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0028: [1] 93 ......................... pushResult 
    0029: [2] 95 ......................... putLocalSlot1 
    0030: [1] 33 18 c4 01 a2 35 .......... debug 

    # ejs.db.mapper/Record.es:98                 this."public"::[field] = fields[field]

    0036: [1] 5b ......................... getLocalSlot0 
    0037: [2] 56 80 2e ................... loadString <> 
    0040: [3] 5c ......................... getLocalSlot1 
    0041: [4] 7c ......................... getObjNameExpr 
    0042: [2] 57 ......................... loadThis 
    0043: [3] 56 d6 02 ................... loadString <public> 
    0046: [4] 5c ......................... getLocalSlot1 
    0047: [5] b2 ......................... putObjNameExpr 
    0048: [1] 3e e6 ...................... goto8 <addr: 24> 
    0050: [1] 90 ......................... pop 
    0051: [0] 3e 00 ...................... goto8 <addr: 53> 
    0053: [0] be ......................... return 
    0054: [0] 33 18 c8 01 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:100         }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     25      28         50           50       StopIteration

VARIABLE:   [fields-00]  private var fields : Object
VARIABLE:   [field-01]  -hoisted-1 var field

FUNCTION:   [Record-46]  public const static function afterFilter(fn, options: Object) : Void

     ARG:   [arg-00]   private fn
     ARG:   [arg-01]   private options : Object

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 95 ......................... putLocalSlot1 
    0010: [0] 33 18 d8 01 f0 37 .......... debug 

    # ejs.db.mapper/Record.es:108             _afterFilters ||= []

    0016: [0] 83 54 02 ................... getThisTypeSlot <slot: 42> <1> 
    0019: [1] 39 ......................... dup 
    0020: [2] 14 04 ...................... branchTrue8 <addr: 26> 
    0022: [1] 90 ......................... pop 
    0023: [0] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0025: [1] 89 ......................... new 
    0026: [1] bc 54 02 ................... putThisTypeSlot <slot: 42> <1> 
    0029: [0] 33 18 da 01 b2 38 .......... debug 

    # ejs.db.mapper/Record.es:109             _afterFilters.append([fn, options])

    0035: [0] 83 54 02 ................... getThisTypeSlot <slot: 42> <1> 
    0038: [1] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0040: [2] 89 ......................... new 
    0041: [2] 39 ......................... dup 
    0042: [3] 5b ......................... getLocalSlot0 
    0043: [4] c5 ......................... swap 
    0044: [4] 56 80 2e ................... loadString <> 
    0047: [5] 44 ......................... load0 
    0048: [6] b2 ......................... putObjNameExpr 
    0049: [2] 39 ......................... dup 
    0050: [3] 5c ......................... getLocalSlot1 
    0051: [4] c5 ......................... swap 
    0052: [4] 56 80 2e ................... loadString <> 
    0055: [5] 45 ......................... load1 
    0056: [6] b2 ......................... putObjNameExpr 
    0057: [2] 18 36 02 ................... callObjSlot <slot: 27> <argc: 1> 
    0060: [0] be ......................... return 
    0061: [0] 33 18 dc 01 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:110         }
    
VARIABLE:   [fn-00]  private var fn
VARIABLE:   [options-01]  private var options : Object

FUNCTION:   [Record-47]  public const static function beforeFilter(fn, options: Object) : Void

     ARG:   [arg-00]   private fn
     ARG:   [arg-01]   private options : Object

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 95 ......................... putLocalSlot1 
    0010: [0] 33 18 ec 01 d4 3a .......... debug 

    # ejs.db.mapper/Record.es:118             _beforeFilters ||= []

    0016: [0] 83 52 02 ................... getThisTypeSlot <slot: 41> <1> 
    0019: [1] 39 ......................... dup 
    0020: [2] 14 04 ...................... branchTrue8 <addr: 26> 
    0022: [1] 90 ......................... pop 
    0023: [0] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0025: [1] 89 ......................... new 
    0026: [1] bc 52 02 ................... putThisTypeSlot <slot: 41> <1> 
    0029: [0] 33 18 ee 01 98 3b .......... debug 

    # ejs.db.mapper/Record.es:119             _beforeFilters.append([fn, options])

    0035: [0] 83 52 02 ................... getThisTypeSlot <slot: 41> <1> 
    0038: [1] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0040: [2] 89 ......................... new 
    0041: [2] 39 ......................... dup 
    0042: [3] 5b ......................... getLocalSlot0 
    0043: [4] c5 ......................... swap 
    0044: [4] 56 80 2e ................... loadString <> 
    0047: [5] 44 ......................... load0 
    0048: [6] b2 ......................... putObjNameExpr 
    0049: [2] 39 ......................... dup 
    0050: [3] 5c ......................... getLocalSlot1 
    0051: [4] c5 ......................... swap 
    0052: [4] 56 80 2e ................... loadString <> 
    0055: [5] 45 ......................... load1 
    0056: [6] b2 ......................... putObjNameExpr 
    0057: [2] 18 36 02 ................... callObjSlot <slot: 27> <argc: 1> 
    0060: [0] be ......................... return 
    0061: [0] 33 18 f0 01 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:120         }
    
VARIABLE:   [fn-00]  private var fn
VARIABLE:   [options-01]  private var options : Object

FUNCTION:   [Record-48]  public const static function belongsTo(owner, options: Object) : Void

     ARG:   [arg-00]   private owner
     ARG:   [arg-01]   private options : Object

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 95 ......................... putLocalSlot1 
    0010: [0] 33 18 88 02 a8 3d .......... debug 

    # ejs.db.mapper/Record.es:132             _belongsTo ||= []

    0016: [0] 83 3a 02 ................... getThisTypeSlot <slot: 29> <1> 
    0019: [1] 39 ......................... dup 
    0020: [2] 14 04 ...................... branchTrue8 <addr: 26> 
    0022: [1] 90 ......................... pop 
    0023: [0] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0025: [1] 89 ......................... new 
    0026: [1] bc 3a 02 ................... putThisTypeSlot <slot: 29> <1> 
    0029: [0] 33 18 8a 02 e4 3d .......... debug 

    # ejs.db.mapper/Record.es:133             _belongsTo.append(owner)

    0035: [0] 83 3a 02 ................... getThisTypeSlot <slot: 29> <1> 
    0038: [1] 5b ......................... getLocalSlot0 
    0039: [2] 18 36 02 ................... callObjSlot <slot: 27> <argc: 1> 
    0042: [0] be ......................... return 
    0043: [0] 33 18 8c 02 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:134         }
    
VARIABLE:   [owner-00]  private var owner
VARIABLE:   [options-01]  private var options : Object

FUNCTION:   [Record-49]  [Record,private] const static function cachedRead(rec: Record, field: String, model, key: String, options: Object) : Object

     ARG:   [arg-00]   private rec : Record
     ARG:   [arg-01]   private field : String
     ARG:   [arg-02]   private model
     ARG:   [arg-03]   private key : String
     ARG:   [arg-04]   private options : Object

    0000: [0] 33 18 9a 02 ba 40 .......... debug 

    # ejs.db.mapper/Record.es:141             rec._cacheAssoc ||= {}

    0006: [0] 5b ......................... getLocalSlot0 
    0007: [1] 7b ac 1e 4c ................ getObjName <_cacheAssoc> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0011: [1] 39 ......................... dup 
    0012: [2] 14 05 ...................... branchTrue8 <addr: 19> 
    0014: [1] 90 ......................... pop 
    0015: [0] 8a e4 06 00 ................ newObject <type: 0x1b2,  ejs::Object> <argc: 0> <att: >
    0019: [1] 5b ......................... getLocalSlot0 
    0020: [2] b3 ac 1e 4c ................ putObjName <_cacheAssoc> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0024: [0] 33 18 9c 02 80 41 .......... debug 

    # ejs.db.mapper/Record.es:142             if (rec._cacheAssoc[field] == null) {

    0030: [0] 5b ......................... getLocalSlot0 
    0031: [1] 7b ac 1e 4c ................ getObjName <_cacheAssoc> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0035: [1] 56 80 2e ................... loadString <> 
    0038: [2] 5c ......................... getLocalSlot1 
    0039: [3] 7c ......................... getObjNameExpr 
    0040: [1] 50 ......................... loadGlobal 
    0041: [2] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0045: [2] 25 ......................... compareEq 
    0046: [1] 13 1b ...................... branchFalse8 <addr: 75> 
    0048: [0] 33 18 9e 02 e4 41 .......... debug 

    # ejs.db.mapper/Record.es:143                 rec._cacheAssoc[field] =  model.readRecords(key, options); 

    0054: [0] 5d ......................... getLocalSlot2 
    0055: [1] 5e ......................... getLocalSlot3 
    0056: [2] 5f ......................... getLocalSlot4 
    0057: [3] 1e fc 42 00 04 ............. callObjName <readRecords> <> <argc: 2> 
    0062: [0] 93 ......................... pushResult 
    0063: [1] 5b ......................... getLocalSlot0 
    0064: [2] 7b ac 1e 4c ................ getObjName <_cacheAssoc> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0068: [2] 56 80 2e ................... loadString <> 
    0071: [3] 5c ......................... getLocalSlot1 
    0072: [4] b2 ......................... putObjNameExpr 
    0073: [0] 3e 00 ...................... goto8 <addr: 75> 
    0075: [0] 33 18 a2 02 94 43 .......... debug 

    # ejs.db.mapper/Record.es:145             return rec._cacheAssoc[field]

    0081: [0] 5b ......................... getLocalSlot0 
    0082: [1] 7b ac 1e 4c ................ getObjName <_cacheAssoc> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0086: [1] 56 80 2e ................... loadString <> 
    0089: [2] 5c ......................... getLocalSlot1 
    0090: [3] 7c ......................... getObjNameExpr 
    0091: [1] bf ......................... returnValue 
    
VARIABLE:   [rec-00]  private var rec : Record
VARIABLE:   [field-01]  private var field : String
VARIABLE:   [model-02]  private var model
VARIABLE:   [key-03]  private var key : String
VARIABLE:   [options-04]  private var options : Object

FUNCTION:   [Record-50]  [Record,private] const static function checkFormat(thisObj: Record, field: String, value, options: Object) : Void

     ARG:   [arg-00]   private thisObj : Record
     ARG:   [arg-01]   private field : String
     ARG:   [arg-02]   private value
     ARG:   [arg-03]   private options : Object

    0000: [0] 33 18 aa 02 94 46 .......... debug 

    # ejs.db.mapper/Record.es:149             if (! RegExp(options.format).test(value)) {

    0006: [0] 5e ......................... getLocalSlot3 
    0007: [1] 7b 84 47 80 2e ............. getObjName <format> <> 
    0012: [1] 17 e2 01 02 ................ callGlobalSlot <slot: 113> <argc: 1> 
    0016: [0] 93 ......................... pushResult 
    0017: [1] 5d ......................... getLocalSlot2 
    0018: [2] 18 4c 02 ................... callObjSlot <slot: 38> <argc: 1> 
    0021: [0] 93 ......................... pushResult 
    0022: [1] 86 ......................... logicalNot 
    0023: [1] 13 29 ...................... branchFalse8 <addr: 66> 
    0025: [0] 33 18 ac 02 92 47 .......... debug 

    # ejs.db.mapper/Record.es:150                 thisObj._errors[field] = options.message ? options.message : ErrorMessages.wrongFormat

    0031: [0] 5e ......................... getLocalSlot3 
    0032: [1] 7b e0 48 80 2e ............. getObjName <message> <> 
    0037: [1] 13 08 ...................... branchFalse8 <addr: 47> 
    0039: [0] 5e ......................... getLocalSlot3 
    0040: [1] 7b e0 48 80 2e ............. getObjName <message> <> 
    0045: [1] 3e 07 ...................... goto8 <addr: 54> 
    0047: [1] 83 58 02 ................... getThisTypeSlot <slot: 44> <1> 
    0050: [2] 7b e8 2b 00 ................ getObjName <wrongFormat> <> 
    0054: [2] 5b ......................... getLocalSlot0 
    0055: [3] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0059: [3] 56 80 2e ................... loadString <> 
    0062: [4] 5c ......................... getLocalSlot1 
    0063: [5] b2 ......................... putObjNameExpr 
    0064: [1] 3e 00 ...................... goto8 <addr: 66> 
    0066: [1] be ......................... return 
    0067: [0] 33 18 b0 02 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:152         }
    
VARIABLE:   [thisObj-00]  private var thisObj : Record
VARIABLE:   [field-01]  private var field : String
VARIABLE:   [value-02]  private var value
VARIABLE:   [options-03]  private var options : Object

FUNCTION:   [Record-51]  [Record,private] const static function checkNumber(thisObj: Record, field: String, value, options) : Void

     ARG:   [arg-00]   private thisObj : Record
     ARG:   [arg-01]   private field : String
     ARG:   [arg-02]   private value
     ARG:   [arg-03]   private options

    0000: [0] 33 18 b6 02 ec 4a .......... debug 

    # ejs.db.mapper/Record.es:155             if (! RegExp(/^[0-9]+$/).test(value)) {

    0006: [0] 55 d4 4b ................... loadRegexp </^[0-9]+$/> 
    0009: [1] 17 e2 01 02 ................ callGlobalSlot <slot: 113> <argc: 1> 
    0013: [0] 93 ......................... pushResult 
    0014: [1] 5d ......................... getLocalSlot2 
    0015: [2] 18 4c 02 ................... callObjSlot <slot: 38> <argc: 1> 
    0018: [0] 93 ......................... pushResult 
    0019: [1] 86 ......................... logicalNot 
    0020: [1] 13 27 ...................... branchFalse8 <addr: 61> 
    0022: [0] 33 18 b8 02 ea 4b .......... debug 

    # ejs.db.mapper/Record.es:156                 thisObj._errors[field] = options.message ? options.message : ErrorMessages.notNumber

    0028: [0] 5e ......................... getLocalSlot3 
    0029: [1] 7b e0 48 00 ................ getObjName <message> <> 
    0033: [1] 13 07 ...................... branchFalse8 <addr: 42> 
    0035: [0] 5e ......................... getLocalSlot3 
    0036: [1] 7b e0 48 00 ................ getObjName <message> <> 
    0040: [1] 3e 07 ...................... goto8 <addr: 49> 
    0042: [1] 83 58 02 ................... getThisTypeSlot <slot: 44> <1> 
    0045: [2] 7b 86 26 00 ................ getObjName <notNumber> <> 
    0049: [2] 5b ......................... getLocalSlot0 
    0050: [3] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0054: [3] 56 80 2e ................... loadString <> 
    0057: [4] 5c ......................... getLocalSlot1 
    0058: [5] b2 ......................... putObjNameExpr 
    0059: [1] 3e 00 ...................... goto8 <addr: 61> 
    0061: [1] be ......................... return 
    0062: [0] 33 18 bc 02 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:158         }
    
VARIABLE:   [thisObj-00]  private var thisObj : Record
VARIABLE:   [field-01]  private var field : String
VARIABLE:   [value-02]  private var value
VARIABLE:   [options-03]  private var options

FUNCTION:   [Record-52]  [Record,private] const static function checkPresent(thisObj: Record, field: String, value, options) : Void

     ARG:   [arg-00]   private thisObj : Record
     ARG:   [arg-01]   private field : String
     ARG:   [arg-02]   private value
     ARG:   [arg-03]   private options

    0000: [0] 33 18 c2 02 96 4f .......... debug 

    # ejs.db.mapper/Record.es:161             if (value == undefined) {

    0006: [0] 5d ......................... getLocalSlot2 
    0007: [1] 50 ......................... loadGlobal 
    0008: [2] 7b e2 4f 02 ................ getObjName <undefined> <ejs> 
    0012: [2] 25 ......................... compareEq 
    0013: [1] 13 27 ...................... branchFalse8 <addr: 54> 
    0015: [0] 33 18 c4 02 f6 4f .......... debug 

    # ejs.db.mapper/Record.es:162                 thisObj._errors[field] = options.message ? options.message : ErrorMessages.missing

    0021: [0] 5e ......................... getLocalSlot3 
    0022: [1] 7b e0 48 00 ................ getObjName <message> <> 
    0026: [1] 13 07 ...................... branchFalse8 <addr: 35> 
    0028: [0] 5e ......................... getLocalSlot3 
    0029: [1] 7b e0 48 00 ................ getObjName <message> <> 
    0033: [1] 3e 07 ...................... goto8 <addr: 42> 
    0035: [1] 83 58 02 ................... getThisTypeSlot <slot: 44> <1> 
    0038: [2] 7b 8c 25 00 ................ getObjName <missing> <> 
    0042: [2] 5b ......................... getLocalSlot0 
    0043: [3] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0047: [3] 56 80 2e ................... loadString <> 
    0050: [4] 5c ......................... getLocalSlot1 
    0051: [5] b2 ......................... putObjNameExpr 
    0052: [1] 3e 4b ...................... goto8 <addr: 129> 
    0054: [1] 33 18 c6 02 bc 51 .......... debug 

    # ejs.db.mapper/Record.es:163             } else if (value.length == 0 || value.trim() == "" && thisObj._errors[field] == undefined) {

    0060: [1] 5d ......................... getLocalSlot2 
    0061: [2] 7b 8e 53 00 ................ getObjName <length> <> 
    0065: [2] 44 ......................... load0 
    0066: [3] 25 ......................... compareEq 
    0067: [2] 39 ......................... dup 
    0068: [3] 14 20 ...................... branchTrue8 <addr: 102> 
    0070: [2] 90 ......................... pop 
    0071: [1] 5d ......................... getLocalSlot2 
    0072: [2] 1e 9c 53 00 00 ............. callObjName <trim> <> <argc: 0> 
    0077: [1] 93 ......................... pushResult 
    0078: [2] 56 80 2e ................... loadString <> 
    0081: [3] 25 ......................... compareEq 
    0082: [2] 39 ......................... dup 
    0083: [3] 13 11 ...................... branchFalse8 <addr: 102> 
    0085: [2] 90 ......................... pop 
    0086: [1] 5b ......................... getLocalSlot0 
    0087: [2] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0091: [2] 56 80 2e ................... loadString <> 
    0094: [3] 5c ......................... getLocalSlot1 
    0095: [4] 7c ......................... getObjNameExpr 
    0096: [2] 50 ......................... loadGlobal 
    0097: [3] 7b e2 4f 02 ................ getObjName <undefined> <ejs> 
    0101: [3] 25 ......................... compareEq 
    0102: [2] 13 19 ...................... branchFalse8 <addr: 129> 
    0104: [1] 33 18 c8 02 a6 53 .......... debug 

    # ejs.db.mapper/Record.es:164                 thisObj._errors[field] = ErrorMessages.blank

    0110: [1] 83 58 02 ................... getThisTypeSlot <slot: 44> <1> 
    0113: [2] 7b fc 20 00 ................ getObjName <blank> <> 
    0117: [2] 5b ......................... getLocalSlot0 
    0118: [3] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0122: [3] 56 80 2e ................... loadString <> 
    0125: [4] 5c ......................... getLocalSlot1 
    0126: [5] b2 ......................... putObjNameExpr 
    0127: [1] 3e 00 ...................... goto8 <addr: 129> 
    0129: [1] be ......................... return 
    0130: [0] 33 18 cc 02 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:166         }
    
VARIABLE:   [thisObj-00]  private var thisObj : Record
VARIABLE:   [field-01]  private var field : String
VARIABLE:   [value-02]  private var value
VARIABLE:   [options-03]  private var options

FUNCTION:   [Record-53]  [Record,private] const static function checkUnique(thisObj: Record, field: String, value, options) : Void

     ARG:   [arg-00]   private thisObj : Record
     ARG:   [arg-01]   private field : String
     ARG:   [arg-02]   private value
     ARG:   [arg-03]   private options
   LOCAL:   [local-04] var grid : Array

    0000: [0] 33 18 d2 02 8c 56 .......... debug 

    # ejs.db.mapper/Record.es:169             let grid: Array

    0006: [0] 33 18 d4 02 c4 56 .......... debug 

    # ejs.db.mapper/Record.es:170             if (thisObj._keyValue) {

    0012: [0] 5b ......................... getLocalSlot0 
    0013: [1] 7b dc 1b 4c ................ getObjName <_keyValue> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0017: [1] 13 1f ...................... branchFalse8 <addr: 50> 
    0019: [0] 33 18 d6 02 8e 57 .......... debug 

    # ejs.db.mapper/Record.es:171                 grid = findWhere(field + ' = "' + value + '" AND id <> ' + thisObj._keyValue)

    0025: [0] 5c ......................... getLocalSlot1 
    0026: [1] 56 ca 58 ................... loadString < = "> 
    0029: [2] 00 ......................... add 
    0030: [1] 5d ......................... getLocalSlot2 
    0031: [2] 00 ......................... add 
    0032: [1] 56 d4 58 ................... loadString <" AND id <> > 
    0035: [2] 00 ......................... add 
    0036: [1] 5b ......................... getLocalSlot0 
    0037: [2] 7b dc 1b 4c ................ getObjName <_keyValue> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0041: [2] 00 ......................... add 
    0042: [1] 1d 7a 00 02 ................ callThisStaticSlot <slot: 61> <0> <argc: 1> 
    0046: [0] 93 ......................... pushResult 
    0047: [1] 98 ......................... putLocalSlot4 
    0048: [0] 3e 1d ...................... goto8 <addr: 79> 
    0050: [0] 33 18 d8 02 ee 58 .......... debug 

    # ejs.db.mapper/Record.es:172             } else {

    0056: [0] 33 18 da 02 98 59 .......... debug 

    # ejs.db.mapper/Record.es:173                 grid = findWhere(field + ' = "' + value + '"')

    0062: [0] 5c ......................... getLocalSlot1 
    0063: [1] 56 ca 58 ................... loadString < = "> 
    0066: [2] 00 ......................... add 
    0067: [1] 5d ......................... getLocalSlot2 
    0068: [2] 00 ......................... add 
    0069: [1] 56 96 5a ................... loadString <"> 
    0072: [2] 00 ......................... add 
    0073: [1] 1d 7a 00 02 ................ callThisStaticSlot <slot: 61> <0> <argc: 1> 
    0077: [0] 93 ......................... pushResult 
    0078: [1] 98 ......................... putLocalSlot4 
    0079: [0] 33 18 de 02 9a 5a .......... debug 

    # ejs.db.mapper/Record.es:175             if (grid.length > 0) {

    0085: [0] 5f ......................... getLocalSlot4 
    0086: [1] 7b 8e 53 d6 02 ............. getObjName <length> <public> 
    0091: [1] 44 ......................... load0 
    0092: [2] 29 ......................... compareGt 
    0093: [1] 13 27 ...................... branchFalse8 <addr: 134> 
    0095: [0] 33 18 e0 02 e0 5a .......... debug 

    # ejs.db.mapper/Record.es:176                 thisObj._errors[field] = options.message ? options.message : ErrorMessages.notUnique

    0101: [0] 5e ......................... getLocalSlot3 
    0102: [1] 7b e0 48 00 ................ getObjName <message> <> 
    0106: [1] 13 07 ...................... branchFalse8 <addr: 115> 
    0108: [0] 5e ......................... getLocalSlot3 
    0109: [1] 7b e0 48 00 ................ getObjName <message> <> 
    0113: [1] 3e 07 ...................... goto8 <addr: 122> 
    0115: [1] 83 58 02 ................... getThisTypeSlot <slot: 44> <1> 
    0118: [2] 7b 8a 27 00 ................ getObjName <notUnique> <> 
    0122: [2] 5b ......................... getLocalSlot0 
    0123: [3] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0127: [3] 56 80 2e ................... loadString <> 
    0130: [4] 5c ......................... getLocalSlot1 
    0131: [5] b2 ......................... putObjNameExpr 
    0132: [1] 3e 00 ...................... goto8 <addr: 134> 
    0134: [1] be ......................... return 
    0135: [0] 33 18 e4 02 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:178         }
    
VARIABLE:   [thisObj-00]  private var thisObj : Record
VARIABLE:   [field-01]  private var field : String
VARIABLE:   [value-02]  private var value
VARIABLE:   [options-03]  private var options
VARIABLE:   [grid-04]  private var grid : Array

FUNCTION:   [Record-54]  [Record,private] const function coerceToEjsTypes() : Void

   LOCAL:   [local-00] var field : String
   LOCAL:   [local-01] var col
   LOCAL:   [local-02] var value : String

    0000: [0] 33 18 f0 02 aa 5d .......... debug 

    # ejs.db.mapper/Record.es:184             for (let field: String in this) {

    0006: [0] 57 ......................... loadThis 
    0007: [1] 1e 9c 5e cc 36 00 .......... callObjName <get> <iterator> <argc: 0> 
    0013: [0] 93 ......................... pushResult 
    0014: [1] 39 ......................... dup 
    0015: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0018: [1] 93 ......................... pushResult 
    0019: [2] 94 ......................... putLocalSlot0 
    0020: [1] 33 18 f2 02 ac 5e .......... debug 

    # ejs.db.mapper/Record.es:185                 let col: Column = _columns[field]

    0026: [1] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0029: [2] 56 80 2e ................... loadString <> 
    0032: [3] 5b ......................... getLocalSlot0 
    0033: [4] 7c ......................... getObjNameExpr 
    0034: [2] 95 ......................... putLocalSlot1 
    0035: [1] 33 18 f4 02 90 5f .......... debug 

    # ejs.db.mapper/Record.es:186                 if (col == undefined) {

    0041: [1] 5c ......................... getLocalSlot1 
    0042: [2] 50 ......................... loadGlobal 
    0043: [3] 7b e2 4f 02 ................ getObjName <undefined> <ejs> 
    0047: [3] 25 ......................... compareEq 
    0048: [2] 13 0d ...................... branchFalse8 <addr: 63> 
    0050: [1] 33 18 f6 02 e0 5f .......... debug 

    # ejs.db.mapper/Record.es:187                     continue

    0056: [1] 3d 5f f7 f7 f7 ............. goto <addr: 14> 
    0061: [1] 3e 00 ...................... goto8 <addr: 63> 
    0063: [1] 33 18 fa 02 9a 60 .......... debug 

    # ejs.db.mapper/Record.es:189                 if (col.ejsType == Reflect(this[field]).type) {

    0069: [1] 5c ......................... getLocalSlot1 
    0070: [2] 7b 9a 61 d6 02 ............. getObjName <ejsType> <public> 
    0075: [2] 57 ......................... loadThis 
    0076: [3] 56 80 2e ................... loadString <> 
    0079: [4] 5b ......................... getLocalSlot0 
    0080: [5] 7c ......................... getObjNameExpr 
    0081: [3] 17 de 01 02 ................ callGlobalSlot <slot: 111> <argc: 1> 
    0085: [2] 93 ......................... pushResult 
    0086: [3] 7b aa 61 d6 02 ............. getObjName <type> <public> 
    0091: [3] 25 ......................... compareEq 
    0092: [2] 13 0d ...................... branchFalse8 <addr: 107> 
    0094: [1] 33 18 fc 02 e0 5f .......... debug 

    # ejs.db.mapper/Record.es:190                     continue

    0100: [1] 3d b7 01 f7 f7 ............. goto <addr: 14> 
    0105: [1] 3e 00 ...................... goto8 <addr: 107> 
    0107: [1] 33 18 fe 02 b4 61 .......... debug 

    # ejs.db.mapper/Record.es:191                 }

    0113: [1] 33 18 80 03 d8 61 .......... debug 

    # ejs.db.mapper/Record.es:192                 let value: String = this[field]

    0119: [1] 57 ......................... loadThis 
    0120: [2] 56 80 2e ................... loadString <> 
    0123: [3] 5b ......................... getLocalSlot0 
    0124: [4] 7c ......................... getObjNameExpr 
    0125: [2] 96 ......................... putLocalSlot2 
    0126: [1] 33 18 82 03 b8 62 .......... debug 

    # ejs.db.mapper/Record.es:193                 switch (col.ejsType) {

    0132: [1] 5c ......................... getLocalSlot1 
    0133: [2] 7b 9a 61 d6 02 ............. getObjName <ejsType> <public> 
    0138: [2] 33 18 84 03 86 63 .......... debug 

    # ejs.db.mapper/Record.es:194                 case Boolean:

    0144: [2] 39 ......................... dup 
    0145: [3] 7e 10 ...................... getGlobalSlot <slot: 8> 
    0147: [4] 26 ......................... compareStrictlyEq 
    0148: [3] 07 a2 02 f7 f7 ............. branchFalse <addr: 298> 
    0153: [2] 33 18 86 03 c2 63 .......... debug 

    # ejs.db.mapper/Record.es:195                     if (value is String) {

    0159: [2] 5d ......................... getLocalSlot2 
    0160: [3] 7e e8 01 ................... getGlobalSlot <slot: 116> 
    0163: [4] 43 ......................... isA 
    0164: [3] 13 1d ...................... branchFalse8 <addr: 195> 
    0166: [2] 33 18 88 03 98 64 .......... debug 

    # ejs.db.mapper/Record.es:196                         this[field] = (value.trim().toLower() == "true")

    0172: [2] 5d ......................... getLocalSlot2 
    0173: [3] 18 7e 00 ................... callObjSlot <slot: 63> <argc: 0> 
    0176: [2] 93 ......................... pushResult 
    0177: [3] 1e aa 65 00 00 ............. callObjName <toLower> <> <argc: 0> 
    0182: [2] 93 ......................... pushResult 
    0183: [3] 56 ba 65 ................... loadString <true> 
    0186: [4] 25 ......................... compareEq 
    0187: [3] 57 ......................... loadThis 
    0188: [4] 56 80 2e ................... loadString <> 
    0191: [5] 5b ......................... getLocalSlot0 
    0192: [6] b2 ......................... putObjNameExpr 
    0193: [2] 3e 34 ...................... goto8 <addr: 247> 
    0195: [2] 33 18 8a 03 c4 65 .......... debug 

    # ejs.db.mapper/Record.es:197                     } else if (value is Number) {

    0201: [2] 5d ......................... getLocalSlot2 
    0202: [3] 7e d6 01 ................... getGlobalSlot <slot: 107> 
    0205: [4] 43 ......................... isA 
    0206: [3] 13 11 ...................... branchFalse8 <addr: 225> 
    0208: [2] 33 18 8c 03 a8 66 .......... debug 

    # ejs.db.mapper/Record.es:198                         this[field] = (value == 1)

    0214: [2] 5d ......................... getLocalSlot2 
    0215: [3] 45 ......................... load1 
    0216: [4] 25 ......................... compareEq 
    0217: [3] 57 ......................... loadThis 
    0218: [4] 56 80 2e ................... loadString <> 
    0221: [5] 5b ......................... getLocalSlot0 
    0222: [6] b2 ......................... putObjNameExpr 
    0223: [2] 3e 16 ...................... goto8 <addr: 247> 
    0225: [2] 33 18 8e 03 8e 67 .......... debug 

    # ejs.db.mapper/Record.es:199                     } else {

    0231: [2] 33 18 90 03 c8 67 .......... debug 

    # ejs.db.mapper/Record.es:200                         this[field] = value cast Boolean

    0237: [2] 5d ......................... getLocalSlot2 
    0238: [3] 7e 10 ...................... getGlobalSlot <slot: 8> 
    0240: [4] 22 ......................... cast 
    0241: [3] 57 ......................... loadThis 
    0242: [4] 56 80 2e ................... loadString <> 
    0245: [5] 5b ......................... getLocalSlot0 
    0246: [6] b2 ......................... putObjNameExpr 
    0247: [2] 33 18 92 03 ba 68 .......... debug 

    # ejs.db.mapper/Record.es:201                     }

    0253: [2] 33 18 94 03 e6 68 .......... debug 

    # ejs.db.mapper/Record.es:202                     this[field] = (this[field]) ? true : false

    0259: [2] 57 ......................... loadThis 
    0260: [3] 56 80 2e ................... loadString <> 
    0263: [4] 5b ......................... getLocalSlot0 
    0264: [5] 7c ......................... getObjNameExpr 
    0265: [3] 13 07 ...................... branchFalse8 <addr: 274> 
    0267: [2] 50 ......................... loadGlobal 
    0268: [3] 7b ba 65 02 ................ getObjName <true> <ejs> 
    0272: [3] 3e 05 ...................... goto8 <addr: 279> 
    0274: [3] 50 ......................... loadGlobal 
    0275: [4] 7b e4 69 02 ................ getObjName <false> <ejs> 
    0279: [4] 57 ......................... loadThis 
    0280: [5] 56 80 2e ................... loadString <> 
    0283: [6] 5b ......................... getLocalSlot0 
    0284: [7] b2 ......................... putObjNameExpr 
    0285: [3] 33 18 96 03 f0 69 .......... debug 

    # ejs.db.mapper/Record.es:203                     break

    0291: [3] 3d b6 01 f7 f7 ............. goto <addr: 387> 
    0296: [3] 3e 0c ...................... goto8 <addr: 310> 
    0298: [3] 33 18 9a 03 a4 6a .......... debug 

    # ejs.db.mapper/Record.es:205                 case Date:

    0304: [3] 39 ......................... dup 
    0305: [4] 7e 1e ...................... getGlobalSlot <slot: 15> 
    0307: [5] 26 ......................... compareStrictlyEq 
    0308: [4] 13 1f ...................... branchFalse8 <addr: 341> 
    0310: [3] 33 18 9c 03 da 6a .......... debug 

    # ejs.db.mapper/Record.es:206                     this[field] = new Date(value)

    0316: [3] 7e 1e ...................... getGlobalSlot <slot: 15> 
    0318: [4] 89 ......................... new 
    0319: [4] 5d ......................... getLocalSlot2 
    0320: [5] 20 02 ...................... callConstructor <argc: 1> 
    0322: [4] 57 ......................... loadThis 
    0323: [5] 56 80 2e ................... loadString <> 
    0326: [6] 5b ......................... getLocalSlot0 
    0327: [7] b2 ......................... putObjNameExpr 
    0328: [3] 33 18 9e 03 f0 69 .......... debug 

    # ejs.db.mapper/Record.es:207                     break

    0334: [3] 3d 60 f7 f7 f7 ............. goto <addr: 387> 
    0339: [3] 3e 0d ...................... goto8 <addr: 354> 
    0341: [3] 33 18 a2 03 be 6b .......... debug 

    # ejs.db.mapper/Record.es:209                 case Number:

    0347: [3] 39 ......................... dup 
    0348: [4] 7e d6 01 ................... getGlobalSlot <slot: 107> 
    0351: [5] 26 ......................... compareStrictlyEq 
    0352: [4] 13 21 ...................... branchFalse8 <addr: 387> 
    0354: [3] 33 18 a4 03 f8 6b .......... debug 

    # ejs.db.mapper/Record.es:210                     this[field] = this[field] cast Number

    0360: [3] 57 ......................... loadThis 
    0361: [4] 56 80 2e ................... loadString <> 
    0364: [5] 5b ......................... getLocalSlot0 
    0365: [6] 7c ......................... getObjNameExpr 
    0366: [4] 7e d6 01 ................... getGlobalSlot <slot: 107> 
    0369: [5] 22 ......................... cast 
    0370: [4] 57 ......................... loadThis 
    0371: [5] 56 80 2e ................... loadString <> 
    0374: [6] 5b ......................... getLocalSlot0 
    0375: [7] b2 ......................... putObjNameExpr 
    0376: [3] 33 18 a6 03 f0 69 .......... debug 

    # ejs.db.mapper/Record.es:211                     break

    0382: [3] 3d 00 f7 f7 f7 ............. goto <addr: 387> 
    0387: [3] 90 ......................... pop 
    0388: [2] 3d f7 05 f7 f7 ............. goto <addr: 14> 
    0393: [2] 90 ......................... pop 
    0394: [1] be ......................... return 
    0395: [0] 33 18 ac 03 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:214         }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     15      18        393          393       StopIteration

VARIABLE:   [field-00]  -hoisted-0 var field : String
VARIABLE:   [col-01]  -hoisted-0 var col : Column
VARIABLE:   [value-02]  -hoisted-0 var value : String

FUNCTION:   [Record-55]  [Record,private] const static function createAssociations(rec: Record, set: Array, preload, options) : Void

     ARG:   [arg-00]   private rec : Record
     ARG:   [arg-01]   private set : Array
     ARG:   [arg-02]   private preload
     ARG:   [arg-03]   private options
   LOCAL:   [local-04] var model
   LOCAL:   [local-05] var association
   LOCAL:   [local-06] var field : String
   LOCAL:   [local-07] var f : String
   LOCAL:   [local-08] var field : String
   LOCAL:   [local-09] var f : String

    0000: [0] 33 18 b8 03 e8 6e .......... debug 

    # ejs.db.mapper/Record.es:220             for each (let model in set) {

    0006: [0] 5c ......................... getLocalSlot1 
    0007: [1] 18 18 00 ................... callObjSlot <slot: 12> <argc: 0> 
    0010: [0] 93 ......................... pushResult 
    0011: [1] 39 ......................... dup 
    0012: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0015: [1] 93 ......................... pushResult 
    0016: [2] 98 ......................... putLocalSlot4 
    0017: [1] 33 18 ba 03 d2 6f .......... debug 

    # ejs.db.mapper/Record.es:221                 if (model is Array) model = model[0]

    0023: [1] 5f ......................... getLocalSlot4 
    0024: [2] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0026: [3] 43 ......................... isA 
    0027: [2] 13 09 ...................... branchFalse8 <addr: 38> 
    0029: [1] 5f ......................... getLocalSlot4 
    0030: [2] 56 80 2e ................... loadString <> 
    0033: [3] 44 ......................... load0 
    0034: [4] 7c ......................... getObjNameExpr 
    0035: [2] 98 ......................... putLocalSlot4 
    0036: [1] 3e 00 ...................... goto8 <addr: 38> 
    0038: [1] 33 18 c0 03 bc 70 .......... debug 

    # ejs.db.mapper/Record.es:224                 if (preload == true || (preload && preload.contains(model))) {

    0044: [1] 5d ......................... getLocalSlot2 
    0045: [2] 50 ......................... loadGlobal 
    0046: [3] 7b ba 65 02 ................ getObjName <true> <ejs> 
    0050: [3] 25 ......................... compareEq 
    0051: [2] 39 ......................... dup 
    0052: [3] 14 0e ...................... branchTrue8 <addr: 68> 
    0054: [2] 90 ......................... pop 
    0055: [1] 5d ......................... getLocalSlot2 
    0056: [2] 39 ......................... dup 
    0057: [3] 13 09 ...................... branchFalse8 <addr: 68> 
    0059: [2] 90 ......................... pop 
    0060: [1] 5d ......................... getLocalSlot2 
    0061: [2] 5f ......................... getLocalSlot4 
    0062: [3] 1e da 71 00 02 ............. callObjName <contains> <> <argc: 1> 
    0067: [1] 93 ......................... pushResult 
    0068: [2] 07 ac 02 f7 f7 ............. branchFalse <addr: 223> 
    0073: [1] 33 18 ca 03 9a 72 .......... debug 

    # ejs.db.mapper/Record.es:229                     let association = {}

    0079: [1] 8a e4 06 00 ................ newObject <type: 0x1b2,  ejs::Object> <argc: 0> <att: >
    0083: [2] 99 ......................... putLocalSlot5 
    0084: [1] 33 18 cc 03 ec 72 .......... debug 

    # ejs.db.mapper/Record.es:230                     if (!model._columns) model.getSchema()

    0090: [1] 5f ......................... getLocalSlot4 
    0091: [2] 7b e6 08 00 ................ getObjName <_columns> <> 
    0095: [2] 86 ......................... logicalNot 
    0096: [2] 13 08 ...................... branchFalse8 <addr: 106> 
    0098: [1] 5f ......................... getLocalSlot4 
    0099: [2] 1e e2 73 00 00 ............. callObjName <getSchema> <> <argc: 0> 
    0104: [1] 3e 00 ...................... goto8 <addr: 106> 
    0106: [1] 33 18 ce 03 f6 73 .......... debug 

    # ejs.db.mapper/Record.es:231                     for (let field: String in model._columns) {

    0112: [1] 5f ......................... getLocalSlot4 
    0113: [2] 7b e6 08 00 ................ getObjName <_columns> <> 
    0117: [2] 1e 9c 5e cc 36 00 .......... callObjName <get> <iterator> <argc: 0> 
    0123: [1] 93 ......................... pushResult 
    0124: [2] 39 ......................... dup 
    0125: [3] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0128: [2] 93 ......................... pushResult 
    0129: [3] 9a ......................... putLocalSlot6 
    0130: [2] 33 18 d0 03 90 75 .......... debug 

    # ejs.db.mapper/Record.es:232                         let f: String = "_" + model._className + field.toPascal()

    0136: [2] 56 b4 76 ................... loadString <_> 
    0139: [3] 5f ......................... getLocalSlot4 
    0140: [4] 7b 9e 07 00 ................ getObjName <_className> <> 
    0144: [4] 00 ......................... add 
    0145: [3] 61 ......................... getLocalSlot6 
    0146: [4] 18 60 00 ................... callObjSlot <slot: 48> <argc: 0> 
    0149: [3] 93 ......................... pushResult 
    0150: [4] 00 ......................... add 
    0151: [3] 9b ......................... putLocalSlot7 
    0152: [2] 33 18 d2 03 b8 76 .......... debug 

    # ejs.db.mapper/Record.es:233                         association[field] = rec[f]

    0158: [2] 5b ......................... getLocalSlot0 
    0159: [3] 56 80 2e ................... loadString <> 
    0162: [4] 62 ......................... getLocalSlot7 
    0163: [5] 7c ......................... getObjNameExpr 
    0164: [3] 60 ......................... getLocalSlot5 
    0165: [4] 56 80 2e ................... loadString <> 
    0168: [5] 61 ......................... getLocalSlot6 
    0169: [6] b2 ......................... putObjNameExpr 
    0170: [2] 33 18 d4 03 a0 77 .......... debug 

    # ejs.db.mapper/Record.es:234                         delete rec.public::[f]

    0176: [2] 5b ......................... getLocalSlot0 
    0177: [3] 79 d6 02 80 2e ............. getScopedName <public> <> 
    0182: [4] 62 ......................... getLocalSlot7 
    0183: [5] 36 ......................... deleteNameExpr 
    0184: [2] 3e c2 ...................... goto8 <addr: 124> 
    0186: [2] 90 ......................... pop 
    0187: [1] 33 18 d6 03 ba 68 .......... debug 

    # ejs.db.mapper/Record.es:235                     }

    0193: [1] 33 18 d8 03 fe 77 .......... debug 

    # ejs.db.mapper/Record.es:236                     rec[model._assocName] = model.createRecord(association, options)

    0199: [1] 5f ......................... getLocalSlot4 
    0200: [2] 60 ......................... getLocalSlot5 
    0201: [3] 5e ......................... getLocalSlot3 
    0202: [4] 1e a8 79 00 04 ............. callObjName <createRecord> <> <argc: 2> 
    0207: [1] 93 ......................... pushResult 
    0208: [2] 5b ......................... getLocalSlot0 
    0209: [3] 56 80 2e ................... loadString <> 
    0212: [4] 5f ......................... getLocalSlot4 
    0213: [5] 7b b0 04 00 ................ getObjName <_assocName> <> 
    0217: [5] b2 ......................... putObjNameExpr 
    0218: [1] 3d a4 02 f7 f7 ............. goto <addr: 369> 
    0223: [1] 33 18 dc 03 c2 79 .......... debug 

    # ejs.db.mapper/Record.es:238                 } else {

    0229: [1] 33 18 de 03 f4 79 .......... debug 

    # ejs.db.mapper/Record.es:239                     rec[model._assocName] = makeLazyReader(rec, model._assocName, model, rec[model._foreignId])

    0235: [1] 5b ......................... getLocalSlot0 
    0236: [2] 5f ......................... getLocalSlot4 
    0237: [3] 7b b0 04 00 ................ getObjName <_assocName> <> 
    0241: [3] 5f ......................... getLocalSlot4 
    0242: [4] 5b ......................... getLocalSlot0 
    0243: [5] 56 80 2e ................... loadString <> 
    0246: [6] 5f ......................... getLocalSlot4 
    0247: [7] 7b ee 0e 00 ................ getObjName <_foreignId> <> 
    0251: [7] 7c ......................... getObjNameExpr 
    0252: [5] 1d 98 01 00 08 ............. callThisStaticSlot <slot: 76> <0> <argc: 4> 
    0257: [1] 93 ......................... pushResult 
    0258: [2] 5b ......................... getLocalSlot0 
    0259: [3] 56 80 2e ................... loadString <> 
    0262: [4] 5f ......................... getLocalSlot4 
    0263: [5] 7b b0 04 00 ................ getObjName <_assocName> <> 
    0267: [5] b2 ......................... putObjNameExpr 
    0268: [1] 33 18 e0 03 ec 72 .......... debug 

    # ejs.db.mapper/Record.es:240                     if (!model._columns) model.getSchema()

    0274: [1] 5f ......................... getLocalSlot4 
    0275: [2] 7b e6 08 00 ................ getObjName <_columns> <> 
    0279: [2] 86 ......................... logicalNot 
    0280: [2] 13 08 ...................... branchFalse8 <addr: 290> 
    0282: [1] 5f ......................... getLocalSlot4 
    0283: [2] 1e e2 73 00 00 ............. callObjName <getSchema> <> <argc: 0> 
    0288: [1] 3e 00 ...................... goto8 <addr: 290> 
    0290: [1] 33 18 e2 03 d4 7b .......... debug 

    # ejs.db.mapper/Record.es:241                     for (let field: String  in model._columns) {

    0296: [1] 5f ......................... getLocalSlot4 
    0297: [2] 7b e6 08 00 ................ getObjName <_columns> <> 
    0301: [2] 1e 9c 5e cc 36 00 .......... callObjName <get> <iterator> <argc: 0> 
    0307: [1] 93 ......................... pushResult 
    0308: [2] 39 ......................... dup 
    0309: [3] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0312: [2] 93 ......................... pushResult 
    0313: [3] 9c ......................... putLocalSlot8 
    0314: [2] 33 18 e4 03 90 75 .......... debug 

    # ejs.db.mapper/Record.es:242                         let f: String = "_" + model._className + field.toPascal()

    0320: [2] 56 b4 76 ................... loadString <_> 
    0323: [3] 5f ......................... getLocalSlot4 
    0324: [4] 7b 9e 07 00 ................ getObjName <_className> <> 
    0328: [4] 00 ......................... add 
    0329: [3] 63 ......................... getLocalSlot8 
    0330: [4] 18 60 00 ................... callObjSlot <slot: 48> <argc: 0> 
    0333: [3] 93 ......................... pushResult 
    0334: [4] 00 ......................... add 
    0335: [3] 9d ......................... putLocalSlot9 
    0336: [2] 33 18 e6 03 ec 7c .......... debug 

    # ejs.db.mapper/Record.es:243                         if (rec[f]) {

    0342: [2] 5b ......................... getLocalSlot0 
    0343: [3] 56 80 2e ................... loadString <> 
    0346: [4] 64 ......................... getLocalSlot9 
    0347: [5] 7c ......................... getObjNameExpr 
    0348: [3] 13 10 ...................... branchFalse8 <addr: 366> 
    0350: [2] 33 18 e8 03 b8 7d .......... debug 

    # ejs.db.mapper/Record.es:244                             delete rec.public::[f]

    0356: [2] 5b ......................... getLocalSlot0 
    0357: [3] 79 d6 02 80 2e ............. getScopedName <public> <> 
    0362: [4] 64 ......................... getLocalSlot9 
    0363: [5] 36 ......................... deleteNameExpr 
    0364: [2] 3e 00 ...................... goto8 <addr: 366> 
    0366: [2] 3e c4 ...................... goto8 <addr: 308> 
    0368: [2] 90 ......................... pop 
    0369: [1] 3d d7 05 f7 f7 ............. goto <addr: 11> 
    0374: [1] 90 ......................... pop 
    0375: [0] be ......................... return 
    0376: [0] 33 18 f2 03 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:249         }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration    125     128        186          186       StopIteration
1   iteration    309     312        368          368       StopIteration
2   iteration     12      15        374          374       StopIteration

VARIABLE:   [rec-00]  private var rec : Record
VARIABLE:   [set-01]  private var set : Array
VARIABLE:   [preload-02]  private var preload
VARIABLE:   [options-03]  private var options
VARIABLE:   [model-04]  -hoisted-4 var model
VARIABLE:   [association-05]  -hoisted-5 var association
VARIABLE:   [field-06]  -hoisted-6 var field : String
VARIABLE:   [f-07]  -hoisted-6 var f : String
VARIABLE:   [field-08]  -hoisted-8 var field : String
VARIABLE:   [f-09]  -hoisted-8 var f : String

FUNCTION:   [Record-56]  [Record,private] const static function createRecord(data: Object, options: Object) : void

     ARG:   [arg-00]   private data : Object
     ARG:   [arg-01]   private options : Object
   LOCAL:   [local-02] var rec : Record
   LOCAL:   [local-03] var subOptions
   LOCAL:   [local-04] var model
   LOCAL:   [local-05] var model

    0000: [0] 41 02 02 07 ................ initDefaultArgs8 <2> <4> <9> 
    0004: [0] 8a e4 06 00 ................ newObject <type: 0x1b2,  ejs::Object> <argc: 0> <att: >
    0008: [1] 95 ......................... putLocalSlot1 
    0009: [0] 33 18 80 04 82 80 01 ....... debug 

    # ejs.db.mapper/Record.es:256             let rec: Record = new global[_className]

    0016: [0] 50 ......................... loadGlobal 
    0017: [1] 7b f2 2d 02 ................ getObjName <global> <ejs> 
    0021: [1] 56 80 2e ................... loadString <> 
    0024: [2] 83 3c 02 ................... getThisTypeSlot <slot: 30> <1> 
    0027: [3] 7c ......................... getObjNameExpr 
    0028: [1] 89 ......................... new 
    0029: [1] 20 00 ...................... callConstructor <argc: 0> 
    0031: [1] 96 ......................... putLocalSlot2 
    0032: [0] 33 18 82 04 ec 80 01 ....... debug 

    # ejs.db.mapper/Record.es:257             rec.initialize(data)

    0039: [0] 5d ......................... getLocalSlot2 
    0040: [1] 5b ......................... getLocalSlot0 
    0041: [2] 18 5a 02 ................... callObjSlot <slot: 45> <argc: 1> 
    0044: [0] 33 18 84 04 ae 81 01 ....... debug 

    # ejs.db.mapper/Record.es:258             rec._keyValue = data[_keyName]

    0051: [0] 5b ......................... getLocalSlot0 
    0052: [1] 56 80 2e ................... loadString <> 
    0055: [2] 83 48 02 ................... getThisTypeSlot <slot: 36> <1> 
    0058: [3] 7c ......................... getObjNameExpr 
    0059: [1] 5d ......................... getLocalSlot2 
    0060: [2] b3 dc 1b 4c ................ putObjName <_keyValue> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0064: [0] 33 18 88 04 84 82 01 ....... debug 

    # ejs.db.mapper/Record.es:260             let subOptions = {}

    0071: [0] 8a e4 06 00 ................ newObject <type: 0x1b2,  ejs::Object> <argc: 0> <att: >
    0075: [1] 97 ......................... putLocalSlot3 
    0076: [0] 33 18 8a 04 da 82 01 ....... debug 

    # ejs.db.mapper/Record.es:261             if (options.depth) {

    0083: [0] 5c ......................... getLocalSlot1 
    0084: [1] 7b 9c 83 01 80 2e .......... getObjName <depth> <> 
    0090: [1] 13 2d ...................... branchFalse8 <addr: 137> 
    0092: [0] 33 18 8c 04 a8 83 01 ....... debug 

    # ejs.db.mapper/Record.es:262                 subOptions.depth = options.depth

    0099: [0] 5c ......................... getLocalSlot1 
    0100: [1] 7b 9c 83 01 80 2e .......... getObjName <depth> <> 
    0106: [1] 5e ......................... getLocalSlot3 
    0107: [2] b3 9c 83 01 00 ............. putObjName <depth> <> 
    0112: [0] 33 18 8e 04 8a 84 01 ....... debug 

    # ejs.db.mapper/Record.es:263                 subOptions.depth--

    0119: [0] 5e ......................... getLocalSlot3 
    0120: [1] 7b 9c 83 01 00 ............. getObjName <depth> <> 
    0125: [1] 39 ......................... dup 
    0126: [2] 3f ff ...................... inc <255> 
    0128: [2] 5e ......................... getLocalSlot3 
    0129: [3] b3 9c 83 01 00 ............. putObjName <depth> <> 
    0134: [1] 90 ......................... pop 
    0135: [0] 3e 00 ...................... goto8 <addr: 137> 
    0137: [0] 33 18 94 04 d0 84 01 ....... debug 

    # ejs.db.mapper/Record.es:266             if (options.include) {

    0144: [0] 5c ......................... getLocalSlot1 
    0145: [1] 7b 96 85 01 80 2e .......... getObjName <include> <> 
    0151: [1] 13 1b ...................... branchFalse8 <addr: 180> 
    0153: [0] 33 18 96 04 a6 85 01 ....... debug 

    # ejs.db.mapper/Record.es:267                 createAssociations(rec, options.include, true, subOptions)

    0160: [0] 5d ......................... getLocalSlot2 
    0161: [1] 5c ......................... getLocalSlot1 
    0162: [2] 7b 96 85 01 80 2e .......... getObjName <include> <> 
    0168: [2] 50 ......................... loadGlobal 
    0169: [3] 7b ba 65 02 ................ getObjName <true> <ejs> 
    0173: [3] 5e ......................... getLocalSlot3 
    0174: [4] 1d 6e 00 08 ................ callThisStaticSlot <slot: 55> <0> <argc: 4> 
    0178: [0] 3e 00 ...................... goto8 <addr: 180> 
    0180: [0] 33 18 9a 04 bc 86 01 ....... debug 

    # ejs.db.mapper/Record.es:269             if (options.depth != 0) {

    0187: [0] 5c ......................... getLocalSlot1 
    0188: [1] 7b 9c 83 01 80 2e .......... getObjName <depth> <> 
    0194: [1] 44 ......................... load0 
    0195: [2] 2c ......................... compareNe 
    0196: [1] 07 c4 05 f7 f7 ............. branchFalse <addr: 555> 
    0201: [0] 33 18 9c 04 88 87 01 ....... debug 

    # ejs.db.mapper/Record.es:270                 if (_belongsTo) {

    0208: [0] 83 3a 02 ................... getThisTypeSlot <slot: 29> <1> 
    0211: [1] 13 18 ...................... branchFalse8 <addr: 237> 
    0213: [0] 33 18 9e 04 cc 87 01 ....... debug 

    # ejs.db.mapper/Record.es:271                     createAssociations(rec, _belongsTo, options.preload, subOptions)

    0220: [0] 5d ......................... getLocalSlot2 
    0221: [1] 83 3a 02 ................... getThisTypeSlot <slot: 29> <1> 
    0224: [2] 5c ......................... getLocalSlot1 
    0225: [3] 7b cc 7e 80 2e ............. getObjName <preload> <> 
    0230: [3] 5e ......................... getLocalSlot3 
    0231: [4] 1d 6e 00 08 ................ callThisStaticSlot <slot: 55> <0> <argc: 4> 
    0235: [0] 3e 00 ...................... goto8 <addr: 237> 
    0237: [0] 33 18 a2 04 f6 88 01 ....... debug 

    # ejs.db.mapper/Record.es:273                 if (_hasOne) {

    0244: [0] 83 40 02 ................... getThisTypeSlot <slot: 32> <1> 
    0247: [1] 07 a6 02 f7 f7 ............. branchFalse <addr: 399> 
    0252: [0] 33 18 a4 04 b4 89 01 ....... debug 

    # ejs.db.mapper/Record.es:274                     for each (model in _hasOne) {

    0259: [0] 83 40 02 ................... getThisTypeSlot <slot: 32> <1> 
    0262: [1] 18 18 00 ................... callObjSlot <slot: 12> <argc: 0> 
    0265: [0] 93 ......................... pushResult 
    0266: [1] 39 ......................... dup 
    0267: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0270: [1] 93 ......................... pushResult 
    0271: [2] 98 ......................... putLocalSlot4 
    0272: [1] 33 18 a6 04 98 8a 01 ....... debug 

    # ejs.db.mapper/Record.es:275                         if (!rec[model._assocName]) {

    0279: [1] 5d ......................... getLocalSlot2 
    0280: [2] 56 80 2e ................... loadString <> 
    0283: [3] 5f ......................... getLocalSlot4 
    0284: [4] 7b b0 04 00 ................ getObjName <_assocName> <> 
    0288: [4] 7c ......................... getObjNameExpr 
    0289: [2] 86 ......................... logicalNot 
    0290: [2] 13 63 ...................... branchFalse8 <addr: 391> 
    0292: [1] 33 18 a8 04 84 8b 01 ....... debug 

    # ejs.db.mapper/Record.es:276                             rec[model._assocName] = makeLazyReader(rec, model._assocName, model, null,

    0299: [1] 33 18 aa 04 84 8b 01 ....... debug 

    # ejs.db.mapper/Record.es:277                             rec[model._assocName] = makeLazyReader(rec, model._assocName, model, null,

    0306: [1] 33 18 a8 04 84 8b 01 ....... debug 

    # ejs.db.mapper/Record.es:276                             rec[model._assocName] = makeLazyReader(rec, model._assocName, model, null,

    0313: [1] 5d ......................... getLocalSlot2 
    0314: [2] 5f ......................... getLocalSlot4 
    0315: [3] 7b b0 04 00 ................ getObjName <_assocName> <> 
    0319: [3] 5f ......................... getLocalSlot4 
    0320: [4] 50 ......................... loadGlobal 
    0321: [5] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0325: [5] 33 18 aa 04 d2 8c 01 ....... debug 

    # ejs.db.mapper/Record.es:277                                 {conditions: rec._foreignId + " = " + data[_keyName] + " LIMIT 1"})

    0332: [5] 56 00 ...................... loadString <> 
    0334: [6] 56 9a 8e 01 ................ loadString <conditions> 
    0338: [7] 5d ......................... getLocalSlot2 
    0339: [8] 82 46 02 ................... getTypeSlot <slot: 35> <1> 
    0342: [8] 56 b0 8e 01 ................ loadString < = > 
    0346: [9] 00 ......................... add 
    0347: [8] 5b ......................... getLocalSlot0 
    0348: [9] 56 80 2e ................... loadString <> 
    0351: [10] 83 48 02 ................... getThisTypeSlot <slot: 36> <1> 
    0354: [11] 7c ......................... getObjNameExpr 
    0355: [9] 00 ......................... add 
    0356: [8] 56 b8 8e 01 ................ loadString < LIMIT 1> 
    0360: [9] 00 ......................... add 
    0361: [8] 8a e4 06 02 00 ............. newObject <type: 0x1b2,  ejs::Object> <argc: 1> <att: 1 >
    0366: [6] 1d 98 01 00 0a ............. callThisStaticSlot <slot: 76> <0> <argc: 5> 
    0371: [1] 93 ......................... pushResult 
    0372: [2] 33 18 a8 04 84 8b 01 ....... debug 

    # ejs.db.mapper/Record.es:276                             rec[model._assocName] = makeLazyReader(rec, model._assocName, model, null,

    0379: [2] 5d ......................... getLocalSlot2 
    0380: [3] 56 80 2e ................... loadString <> 
    0383: [4] 5f ......................... getLocalSlot4 
    0384: [5] 7b b0 04 00 ................ getObjName <_assocName> <> 
    0388: [5] b2 ......................... putObjNameExpr 
    0389: [1] 3e 00 ...................... goto8 <addr: 391> 
    0391: [1] 3d 85 02 f7 f7 ............. goto <addr: 266> 
    0396: [1] 90 ......................... pop 
    0397: [0] 3e 00 ...................... goto8 <addr: 399> 
    0399: [0] 33 18 b2 04 ca 8e 01 ....... debug 

    # ejs.db.mapper/Record.es:281                 if (_hasMany) {

    0406: [0] 83 42 02 ................... getThisTypeSlot <slot: 33> <1> 
    0409: [1] 07 96 02 f7 f7 ............. branchFalse <addr: 553> 
    0414: [0] 33 18 b4 04 8a 8f 01 ....... debug 

    # ejs.db.mapper/Record.es:282                     for each (model in _hasMany) {

    0421: [0] 83 42 02 ................... getThisTypeSlot <slot: 33> <1> 
    0424: [1] 18 18 00 ................... callObjSlot <slot: 12> <argc: 0> 
    0427: [0] 93 ......................... pushResult 
    0428: [1] 39 ......................... dup 
    0429: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0432: [1] 93 ......................... pushResult 
    0433: [2] 99 ......................... putLocalSlot5 
    0434: [1] 33 18 b6 04 98 8a 01 ....... debug 

    # ejs.db.mapper/Record.es:283                         if (!rec[model._assocName]) {

    0441: [1] 5d ......................... getLocalSlot2 
    0442: [2] 56 80 2e ................... loadString <> 
    0445: [3] 60 ......................... getLocalSlot5 
    0446: [4] 7b b0 04 00 ................ getObjName <_assocName> <> 
    0450: [4] 7c ......................... getObjNameExpr 
    0451: [2] 86 ......................... logicalNot 
    0452: [2] 13 5e ...................... branchFalse8 <addr: 548> 
    0454: [1] 33 18 b8 04 84 8b 01 ....... debug 

    # ejs.db.mapper/Record.es:284                             rec[model._assocName] = makeLazyReader(rec, model._assocName, model, null,

    0461: [1] 33 18 ba 04 84 8b 01 ....... debug 

    # ejs.db.mapper/Record.es:285                             rec[model._assocName] = makeLazyReader(rec, model._assocName, model, null,

    0468: [1] 33 18 b8 04 84 8b 01 ....... debug 

    # ejs.db.mapper/Record.es:284                             rec[model._assocName] = makeLazyReader(rec, model._assocName, model, null,

    0475: [1] 5d ......................... getLocalSlot2 
    0476: [2] 60 ......................... getLocalSlot5 
    0477: [3] 7b b0 04 00 ................ getObjName <_assocName> <> 
    0481: [3] 60 ......................... getLocalSlot5 
    0482: [4] 50 ......................... loadGlobal 
    0483: [5] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0487: [5] 33 18 ba 04 f0 8f 01 ....... debug 

    # ejs.db.mapper/Record.es:285                                 {conditions: rec._foreignId + " = " + data[_keyName]})

    0494: [5] 56 00 ...................... loadString <> 
    0496: [6] 56 9a 8e 01 ................ loadString <conditions> 
    0500: [7] 5d ......................... getLocalSlot2 
    0501: [8] 82 46 02 ................... getTypeSlot <slot: 35> <1> 
    0504: [8] 56 b0 8e 01 ................ loadString < = > 
    0508: [9] 00 ......................... add 
    0509: [8] 5b ......................... getLocalSlot0 
    0510: [9] 56 80 2e ................... loadString <> 
    0513: [10] 83 48 02 ................... getThisTypeSlot <slot: 36> <1> 
    0516: [11] 7c ......................... getObjNameExpr 
    0517: [9] 00 ......................... add 
    0518: [8] 8a e4 06 02 00 ............. newObject <type: 0x1b2,  ejs::Object> <argc: 1> <att: 1 >
    0523: [6] 1d 98 01 00 0a ............. callThisStaticSlot <slot: 76> <0> <argc: 5> 
    0528: [1] 93 ......................... pushResult 
    0529: [2] 33 18 b8 04 84 8b 01 ....... debug 

    # ejs.db.mapper/Record.es:284                             rec[model._assocName] = makeLazyReader(rec, model._assocName, model, null,

    0536: [2] 5d ......................... getLocalSlot2 
    0537: [3] 56 80 2e ................... loadString <> 
    0540: [4] 60 ......................... getLocalSlot5 
    0541: [5] 7b b0 04 00 ................ getObjName <_assocName> <> 
    0545: [5] b2 ......................... putObjNameExpr 
    0546: [1] 3e 00 ...................... goto8 <addr: 548> 
    0548: [1] 3e 86 ...................... goto8 <addr: 428> 
    0550: [1] 90 ......................... pop 
    0551: [0] 3e 00 ...................... goto8 <addr: 553> 
    0553: [0] 3e 00 ...................... goto8 <addr: 555> 
    0555: [0] 33 18 c2 04 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:289             }

    0562: [0] 33 18 c4 04 ba 91 01 ....... debug 

    # ejs.db.mapper/Record.es:290             rec.coerceToEjsTypes()

    0569: [0] 5d ......................... getLocalSlot2 
    0570: [1] 18 6c 00 ................... callObjSlot <slot: 54> <argc: 0> 
    0573: [0] 33 18 c6 04 80 92 01 ....... debug 

    # ejs.db.mapper/Record.es:291             return rec

    0580: [0] 5d ......................... getLocalSlot2 
    0581: [1] bf ......................... returnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration    267     270        396          396       StopIteration
1   iteration    429     432        550          550       StopIteration

VARIABLE:   [data-00]  private var data : Object
VARIABLE:   [options-01]  private var options : Object
VARIABLE:   [rec-02]  private var rec : Record
VARIABLE:   [subOptions-03]  private var subOptions
VARIABLE:   [model-04]  -hoisted-4 var model
VARIABLE:   [model-05]  -hoisted-5 var model

FUNCTION:   [Record-57]  public const function error(field: String, msg: String) : Void

     ARG:   [arg-00]   private field : String
     ARG:   [arg-01]   private msg : String

    0000: [0] 33 18 d8 04 ae 93 01 ....... debug 

    # ejs.db.mapper/Record.es:300             field ||= ""

    0007: [0] 5b ......................... getLocalSlot0 
    0008: [1] 39 ......................... dup 
    0009: [2] 14 04 ...................... branchTrue8 <addr: 15> 
    0011: [1] 90 ......................... pop 
    0012: [0] 56 80 2e ................... loadString <> 
    0015: [1] 94 ......................... putLocalSlot0 
    0016: [0] 33 18 da 04 e0 93 01 ....... debug 

    # ejs.db.mapper/Record.es:301             _errors[field] = msg

    0023: [0] 5c ......................... getLocalSlot1 
    0024: [1] 57 ......................... loadThis 
    0025: [2] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0029: [2] 56 80 2e ................... loadString <> 
    0032: [3] 5b ......................... getLocalSlot0 
    0033: [4] b2 ......................... putObjNameExpr 
    0034: [0] be ......................... return 
    0035: [0] 33 18 dc 04 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:302         }
    
VARIABLE:   [field-00]  private var field : String
VARIABLE:   [msg-01]  private var msg : String

FUNCTION:   [Record-58]  public const static function find(key: Object, options: Object) : Object

     ARG:   [arg-00]   private key : Object
     ARG:   [arg-01]   private options : Object
   LOCAL:   [local-02] var grid : Array
   LOCAL:   [local-03] var results

    0000: [0] 41 02 02 07 ................ initDefaultArgs8 <2> <4> <9> 
    0004: [0] 8a e4 06 00 ................ newObject <type: 0x1b2,  ejs::Object> <argc: 0> <att: >
    0008: [1] 95 ......................... putLocalSlot1 
    0009: [0] 33 18 98 05 ca 95 01 ....... debug 

    # ejs.db.mapper/Record.es:332             let grid: Array = innerFind(key, 1, options)

    0016: [0] 5b ......................... getLocalSlot0 
    0017: [1] 45 ......................... load1 
    0018: [2] 5c ......................... getLocalSlot1 
    0019: [3] 1d 96 01 00 06 ............. callThisStaticSlot <slot: 75> <0> <argc: 3> 
    0024: [0] 93 ......................... pushResult 
    0025: [1] 96 ......................... putLocalSlot2 
    0026: [0] 33 18 9a 05 bc 96 01 ....... debug 

    # ejs.db.mapper/Record.es:333             if (grid.length >= 1) {

    0033: [0] 5d ......................... getLocalSlot2 
    0034: [1] 7b 8e 53 d6 02 ............. getObjName <length> <public> 
    0039: [1] 45 ......................... load1 
    0040: [2] 28 ......................... compareGe 
    0041: [1] 13 4c ...................... branchFalse8 <addr: 119> 
    0043: [0] 33 18 9c 05 aa 97 01 ....... debug 

    # ejs.db.mapper/Record.es:334                 let results = createRecord(grid[0], options)

    0050: [0] 5d ......................... getLocalSlot2 
    0051: [1] 56 80 2e ................... loadString <> 
    0054: [2] 44 ......................... load0 
    0055: [3] 7c ......................... getObjNameExpr 
    0056: [1] 5c ......................... getLocalSlot1 
    0057: [2] 1d 70 00 04 ................ callThisStaticSlot <slot: 56> <0> <argc: 2> 
    0061: [0] 93 ......................... pushResult 
    0062: [1] 97 ......................... putLocalSlot3 
    0063: [0] 33 18 9e 05 a4 98 01 ....... debug 

    # ejs.db.mapper/Record.es:335                 if (options && options.debug) {

    0070: [0] 5c ......................... getLocalSlot1 
    0071: [1] 39 ......................... dup 
    0072: [2] 13 08 ...................... branchFalse8 <addr: 82> 
    0074: [1] 90 ......................... pop 
    0075: [0] 5c ......................... getLocalSlot1 
    0076: [1] 7b 84 99 01 80 2e .......... getObjName <debug> <> 
    0082: [1] 13 18 ...................... branchFalse8 <addr: 108> 
    0084: [0] 33 18 a0 05 90 99 01 ....... debug 

    # ejs.db.mapper/Record.es:336                     print("RESULTS: " + serialize(results))

    0091: [0] 56 88 9a 01 ................ loadString <RESULTS: > 
    0095: [1] 5e ......................... getLocalSlot3 
    0096: [2] 17 c8 01 02 ................ callGlobalSlot <slot: 100> <argc: 1> 
    0100: [1] 93 ......................... pushResult 
    0101: [2] 00 ......................... add 
    0102: [1] 17 aa 01 02 ................ callGlobalSlot <slot: 85> <argc: 1> 
    0106: [0] 3e 00 ...................... goto8 <addr: 108> 
    0108: [0] 33 18 a4 05 9c 9a 01 ....... debug 

    # ejs.db.mapper/Record.es:338                 return results

    0115: [0] 5e ......................... getLocalSlot3 
    0116: [1] bf ......................... returnValue 
    0117: [0] 3e 00 ...................... goto8 <addr: 119> 
    0119: [0] 33 18 a8 05 da 9a 01 ....... debug 

    # ejs.db.mapper/Record.es:340             return null

    0126: [0] 50 ......................... loadGlobal 
    0127: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0131: [1] bf ......................... returnValue 
    
VARIABLE:   [key-00]  private var key : Object
VARIABLE:   [options-01]  private var options : Object
VARIABLE:   [grid-02]  private var grid : Array
VARIABLE:   [results-03]  -hoisted-3 var results

FUNCTION:   [Record-59]  public const static function findAll(options: Object) : Array

     ARG:   [arg-00]   private options : Object
   LOCAL:   [local-01] var grid : Array
   LOCAL:   [local-02] var i

    0000: [0] 41 02 02 07 ................ initDefaultArgs8 <2> <4> <9> 
    0004: [0] 8a e4 06 00 ................ newObject <type: 0x1b2,  ejs::Object> <argc: 0> <att: >
    0008: [1] 94 ......................... putLocalSlot0 
    0009: [0] 33 18 bc 05 92 9c 01 ....... debug 

    # ejs.db.mapper/Record.es:350             let grid: Array = innerFind(null, null, options)

    0016: [0] 50 ......................... loadGlobal 
    0017: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0021: [1] 50 ......................... loadGlobal 
    0022: [2] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0026: [2] 5b ......................... getLocalSlot0 
    0027: [3] 1d 96 01 00 06 ............. callThisStaticSlot <slot: 75> <0> <argc: 3> 
    0032: [0] 93 ......................... pushResult 
    0033: [1] 95 ......................... putLocalSlot1 
    0034: [0] 33 18 c0 05 8c 9d 01 ....... debug 

    # ejs.db.mapper/Record.es:352             for (let i = 0; i < grid.length; i++) {

    0041: [0] 44 ......................... load0 
    0042: [1] 96 ......................... putLocalSlot2 
    0043: [0] 5d ......................... getLocalSlot2 
    0044: [1] 5c ......................... getLocalSlot1 
    0045: [2] 7b 8e 53 d6 02 ............. getObjName <length> <public> 
    0050: [2] 2b ......................... compareLt 
    0051: [1] 13 28 ...................... branchFalse8 <addr: 93> 
    0053: [0] 33 18 c2 05 8e 9e 01 ....... debug 

    # ejs.db.mapper/Record.es:353                 grid[i] = createRecord(grid[i], options)

    0060: [0] 5c ......................... getLocalSlot1 
    0061: [1] 56 80 2e ................... loadString <> 
    0064: [2] 5d ......................... getLocalSlot2 
    0065: [3] 7c ......................... getObjNameExpr 
    0066: [1] 5b ......................... getLocalSlot0 
    0067: [2] 1d 70 00 04 ................ callThisStaticSlot <slot: 56> <0> <argc: 2> 
    0071: [0] 93 ......................... pushResult 
    0072: [1] 5c ......................... getLocalSlot1 
    0073: [2] 56 80 2e ................... loadString <> 
    0076: [3] 5d ......................... getLocalSlot2 
    0077: [4] b2 ......................... putObjNameExpr 
    0078: [0] 33 18 c0 05 8c 9d 01 ....... debug 

    # ejs.db.mapper/Record.es:352             for (let i = 0; i < grid.length; i++) {

    0085: [0] 5d ......................... getLocalSlot2 
    0086: [1] 39 ......................... dup 
    0087: [2] 3f 01 ...................... inc <1> 
    0089: [2] 96 ......................... putLocalSlot2 
    0090: [1] 90 ......................... pop 
    0091: [0] 3e ce ...................... goto8 <addr: 43> 
    0093: [0] 33 18 c8 05 80 9f 01 ....... debug 

    # ejs.db.mapper/Record.es:356             if (options && options.debug) {

    0100: [0] 5b ......................... getLocalSlot0 
    0101: [1] 39 ......................... dup 
    0102: [2] 13 08 ...................... branchFalse8 <addr: 112> 
    0104: [1] 90 ......................... pop 
    0105: [0] 5b ......................... getLocalSlot0 
    0106: [1] 7b 84 99 01 80 2e .......... getObjName <debug> <> 
    0112: [1] 13 18 ...................... branchFalse8 <addr: 138> 
    0114: [0] 33 18 ca 05 d8 9f 01 ....... debug 

    # ejs.db.mapper/Record.es:357                 print("RESULTS: " + serialize(grid))

    0121: [0] 56 88 9a 01 ................ loadString <RESULTS: > 
    0125: [1] 5c ......................... getLocalSlot1 
    0126: [2] 17 c8 01 02 ................ callGlobalSlot <slot: 100> <argc: 1> 
    0130: [1] 93 ......................... pushResult 
    0131: [2] 00 ......................... add 
    0132: [1] 17 aa 01 02 ................ callGlobalSlot <slot: 85> <argc: 1> 
    0136: [0] 3e 00 ...................... goto8 <addr: 138> 
    0138: [0] 33 18 ce 05 c2 a0 01 ....... debug 

    # ejs.db.mapper/Record.es:359             return grid

    0145: [0] 5c ......................... getLocalSlot1 
    0146: [1] bf ......................... returnValue 
    
VARIABLE:   [options-00]  private var options : Object
VARIABLE:   [grid-01]  private var grid : Array
VARIABLE:   [i-02]  -hoisted-2 var i

FUNCTION:   [Record-60]  public const static function findOneWhere(where: String) : Object

     ARG:   [arg-00]   private where : String
   LOCAL:   [local-01] var grid : Array

    0000: [0] 33 18 e6 05 fe a1 01 ....... debug 

    # ejs.db.mapper/Record.es:371             let grid: Array = innerFind(null, 1, { conditions: [where]})

    0007: [0] 50 ......................... loadGlobal 
    0008: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0012: [1] 45 ......................... load1 
    0013: [2] 56 00 ...................... loadString <> 
    0015: [3] 56 9a 8e 01 ................ loadString <conditions> 
    0019: [4] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0021: [5] 89 ......................... new 
    0022: [5] 39 ......................... dup 
    0023: [6] 5b ......................... getLocalSlot0 
    0024: [7] c5 ......................... swap 
    0025: [7] 56 80 2e ................... loadString <> 
    0028: [8] 44 ......................... load0 
    0029: [9] b2 ......................... putObjNameExpr 
    0030: [5] 8a e4 06 02 00 ............. newObject <type: 0x1b2,  ejs::Object> <argc: 1> <att: 1 >
    0035: [3] 1d 96 01 00 06 ............. callThisStaticSlot <slot: 75> <0> <argc: 3> 
    0040: [0] 93 ......................... pushResult 
    0041: [1] 95 ......................... putLocalSlot1 
    0042: [0] 33 18 e8 05 bc 96 01 ....... debug 

    # ejs.db.mapper/Record.es:372             if (grid.length >= 1) {

    0049: [0] 5c ......................... getLocalSlot1 
    0050: [1] 7b 8e 53 d6 02 ............. getObjName <length> <public> 
    0055: [1] 45 ......................... load1 
    0056: [2] 28 ......................... compareGe 
    0057: [1] 13 15 ...................... branchFalse8 <addr: 80> 
    0059: [0] 33 18 ea 05 90 a3 01 ....... debug 

    # ejs.db.mapper/Record.es:373                 return createRecord(grid[0])

    0066: [0] 5c ......................... getLocalSlot1 
    0067: [1] 56 80 2e ................... loadString <> 
    0070: [2] 44 ......................... load0 
    0071: [3] 7c ......................... getObjNameExpr 
    0072: [1] 1d 70 00 02 ................ callThisStaticSlot <slot: 56> <0> <argc: 1> 
    0076: [0] 93 ......................... pushResult 
    0077: [1] bf ......................... returnValue 
    0078: [0] 3e 00 ...................... goto8 <addr: 80> 
    0080: [0] 33 18 ee 05 da 9a 01 ....... debug 

    # ejs.db.mapper/Record.es:375             return null

    0087: [0] 50 ......................... loadGlobal 
    0088: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0092: [1] bf ......................... returnValue 
    
VARIABLE:   [where-00]  private var where : String
VARIABLE:   [grid-01]  private var grid : Array

FUNCTION:   [Record-61]  public const static function findWhere(where: String, count: Number) : Array

     ARG:   [arg-00]   private where : String
     ARG:   [arg-01]   private count : Number
   LOCAL:   [local-02] var grid : Array
   LOCAL:   [local-03] var i

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 95 ......................... putLocalSlot1 
    0010: [0] 33 18 86 06 b2 a5 01 ....... debug 

    # ejs.db.mapper/Record.es:387             let grid: Array = innerFind(null, null, { conditions: [where]})

    0017: [0] 50 ......................... loadGlobal 
    0018: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0022: [1] 50 ......................... loadGlobal 
    0023: [2] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0027: [2] 56 00 ...................... loadString <> 
    0029: [3] 56 9a 8e 01 ................ loadString <conditions> 
    0033: [4] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0035: [5] 89 ......................... new 
    0036: [5] 39 ......................... dup 
    0037: [6] 5b ......................... getLocalSlot0 
    0038: [7] c5 ......................... swap 
    0039: [7] 56 80 2e ................... loadString <> 
    0042: [8] 44 ......................... load0 
    0043: [9] b2 ......................... putObjNameExpr 
    0044: [5] 8a e4 06 02 00 ............. newObject <type: 0x1b2,  ejs::Object> <argc: 1> <att: 1 >
    0049: [3] 1d 96 01 00 06 ............. callThisStaticSlot <slot: 75> <0> <argc: 3> 
    0054: [0] 93 ......................... pushResult 
    0055: [1] 96 ......................... putLocalSlot2 
    0056: [0] 33 18 88 06 ca a6 01 ....... debug 

    # ejs.db.mapper/Record.es:388             for (i in grid.length) {

    0063: [0] 5d ......................... getLocalSlot2 
    0064: [1] 7b 8e 53 d6 02 ............. getObjName <length> <public> 
    0069: [1] 1e 9c 5e cc 36 00 .......... callObjName <get> <iterator> <argc: 0> 
    0075: [0] 93 ......................... pushResult 
    0076: [1] 39 ......................... dup 
    0077: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0080: [1] 93 ......................... pushResult 
    0081: [2] 97 ......................... putLocalSlot3 
    0082: [1] 33 18 8a 06 94 a7 01 ....... debug 

    # ejs.db.mapper/Record.es:389                 grid[i] = createRecord(grid[i])

    0089: [1] 5d ......................... getLocalSlot2 
    0090: [2] 56 80 2e ................... loadString <> 
    0093: [3] 5e ......................... getLocalSlot3 
    0094: [4] 7c ......................... getObjNameExpr 
    0095: [2] 1d 70 00 02 ................ callThisStaticSlot <slot: 56> <0> <argc: 1> 
    0099: [1] 93 ......................... pushResult 
    0100: [2] 5d ......................... getLocalSlot2 
    0101: [3] 56 80 2e ................... loadString <> 
    0104: [4] 5e ......................... getLocalSlot3 
    0105: [5] b2 ......................... putObjNameExpr 
    0106: [1] 3e e0 ...................... goto8 <addr: 76> 
    0108: [1] 90 ......................... pop 
    0109: [0] 33 18 8e 06 c2 a0 01 ....... debug 

    # ejs.db.mapper/Record.es:391             return grid

    0116: [0] 5d ......................... getLocalSlot2 
    0117: [1] bf ......................... returnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     77      80        108          108       StopIteration

VARIABLE:   [where-00]  private var where : String
VARIABLE:   [count-01]  private var count : Number
VARIABLE:   [grid-02]  private var grid : Array
VARIABLE:   [i-03]  -hoisted-3 var i

FUNCTION:   [Record-62]  public const static function getColumnNames() : Array

   LOCAL:   [local-00] var result : Array
   LOCAL:   [local-01] var col : String

    0000: [0] 33 18 a0 06 88 a9 01 ....... debug 

    # ejs.db.mapper/Record.es:400             if (!_columns) _model.getSchema()

    0007: [0] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0010: [1] 86 ......................... logicalNot 
    0011: [1] 13 0b ...................... branchFalse8 <addr: 24> 
    0013: [0] 83 4a 02 ................... getThisTypeSlot <slot: 37> <1> 
    0016: [1] 1e e2 73 80 2e 00 .......... callObjName <getSchema> <> <argc: 0> 
    0022: [0] 3e 00 ...................... goto8 <addr: 24> 
    0024: [0] 33 18 a2 06 e4 a9 01 ....... debug 

    # ejs.db.mapper/Record.es:401             let result: Array = []

    0031: [0] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0033: [1] 89 ......................... new 
    0034: [1] 94 ......................... putLocalSlot0 
    0035: [0] 33 18 a4 06 b8 aa 01 ....... debug 

    # ejs.db.mapper/Record.es:402             for (let col: String in _columns) {

    0042: [0] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0045: [1] 18 10 00 ................... callObjSlot <slot: 8> <argc: 0> 
    0048: [0] 93 ......................... pushResult 
    0049: [1] 39 ......................... dup 
    0050: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0053: [1] 93 ......................... pushResult 
    0054: [2] 95 ......................... putLocalSlot1 
    0055: [1] 33 18 a6 06 98 ab 01 ....... debug 

    # ejs.db.mapper/Record.es:403                 result.append(col)

    0062: [1] 5b ......................... getLocalSlot0 
    0063: [2] 5c ......................... getLocalSlot1 
    0064: [3] 18 36 02 ................... callObjSlot <slot: 27> <argc: 1> 
    0067: [1] 3e ec ...................... goto8 <addr: 49> 
    0069: [1] 90 ......................... pop 
    0070: [0] 33 18 aa 06 de ab 01 ....... debug 

    # ejs.db.mapper/Record.es:405             return result

    0077: [0] 5b ......................... getLocalSlot0 
    0078: [1] bf ......................... returnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     50      53         69           69       StopIteration

VARIABLE:   [result-00]  private var result : Array
VARIABLE:   [col-01]  -hoisted-1 var col : String

FUNCTION:   [Record-63]  public const static function getColumnTitles() : Array

   LOCAL:   [local-00] var result : Array
   LOCAL:   [local-01] var col : String

    0000: [0] 33 18 bc 06 88 a9 01 ....... debug 

    # ejs.db.mapper/Record.es:414             if (!_columns) _model.getSchema()

    0007: [0] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0010: [1] 86 ......................... logicalNot 
    0011: [1] 13 0b ...................... branchFalse8 <addr: 24> 
    0013: [0] 83 4a 02 ................... getThisTypeSlot <slot: 37> <1> 
    0016: [1] 1e e2 73 80 2e 00 .......... callObjName <getSchema> <> <argc: 0> 
    0022: [0] 3e 00 ...................... goto8 <addr: 24> 
    0024: [0] 33 18 be 06 e4 a9 01 ....... debug 

    # ejs.db.mapper/Record.es:415             let result: Array = []

    0031: [0] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0033: [1] 89 ......................... new 
    0034: [1] 94 ......................... putLocalSlot0 
    0035: [0] 33 18 c0 06 b8 aa 01 ....... debug 

    # ejs.db.mapper/Record.es:416             for (let col: String in _columns) {

    0042: [0] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0045: [1] 18 10 00 ................... callObjSlot <slot: 8> <argc: 0> 
    0048: [0] 93 ......................... pushResult 
    0049: [1] 39 ......................... dup 
    0050: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0053: [1] 93 ......................... pushResult 
    0054: [2] 95 ......................... putLocalSlot1 
    0055: [1] 33 18 c2 06 98 ad 01 ....... debug 

    # ejs.db.mapper/Record.es:417                 result.append(col.toPascal())

    0062: [1] 5b ......................... getLocalSlot0 
    0063: [2] 5c ......................... getLocalSlot1 
    0064: [3] 18 60 00 ................... callObjSlot <slot: 48> <argc: 0> 
    0067: [2] 93 ......................... pushResult 
    0068: [3] 18 36 02 ................... callObjSlot <slot: 27> <argc: 1> 
    0071: [1] 3e e8 ...................... goto8 <addr: 49> 
    0073: [1] 90 ......................... pop 
    0074: [0] 33 18 c6 06 de ab 01 ....... debug 

    # ejs.db.mapper/Record.es:419             return result

    0081: [0] 5b ......................... getLocalSlot0 
    0082: [1] bf ......................... returnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     50      53         73           73       StopIteration

VARIABLE:   [result-00]  private var result : Array
VARIABLE:   [col-01]  -hoisted-1 var col : String

FUNCTION:   [Record-64]  public const static function getColumnType(field: String) : String

     ARG:   [arg-00]   private field : String

    0000: [0] 33 18 d6 06 88 a9 01 ....... debug 

    # ejs.db.mapper/Record.es:427             if (!_columns) _model.getSchema()

    0007: [0] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0010: [1] 86 ......................... logicalNot 
    0011: [1] 13 0b ...................... branchFalse8 <addr: 24> 
    0013: [0] 83 4a 02 ................... getThisTypeSlot <slot: 37> <1> 
    0016: [1] 1e e2 73 80 2e 00 .......... callObjName <getSchema> <> <argc: 0> 
    0022: [0] 3e 00 ...................... goto8 <addr: 24> 
    0024: [0] 33 18 d8 06 92 af 01 ....... debug 

    # ejs.db.mapper/Record.es:428             return _db.sqlTypeToDataType(_columns[field].sqlType)

    0031: [0] 83 44 02 ................... getThisTypeSlot <slot: 34> <1> 
    0034: [1] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0037: [2] 56 80 2e ................... loadString <> 
    0040: [3] 5b ......................... getLocalSlot0 
    0041: [4] 7c ......................... getObjNameExpr 
    0042: [2] 7b 96 b0 01 80 2e .......... getObjName <sqlType> <> 
    0048: [2] 18 6a 02 ................... callObjSlot <slot: 53> <argc: 1> 
    0051: [0] 93 ......................... pushResult 
    0052: [1] bf ......................... returnValue 
    
VARIABLE:   [field-00]  private var field : String

FUNCTION:   [Record-65]  public const static function getDb() : Database


    0000: [0] 33 18 e8 06 9a b1 01 ....... debug 

    # ejs.db.mapper/Record.es:436             if (!_db) {

    0007: [0] 83 44 02 ................... getThisTypeSlot <slot: 34> <1> 
    0010: [1] 86 ......................... logicalNot 
    0011: [1] 13 17 ...................... branchFalse8 <addr: 36> 
    0013: [0] 33 18 ea 06 ca b1 01 ....... debug 

    # ejs.db.mapper/Record.es:437                 _db = Database.defaultDatabase

    0020: [0] 50 ......................... loadGlobal 
    0021: [1] 7b 9a 0d 0a ................ getObjName <Database> <ejs.db> 
    0025: [1] 7b a8 b2 01 d6 02 .......... getObjName <defaultDatabase> <public> 
    0031: [1] bc 44 02 ................... putThisTypeSlot <slot: 34> <1> 
    0034: [0] 3e 00 ...................... goto8 <addr: 36> 
    0036: [0] 33 18 ee 06 c8 b2 01 ....... debug 

    # ejs.db.mapper/Record.es:439             return _db

    0043: [0] 83 44 02 ................... getThisTypeSlot <slot: 34> <1> 
    0046: [1] bf ......................... returnValue 
    

FUNCTION:   [Record-66]  public const function getErrors() : Array


    0000: [0] 33 18 fe 06 ca b3 01 ....... debug 

    # ejs.db.mapper/Record.es:447             _errors

    0007: [0] 57 ......................... loadThis 
    0008: [1] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0012: [1] bf ......................... returnValue 
    

FUNCTION:   [Record-67]  public const static function getKeyName() : String


    0000: [0] 33 18 8a 07 e0 b4 01 ....... debug 

    # ejs.db.mapper/Record.es:453             _keyName

    0007: [0] 83 48 02 ................... getThisTypeSlot <slot: 36> <1> 
    0010: [1] bf ......................... returnValue 
    

FUNCTION:   [Record-68]  public const static function getNumRows() : Number

   LOCAL:   [local-00] var cmd : String
   LOCAL:   [local-01] var grid : Array

    0000: [0] 33 18 96 07 88 a9 01 ....... debug 

    # ejs.db.mapper/Record.es:459             if (!_columns) _model.getSchema()

    0007: [0] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0010: [1] 86 ......................... logicalNot 
    0011: [1] 13 0b ...................... branchFalse8 <addr: 24> 
    0013: [0] 83 4a 02 ................... getThisTypeSlot <slot: 37> <1> 
    0016: [1] 1e e2 73 80 2e 00 .......... callObjName <getSchema> <> <argc: 0> 
    0022: [0] 3e 00 ...................... goto8 <addr: 24> 
    0024: [0] 33 18 98 07 fe b5 01 ....... debug 

    # ejs.db.mapper/Record.es:460             let cmd: String = "SELECT COUNT(*) FROM " + _tableName + " WHERE " + _keyName + " <> '';"

    0031: [0] 56 d2 b7 01 ................ loadString <SELECT COUNT(*) FROM > 
    0035: [1] 83 4c 02 ................... getThisTypeSlot <slot: 38> <1> 
    0038: [2] 00 ......................... add 
    0039: [1] 56 fe b7 01 ................ loadString < WHERE > 
    0043: [2] 00 ......................... add 
    0044: [1] 83 48 02 ................... getThisTypeSlot <slot: 36> <1> 
    0047: [2] 00 ......................... add 
    0048: [1] 56 8e b8 01 ................ loadString < <> '';> 
    0052: [2] 00 ......................... add 
    0053: [1] 94 ......................... putLocalSlot0 
    0054: [0] 33 18 9a 07 9e b8 01 ....... debug 

    # ejs.db.mapper/Record.es:461             let grid: Array = _db.query(cmd, "numRows", _trace)

    0061: [0] 83 44 02 ................... getThisTypeSlot <slot: 34> <1> 
    0064: [1] 5b ......................... getLocalSlot0 
    0065: [2] 56 9e b9 01 ................ loadString <numRows> 
    0069: [3] 83 4e 02 ................... getThisTypeSlot <slot: 39> <1> 
    0072: [4] 18 5c 06 ................... callObjSlot <slot: 46> <argc: 3> 
    0075: [0] 93 ......................... pushResult 
    0076: [1] 95 ......................... putLocalSlot1 
    0077: [0] 33 18 9c 07 ae b9 01 ....... debug 

    # ejs.db.mapper/Record.es:462             return grid[0]["COUNT(*)"]

    0084: [0] 5c ......................... getLocalSlot1 
    0085: [1] 56 80 2e ................... loadString <> 
    0088: [2] 44 ......................... load0 
    0089: [3] 7c ......................... getObjNameExpr 
    0090: [1] 56 80 2e ................... loadString <> 
    0093: [2] 56 fc b9 01 ................ loadString <COUNT(*)> 
    0097: [3] 7c ......................... getObjNameExpr 
    0098: [1] bf ......................... returnValue 
    
VARIABLE:   [cmd-00]  private var cmd : String
VARIABLE:   [grid-01]  private var grid : Array

FUNCTION:   [Record-69]  [Record,private] const static function getSchema() : Void

   LOCAL:   [local-00] var sql : String
   LOCAL:   [local-01] var grid : Array
   LOCAL:   [local-02] var row
   LOCAL:   [local-03] var name
   LOCAL:   [local-04] var sqlType
   LOCAL:   [local-05] var ejsType

    0000: [0] 33 18 aa 07 9a b1 01 ....... debug 

    # ejs.db.mapper/Record.es:469             if (!_db) {

    0007: [0] 83 44 02 ................... getThisTypeSlot <slot: 34> <1> 
    0010: [1] 86 ......................... logicalNot 
    0011: [1] 13 37 ...................... branchFalse8 <addr: 68> 
    0013: [0] 33 18 ac 07 ca b1 01 ....... debug 

    # ejs.db.mapper/Record.es:470                 _db = Database.defaultDatabase

    0020: [0] 50 ......................... loadGlobal 
    0021: [1] 7b 9a 0d 0a ................ getObjName <Database> <ejs.db> 
    0025: [1] 7b a8 b2 01 d6 02 .......... getObjName <defaultDatabase> <public> 
    0031: [1] bc 44 02 ................... putThisTypeSlot <slot: 34> <1> 
    0034: [0] 33 18 ae 07 8c bb 01 ....... debug 

    # ejs.db.mapper/Record.es:471                 if (!_db) {

    0041: [0] 83 44 02 ................... getThisTypeSlot <slot: 34> <1> 
    0044: [1] 86 ......................... logicalNot 
    0045: [1] 13 13 ...................... branchFalse8 <addr: 66> 
    0047: [0] 33 18 b0 07 c4 bb 01 ....... debug 

    # ejs.db.mapper/Record.es:472                     throw new Error("Can't get schema, database connection has not yet been established")

    0054: [0] 7e 2c ...................... getGlobalSlot <slot: 22> 
    0056: [1] 89 ......................... new 
    0057: [1] 56 98 bd 01 ................ loadString <Can't get schema, database connection has not yet been established> 
    0061: [2] 20 02 ...................... callConstructor <argc: 1> 
    0063: [1] c6 ......................... throw 
    0064: [1] 3e 00 ...................... goto8 <addr: 66> 
    0066: [1] 3e 00 ...................... goto8 <addr: 68> 
    0068: [1] 33 18 b4 07 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:474             }

    0075: [1] 33 18 b6 07 a6 be 01 ....... debug 

    # ejs.db.mapper/Record.es:475             let sql: String = 'PRAGMA table_info("' + _tableName + '");'

    0082: [1] 56 b8 bf 01 ................ loadString <PRAGMA table_info("> 
    0086: [2] 83 4c 02 ................... getThisTypeSlot <slot: 38> <1> 
    0089: [3] 00 ......................... add 
    0090: [2] 56 e0 bf 01 ................ loadString <");> 
    0094: [3] 00 ......................... add 
    0095: [2] 94 ......................... putLocalSlot0 
    0096: [1] 33 18 b8 07 e8 bf 01 ....... debug 

    # ejs.db.mapper/Record.es:476             let grid: Array = _db.query(sql, "schema", _trace)

    0103: [1] 83 44 02 ................... getThisTypeSlot <slot: 34> <1> 
    0106: [2] 5b ......................... getLocalSlot0 
    0107: [3] 56 e6 c0 01 ................ loadString <schema> 
    0111: [4] 83 4e 02 ................... getThisTypeSlot <slot: 39> <1> 
    0114: [5] 18 5c 06 ................... callObjSlot <slot: 46> <argc: 3> 
    0117: [1] 93 ......................... pushResult 
    0118: [2] 95 ......................... putLocalSlot1 
    0119: [1] 33 18 ba 07 f4 c0 01 ....... debug 

    # ejs.db.mapper/Record.es:477             _columns = {}

    0126: [1] 8a e4 06 00 ................ newObject <type: 0x1b2,  ejs::Object> <argc: 0> <att: >
    0130: [2] bc 3e 02 ................... putThisTypeSlot <slot: 31> <1> 
    0133: [1] 33 18 bc 07 a8 c1 01 ....... debug 

    # ejs.db.mapper/Record.es:478             for each (let row in grid) {

    0140: [1] 5c ......................... getLocalSlot1 
    0141: [2] 18 18 00 ................... callObjSlot <slot: 12> <argc: 0> 
    0144: [1] 93 ......................... pushResult 
    0145: [2] 39 ......................... dup 
    0146: [3] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0149: [2] 93 ......................... pushResult 
    0150: [3] 96 ......................... putLocalSlot2 
    0151: [2] 33 18 be 07 82 c2 01 ....... debug 

    # ejs.db.mapper/Record.es:479                 let name = row["name"]

    0158: [2] 5d ......................... getLocalSlot2 
    0159: [3] 56 80 2e ................... loadString <> 
    0162: [4] 56 a0 2d ................... loadString <name> 
    0165: [5] 7c ......................... getObjNameExpr 
    0166: [3] 97 ......................... putLocalSlot3 
    0167: [2] 33 18 c0 07 d0 c2 01 ....... debug 

    # ejs.db.mapper/Record.es:480                 let sqlType = row["type"].toLower()

    0174: [2] 5d ......................... getLocalSlot2 
    0175: [3] 56 80 2e ................... loadString <> 
    0178: [4] 56 aa 61 ................... loadString <type> 
    0181: [5] 7c ......................... getObjNameExpr 
    0182: [3] 1e aa 65 00 00 ............. callObjName <toLower> <> <argc: 0> 
    0187: [2] 93 ......................... pushResult 
    0188: [3] 98 ......................... putLocalSlot4 
    0189: [2] 33 18 c2 07 b8 c3 01 ....... debug 

    # ejs.db.mapper/Record.es:481                 let ejsType = mapSqlTypeToEjs(sqlType)

    0196: [2] 5f ......................... getLocalSlot4 
    0197: [3] 1d 9a 01 00 02 ............. callThisStaticSlot <slot: 77> <0> <argc: 1> 
    0202: [2] 93 ......................... pushResult 
    0203: [3] 99 ......................... putLocalSlot5 
    0204: [2] 33 18 c4 07 a6 c4 01 ....... debug 

    # ejs.db.mapper/Record.es:482                 _columns[name] = new Column(name, false, ejsType, sqlType)

    0211: [2] 50 ......................... loadGlobal 
    0212: [3] 7b 8e 6d a4 01 ............. getObjName <Column> <ejs.db.mapper> 
    0217: [3] 89 ......................... new 
    0218: [3] 5e ......................... getLocalSlot3 
    0219: [4] 50 ......................... loadGlobal 
    0220: [5] 7b e4 69 02 ................ getObjName <false> <ejs> 
    0224: [5] 60 ......................... getLocalSlot5 
    0225: [6] 5f ......................... getLocalSlot4 
    0226: [7] 20 08 ...................... callConstructor <argc: 4> 
    0228: [3] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0231: [4] 56 80 2e ................... loadString <> 
    0234: [5] 5e ......................... getLocalSlot3 
    0235: [6] b2 ......................... putObjNameExpr 
    0236: [2] 3e a3 ...................... goto8 <addr: 145> 
    0238: [2] 90 ......................... pop 
    0239: [1] be ......................... return 
    0240: [0] 33 18 c8 07 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:484         }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration    146     149        238          238       StopIteration

VARIABLE:   [sql-00]  private var sql : String
VARIABLE:   [grid-01]  private var grid : Array
VARIABLE:   [row-02]  -hoisted-2 var row
VARIABLE:   [name-03]  -hoisted-2 var name
VARIABLE:   [sqlType-04]  -hoisted-2 var sqlType
VARIABLE:   [ejsType-05]  -hoisted-2 var ejsType

FUNCTION:   [Record-70]  public const static function getTableName() : String


    0000: [0] 33 18 d6 07 9a c6 01 ....... debug 

    # ejs.db.mapper/Record.es:491             _tableName

    0007: [0] 83 4c 02 ................... getThisTypeSlot <slot: 38> <1> 
    0010: [1] bf ......................... returnValue 
    

FUNCTION:   [Record-71]  public const static function hasAndBelongsToMany(model: Object, options: Object) : Void

     ARG:   [arg-00]   private model : Object
     ARG:   [arg-01]   private options : Object

    0000: [0] 41 02 02 07 ................ initDefaultArgs8 <2> <4> <9> 
    0004: [0] 8a e4 06 00 ................ newObject <type: 0x1b2,  ejs::Object> <argc: 0> <att: >
    0008: [1] 95 ......................... putLocalSlot1 
    0009: [0] 33 18 f0 07 94 c8 01 ....... debug 

    # ejs.db.mapper/Record.es:504             belongsTo(model, options)

    0016: [0] 5b ......................... getLocalSlot0 
    0017: [1] 5c ......................... getLocalSlot1 
    0018: [2] 1d 60 00 04 ................ callThisStaticSlot <slot: 48> <0> <argc: 2> 
    0022: [0] 33 18 f2 07 e0 c8 01 ....... debug 

    # ejs.db.mapper/Record.es:505             hasMany(model, options)

    0029: [0] 5b ......................... getLocalSlot0 
    0030: [1] 5c ......................... getLocalSlot1 
    0031: [2] 1d 92 01 00 04 ............. callThisStaticSlot <slot: 73> <0> <argc: 2> 
    0036: [0] be ......................... return 
    0037: [0] 33 18 f4 07 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:506         }
    
VARIABLE:   [model-00]  private var model : Object
VARIABLE:   [options-01]  private var options : Object

FUNCTION:   [Record-72]  public const function hasError(field: String) : Boolean

     ARG:   [arg-00]   private field : String

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 94 ......................... putLocalSlot0 
    0010: [0] 33 18 82 08 c8 ca 01 ....... debug 

    # ejs.db.mapper/Record.es:513             if (field) {

    0017: [0] 5b ......................... getLocalSlot0 
    0018: [1] 13 1d ...................... branchFalse8 <addr: 49> 
    0020: [0] 33 18 84 08 fa ca 01 ....... debug 

    # ejs.db.mapper/Record.es:514                 return (_errors && _errors[field])

    0027: [0] 57 ......................... loadThis 
    0028: [1] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0032: [1] 39 ......................... dup 
    0033: [2] 13 0b ...................... branchFalse8 <addr: 46> 
    0035: [1] 90 ......................... pop 
    0036: [0] 57 ......................... loadThis 
    0037: [1] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0041: [1] 56 80 2e ................... loadString <> 
    0044: [2] 5b ......................... getLocalSlot0 
    0045: [3] 7c ......................... getObjNameExpr 
    0046: [1] bf ......................... returnValue 
    0047: [0] 3e 00 ...................... goto8 <addr: 49> 
    0049: [0] 33 18 88 08 e0 cb 01 ....... debug 

    # ejs.db.mapper/Record.es:516             if (_errors) {

    0056: [0] 57 ......................... loadThis 
    0057: [1] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0061: [1] 13 15 ...................... branchFalse8 <addr: 84> 
    0063: [0] 33 18 8a 08 96 cc 01 ....... debug 

    # ejs.db.mapper/Record.es:517                 return (_errors.length > 0)

    0070: [0] 57 ......................... loadThis 
    0071: [1] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0075: [1] 7b 8e 53 02 ................ getObjName <length> <ejs> 
    0079: [1] 44 ......................... load0 
    0080: [2] 29 ......................... compareGt 
    0081: [1] bf ......................... returnValue 
    0082: [0] 3e 00 ...................... goto8 <addr: 84> 
    0084: [0] 33 18 8e 08 ee cc 01 ....... debug 

    # ejs.db.mapper/Record.es:519             return false

    0091: [0] 50 ......................... loadGlobal 
    0092: [1] 7b e4 69 02 ................ getObjName <false> <ejs> 
    0096: [1] bf ......................... returnValue 
    
VARIABLE:   [field-00]  private var field : String

FUNCTION:   [Record-73]  public const static function hasMany(model: Object, options: Object) : Void

     ARG:   [arg-00]   private model : Object
     ARG:   [arg-01]   private options : Object

    0000: [0] 41 02 02 07 ................ initDefaultArgs8 <2> <4> <9> 
    0004: [0] 8a e4 06 00 ................ newObject <type: 0x1b2,  ejs::Object> <argc: 0> <att: >
    0008: [1] 95 ......................... putLocalSlot1 
    0009: [0] 33 18 aa 08 cc ce 01 ....... debug 

    # ejs.db.mapper/Record.es:533             _hasMany ||= []

    0016: [0] 83 42 02 ................... getThisTypeSlot <slot: 33> <1> 
    0019: [1] 39 ......................... dup 
    0020: [2] 14 04 ...................... branchTrue8 <addr: 26> 
    0022: [1] 90 ......................... pop 
    0023: [0] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0025: [1] 89 ......................... new 
    0026: [1] bc 42 02 ................... putThisTypeSlot <slot: 33> <1> 
    0029: [0] 33 18 ac 08 84 cf 01 ....... debug 

    # ejs.db.mapper/Record.es:534             _hasMany.append(model)

    0036: [0] 83 42 02 ................... getThisTypeSlot <slot: 33> <1> 
    0039: [1] 5b ......................... getLocalSlot0 
    0040: [2] 18 36 02 ................... callObjSlot <slot: 27> <argc: 1> 
    0043: [0] be ......................... return 
    0044: [0] 33 18 ae 08 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:535         }
    
VARIABLE:   [model-00]  private var model : Object
VARIABLE:   [options-01]  private var options : Object

FUNCTION:   [Record-74]  public const static function hasOne(model: Object, options: Object) : Void

     ARG:   [arg-00]   private model : Object
     ARG:   [arg-01]   private options : Object

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 95 ......................... putLocalSlot1 
    0010: [0] 33 18 c6 08 f8 d0 01 ....... debug 

    # ejs.db.mapper/Record.es:547             _hasOne ||= []

    0017: [0] 83 40 02 ................... getThisTypeSlot <slot: 32> <1> 
    0020: [1] 39 ......................... dup 
    0021: [2] 14 04 ...................... branchTrue8 <addr: 27> 
    0023: [1] 90 ......................... pop 
    0024: [0] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0026: [1] 89 ......................... new 
    0027: [1] bc 40 02 ................... putThisTypeSlot <slot: 32> <1> 
    0030: [0] 33 18 c8 08 ae d1 01 ....... debug 

    # ejs.db.mapper/Record.es:548             _hasOne.append(model)

    0037: [0] 83 40 02 ................... getThisTypeSlot <slot: 32> <1> 
    0040: [1] 5b ......................... getLocalSlot0 
    0041: [2] 18 36 02 ................... callObjSlot <slot: 27> <argc: 1> 
    0044: [0] be ......................... return 
    0045: [0] 33 18 ca 08 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:549         }
    
VARIABLE:   [model-00]  private var model : Object
VARIABLE:   [options-01]  private var options : Object

FUNCTION:   [Record-75]  [Record,private] const static function innerFind(key: Object, limit: Number, options: Object) : Array

     ARG:   [arg-00]   private key : Object
     ARG:   [arg-01]   private limit : Number
     ARG:   [arg-02]   private options : Object
   LOCAL:   [local-03] var cmd : String
   LOCAL:   [local-04] var columns : Array
   LOCAL:   [local-05] var from : String
   LOCAL:   [local-06] var conditions : String
   LOCAL:   [local-07] var where : Boolean
   LOCAL:   [local-08] var results : Array
   LOCAL:   [local-09] var index : Number
   LOCAL:   [local-10] var model
   LOCAL:   [local-11] var entry
   LOCAL:   [local-12] var owner
   LOCAL:   [local-13] var owner
   LOCAL:   [local-14] var tname : String
   LOCAL:   [local-15] var parts : Array
   LOCAL:   [local-16] var whereConditions : String
   LOCAL:   [local-17] var cond
   LOCAL:   [local-18] var field
   LOCAL:   [local-19] var 
   LOCAL:   [local-20] var block_0708_121 : Block
   LOCAL:   [local-21] var e

    0000: [0] 41 03 03 09 0e ............. initDefaultArgs8 <3> <5> <11> <16> 
    0005: [0] 50 ......................... loadGlobal 
    0006: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0010: [1] 95 ......................... putLocalSlot1 
    0011: [0] 8a e4 06 00 ................ newObject <type: 0x1b2,  ejs::Object> <argc: 0> <att: >
    0015: [1] 96 ......................... putLocalSlot2 
    0016: [0] 33 18 d6 08 da d3 01 ....... debug 

    # ejs.db.mapper/Record.es:555             let cmd: String

    0023: [0] 33 18 d8 08 92 d4 01 ....... debug 

    # ejs.db.mapper/Record.es:556             let columns: Array

    0030: [0] 33 18 da 08 e0 d4 01 ....... debug 

    # ejs.db.mapper/Record.es:557             let from: String

    0037: [0] 33 18 dc 08 a4 d5 01 ....... debug 

    # ejs.db.mapper/Record.es:558             let conditions: String

    0044: [0] 33 18 de 08 ea d5 01 ....... debug 

    # ejs.db.mapper/Record.es:559             let where: Boolean

    0051: [0] 33 18 e2 08 88 a9 01 ....... debug 

    # ejs.db.mapper/Record.es:561             if (!_columns) _model.getSchema()

    0058: [0] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0061: [1] 86 ......................... logicalNot 
    0062: [1] 13 0b ...................... branchFalse8 <addr: 75> 
    0064: [0] 83 4a 02 ................... getThisTypeSlot <slot: 37> <1> 
    0067: [1] 1e e2 73 80 2e 00 .......... callObjName <getSchema> <> <argc: 0> 
    0073: [0] 3e 00 ...................... goto8 <addr: 75> 
    0075: [0] 33 18 e4 08 a8 d6 01 ....... debug 

    # ejs.db.mapper/Record.es:562             if (options == null) {

    0082: [0] 5d ......................... getLocalSlot2 
    0083: [1] 50 ......................... loadGlobal 
    0084: [2] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0088: [2] 25 ......................... compareEq 
    0089: [1] 13 0e ...................... branchFalse8 <addr: 105> 
    0091: [0] 33 18 e6 08 ee d6 01 ....... debug 

    # ejs.db.mapper/Record.es:563                 options = {}

    0098: [0] 8a e4 06 00 ................ newObject <type: 0x1b2,  ejs::Object> <argc: 0> <att: >
    0102: [1] 96 ......................... putLocalSlot2 
    0103: [0] 3e 00 ...................... goto8 <addr: 105> 
    0105: [0] 33 18 ec 08 a8 d7 01 ....... debug 

    # ejs.db.mapper/Record.es:566             if (options.noassoc) {

    0112: [0] 5d ......................... getLocalSlot2 
    0113: [1] 7b ee d7 01 80 2e .......... getObjName <noassoc> <> 
    0119: [1] 13 11 ...................... branchFalse8 <addr: 138> 
    0121: [0] 33 18 ee 08 fe d7 01 ....... debug 

    # ejs.db.mapper/Record.es:567                 options.depth = 0

    0128: [0] 44 ......................... load0 
    0129: [1] 5d ......................... getLocalSlot2 
    0130: [2] b3 9c 83 01 80 2e .......... putObjName <depth> <> 
    0136: [0] 3e 00 ...................... goto8 <addr: 138> 
    0138: [0] 33 18 f4 08 c2 d8 01 ....... debug 

    # ejs.db.mapper/Record.es:570             if (options.columns) {

    0145: [0] 5d ......................... getLocalSlot2 
    0146: [1] 7b d0 d4 01 80 2e .......... getObjName <columns> <> 
    0152: [1] 13 71 ...................... branchFalse8 <addr: 267> 
    0154: [0] 33 18 f6 08 88 d9 01 ....... debug 

    # ejs.db.mapper/Record.es:571                 columns = options.columns

    0161: [0] 5d ......................... getLocalSlot2 
    0162: [1] 7b d0 d4 01 80 2e .......... getObjName <columns> <> 
    0168: [1] 98 ......................... putLocalSlot4 
    0169: [0] 33 18 80 09 dc d9 01 ....... debug 

    # ejs.db.mapper/Record.es:576                 let index: Number = columns.indexOf("id")

    0176: [0] 5f ......................... getLocalSlot4 
    0177: [1] 56 ca 2c ................... loadString <id> 
    0180: [2] 18 4a 02 ................... callObjSlot <slot: 37> <argc: 1> 
    0183: [0] 93 ......................... pushResult 
    0184: [1] 9d ......................... putLocalSlot9 
    0185: [0] 33 18 82 09 f2 da 01 ....... debug 

    # ejs.db.mapper/Record.es:577                 if (index >= 0) {

    0192: [0] 64 ......................... getLocalSlot9 
    0193: [1] 44 ......................... load0 
    0194: [2] 28 ......................... compareGe 
    0195: [1] 13 17 ...................... branchFalse8 <addr: 220> 
    0197: [0] 33 18 84 09 b6 db 01 ....... debug 

    # ejs.db.mapper/Record.es:578                     columns[index] = _tableName + ".id"

    0204: [0] 83 4c 02 ................... getThisTypeSlot <slot: 38> <1> 
    0207: [1] 56 a6 dc 01 ................ loadString <.id> 
    0211: [2] 00 ......................... add 
    0212: [1] 5f ......................... getLocalSlot4 
    0213: [2] 56 80 2e ................... loadString <> 
    0216: [3] 64 ......................... getLocalSlot9 
    0217: [4] b2 ......................... putObjNameExpr 
    0218: [0] 3e 2d ...................... goto8 <addr: 265> 
    0220: [0] 33 18 86 09 ae dc 01 ....... debug 

    # ejs.db.mapper/Record.es:579                 } else if (!columns.contains(_tableName + ".id")) {

    0227: [0] 5f ......................... getLocalSlot4 
    0228: [1] 83 4c 02 ................... getThisTypeSlot <slot: 38> <1> 
    0231: [2] 56 a6 dc 01 ................ loadString <.id> 
    0235: [3] 00 ......................... add 
    0236: [2] 18 3e 02 ................... callObjSlot <slot: 31> <argc: 1> 
    0239: [0] 93 ......................... pushResult 
    0240: [1] 86 ......................... logicalNot 
    0241: [1] 13 16 ...................... branchFalse8 <addr: 265> 
    0243: [0] 33 18 88 09 b6 dd 01 ....... debug 

    # ejs.db.mapper/Record.es:580                     columns.insert(0, _tableName + ".id")

    0250: [0] 5f ......................... getLocalSlot4 
    0251: [1] 44 ......................... load0 
    0252: [2] 83 4c 02 ................... getThisTypeSlot <slot: 38> <1> 
    0255: [3] 56 a6 dc 01 ................ loadString <.id> 
    0259: [4] 00 ......................... add 
    0260: [3] 18 4c 04 ................... callObjSlot <slot: 38> <argc: 2> 
    0263: [0] 3e 00 ...................... goto8 <addr: 265> 
    0265: [0] 3e 1c ...................... goto8 <addr: 295> 
    0267: [0] 33 18 8c 09 ee 58 .......... debug 

    # ejs.db.mapper/Record.es:582             } else {

    0273: [0] 33 18 8e 09 aa de 01 ....... debug 

    # ejs.db.mapper/Record.es:583                 columns = ["*"]

    0280: [0] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0282: [1] 89 ......................... new 
    0283: [1] 39 ......................... dup 
    0284: [2] 56 ea de 01 ................ loadString <*> 
    0288: [3] c5 ......................... swap 
    0289: [3] 56 80 2e ................... loadString <> 
    0292: [4] 44 ......................... load0 
    0293: [5] b2 ......................... putObjNameExpr 
    0294: [1] 98 ......................... putLocalSlot4 
    0295: [0] 33 18 90 09 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:584             }

    0302: [0] 33 18 94 09 ee de 01 ....... debug 

    # ejs.db.mapper/Record.es:586             conditions = ""

    0309: [0] 56 80 2e ................... loadString <> 
    0312: [1] 9a ......................... putLocalSlot6 
    0313: [0] 33 18 96 09 a6 df 01 ....... debug 

    # ejs.db.mapper/Record.es:587             from = ""

    0320: [0] 56 80 2e ................... loadString <> 
    0323: [1] 99 ......................... putLocalSlot5 
    0324: [0] 33 18 98 09 d2 df 01 ....... debug 

    # ejs.db.mapper/Record.es:588             where = false

    0331: [0] 50 ......................... loadGlobal 
    0332: [1] 7b e4 69 02 ................ getObjName <false> <ejs> 
    0336: [1] 9b ......................... putLocalSlot7 
    0337: [0] 33 18 9c 09 86 e0 01 ....... debug 

    # ejs.db.mapper/Record.es:590             if (options.from) {

    0344: [0] 5d ......................... getLocalSlot2 
    0345: [1] 7b 9a d5 01 80 2e .......... getObjName <from> <> 
    0351: [1] 13 11 ...................... branchFalse8 <addr: 370> 
    0353: [0] 33 18 9e 09 c6 e0 01 ....... debug 

    # ejs.db.mapper/Record.es:591                 from = options.from

    0360: [0] 5d ......................... getLocalSlot2 
    0361: [1] 7b 9a d5 01 80 2e .......... getObjName <from> <> 
    0367: [1] 99 ......................... putLocalSlot5 
    0368: [0] 3e 11 ...................... goto8 <addr: 387> 
    0370: [0] 33 18 a0 09 ee 58 .......... debug 

    # ejs.db.mapper/Record.es:592             } else {

    0376: [0] 33 18 a2 09 8e e1 01 ....... debug 

    # ejs.db.mapper/Record.es:593                 from = _tableName

    0383: [0] 83 4c 02 ................... getThisTypeSlot <slot: 38> <1> 
    0386: [1] 99 ......................... putLocalSlot5 
    0387: [0] 33 18 a8 09 d0 84 01 ....... debug 

    # ejs.db.mapper/Record.es:596             if (options.include) {

    0394: [0] 5d ......................... getLocalSlot2 
    0395: [1] 7b 96 85 01 80 2e .......... getObjName <include> <> 
    0401: [1] 07 bc 03 f7 f7 ............. branchFalse <addr: 628> 
    0406: [0] 33 18 aa 09 ea e1 01 ....... debug 

    # ejs.db.mapper/Record.es:597                 let model

    0413: [0] 33 18 ac 09 9e e2 01 ....... debug 

    # ejs.db.mapper/Record.es:598                 if (options.include is Array) {

    0420: [0] 5d ......................... getLocalSlot2 
    0421: [1] 7b 96 85 01 80 2e .......... getObjName <include> <> 
    0427: [1] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0429: [2] 43 ......................... isA 
    0430: [1] 07 a8 02 f7 f7 ............. branchFalse <addr: 583> 
    0435: [0] 33 18 ae 09 fe e2 01 ....... debug 

    # ejs.db.mapper/Record.es:599                     for each (entry in options.include) {

    0442: [0] 5d ......................... getLocalSlot2 
    0443: [1] 7b 96 85 01 80 2e .......... getObjName <include> <> 
    0449: [1] 1e 96 e4 01 cc 36 00 ....... callObjName <getValues> <iterator> <argc: 0> 
    0456: [0] 93 ......................... pushResult 
    0457: [1] 39 ......................... dup 
    0458: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0461: [1] 93 ......................... pushResult 
    0462: [2] b8 16 ...................... putLocalSlot <slot: 11> 
    0464: [1] 33 18 b0 09 aa e4 01 ....... debug 

    # ejs.db.mapper/Record.es:600                         if (entry is Array) {

    0471: [1] 7f 16 ...................... getLocalSlot <slot: 11> 
    0473: [2] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0475: [3] 43 ......................... isA 
    0476: [2] 13 3d ...................... branchFalse8 <addr: 539> 
    0478: [1] 33 18 b2 09 86 e5 01 ....... debug 

    # ejs.db.mapper/Record.es:601                             model = entry[0]

    0485: [1] 7f 16 ...................... getLocalSlot <slot: 11> 
    0487: [2] 56 80 2e ................... loadString <> 
    0490: [3] 44 ......................... load0 
    0491: [4] 7c ......................... getObjNameExpr 
    0492: [2] b8 14 ...................... putLocalSlot <slot: 10> 
    0494: [1] 33 18 b4 09 e0 e5 01 ....... debug 

    # ejs.db.mapper/Record.es:602                             from += " LEFT OUTER JOIN " + model._tableName

    0501: [1] 60 ......................... getLocalSlot5 
    0502: [2] 56 f6 e6 01 ................ loadString < LEFT OUTER JOIN > 
    0506: [3] 7f 14 ...................... getLocalSlot <slot: 10> 
    0508: [4] 7b a0 13 00 ................ getObjName <_tableName> <> 
    0512: [4] 00 ......................... add 
    0513: [3] 00 ......................... add 
    0514: [2] 99 ......................... putLocalSlot5 
    0515: [1] 33 18 b6 09 9a e7 01 ....... debug 

    # ejs.db.mapper/Record.es:603                             from += " ON " + entry[1]

    0522: [1] 60 ......................... getLocalSlot5 
    0523: [2] 56 86 e8 01 ................ loadString < ON > 
    0527: [3] 7f 16 ...................... getLocalSlot <slot: 11> 
    0529: [4] 56 80 2e ................... loadString <> 
    0532: [5] 45 ......................... load1 
    0533: [6] 7c ......................... getObjNameExpr 
    0534: [4] 00 ......................... add 
    0535: [3] 00 ......................... add 
    0536: [2] 99 ......................... putLocalSlot5 
    0537: [1] 3e 27 ...................... goto8 <addr: 578> 
    0539: [1] 33 18 b8 09 90 e8 01 ....... debug 

    # ejs.db.mapper/Record.es:604                         } else {

    0546: [1] 33 18 ba 09 d2 e8 01 ....... debug 

    # ejs.db.mapper/Record.es:605                             model = entry

    0553: [1] 7f 16 ...................... getLocalSlot <slot: 11> 
    0555: [2] b8 14 ...................... putLocalSlot <slot: 10> 
    0557: [1] 33 18 bc 09 e0 e5 01 ....... debug 

    # ejs.db.mapper/Record.es:606                             from += " LEFT OUTER JOIN " + model._tableName

    0564: [1] 60 ......................... getLocalSlot5 
    0565: [2] 56 f6 e6 01 ................ loadString < LEFT OUTER JOIN > 
    0569: [3] 7f 14 ...................... getLocalSlot <slot: 10> 
    0571: [4] 7b a0 13 00 ................ getObjName <_tableName> <> 
    0575: [4] 00 ......................... add 
    0576: [3] 00 ......................... add 
    0577: [2] 99 ......................... putLocalSlot5 
    0578: [1] 3e 85 ...................... goto8 <addr: 457> 
    0580: [1] 90 ......................... pop 
    0581: [0] 3e 2b ...................... goto8 <addr: 626> 
    0583: [0] 33 18 c2 09 c2 79 .......... debug 

    # ejs.db.mapper/Record.es:609                 } else {

    0589: [0] 33 18 c4 09 a6 e9 01 ....... debug 

    # ejs.db.mapper/Record.es:610                     model = options.include

    0596: [0] 5d ......................... getLocalSlot2 
    0597: [1] 7b 96 85 01 80 2e .......... getObjName <include> <> 
    0603: [1] b8 14 ...................... putLocalSlot <slot: 10> 
    0605: [0] 33 18 c6 09 fe e9 01 ....... debug 

    # ejs.db.mapper/Record.es:611                     from += " LEFT OUTER JOIN " + model._tableName

    0612: [0] 60 ......................... getLocalSlot5 
    0613: [1] 56 f6 e6 01 ................ loadString < LEFT OUTER JOIN > 
    0617: [2] 7f 14 ...................... getLocalSlot <slot: 10> 
    0619: [3] 7b a0 13 00 ................ getObjName <_tableName> <> 
    0623: [3] 00 ......................... add 
    0624: [2] 00 ......................... add 
    0625: [1] 99 ......................... putLocalSlot5 
    0626: [0] 3e 00 ...................... goto8 <addr: 628> 
    0628: [0] 33 18 d0 09 bc 86 01 ....... debug 

    # ejs.db.mapper/Record.es:616             if (options.depth != 0) {

    0635: [0] 5d ......................... getLocalSlot2 
    0636: [1] 7b 9c 83 01 80 2e .......... getObjName <depth> <> 
    0642: [1] 44 ......................... load0 
    0643: [2] 2c ......................... compareNe 
    0644: [1] 07 d4 03 f7 f7 ............. branchFalse <addr: 883> 
    0649: [0] 33 18 d2 09 88 87 01 ....... debug 

    # ejs.db.mapper/Record.es:617                 if (_belongsTo) {

    0656: [0] 83 3a 02 ................... getThisTypeSlot <slot: 29> <1> 
    0659: [1] 07 b2 03 f7 f7 ............. branchFalse <addr: 881> 
    0664: [0] 33 18 d4 09 84 eb 01 ....... debug 

    # ejs.db.mapper/Record.es:618                     conditions = " ON "

    0671: [0] 56 86 e8 01 ................ loadString < ON > 
    0675: [1] 9a ......................... putLocalSlot6 
    0676: [0] 33 18 d6 09 d4 eb 01 ....... debug 

    # ejs.db.mapper/Record.es:619                     for each (let owner in _belongsTo) {

    0683: [0] 83 3a 02 ................... getThisTypeSlot <slot: 29> <1> 
    0686: [1] 18 18 00 ................... callObjSlot <slot: 12> <argc: 0> 
    0689: [0] 93 ......................... pushResult 
    0690: [1] 39 ......................... dup 
    0691: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0694: [1] 93 ......................... pushResult 
    0695: [2] b8 18 ...................... putLocalSlot <slot: 12> 
    0697: [1] 33 18 d8 09 de ec 01 ....... debug 

    # ejs.db.mapper/Record.es:620                         from += " INNER JOIN " + owner._tableName

    0704: [1] 60 ......................... getLocalSlot5 
    0705: [2] 56 e2 ed 01 ................ loadString < INNER JOIN > 
    0709: [3] 7f 18 ...................... getLocalSlot <slot: 12> 
    0711: [4] 7b a0 13 00 ................ getObjName <_tableName> <> 
    0715: [4] 00 ......................... add 
    0716: [3] 00 ......................... add 
    0717: [2] 99 ......................... putLocalSlot5 
    0718: [1] 3e e2 ...................... goto8 <addr: 690> 
    0720: [1] 90 ......................... pop 
    0721: [0] 33 18 dc 09 d4 eb 01 ....... debug 

    # ejs.db.mapper/Record.es:622                     for each (let owner in _belongsTo) {

    0728: [0] 83 3a 02 ................... getThisTypeSlot <slot: 29> <1> 
    0731: [1] 18 18 00 ................... callObjSlot <slot: 12> <argc: 0> 
    0734: [0] 93 ......................... pushResult 
    0735: [1] 39 ......................... dup 
    0736: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0739: [1] 93 ......................... pushResult 
    0740: [2] b8 1a ...................... putLocalSlot <slot: 13> 
    0742: [1] 33 18 de 09 a0 ee 01 ....... debug 

    # ejs.db.mapper/Record.es:623                         let tname: String = Reflect(owner).name

    0749: [1] 7f 1a ...................... getLocalSlot <slot: 13> 
    0751: [2] 17 de 01 02 ................ callGlobalSlot <slot: 111> <argc: 1> 
    0755: [1] 93 ......................... pushResult 
    0756: [2] 7b a0 2d d6 02 ............. getObjName <name> <public> 
    0761: [2] b8 1c ...................... putLocalSlot <slot: 14> 
    0763: [1] 33 18 e0 09 a0 ef 01 ....... debug 

    # ejs.db.mapper/Record.es:624                         tname = tname[0].toLower() + tname.slice(1) + "Id"

    0770: [1] 7f 1c ...................... getLocalSlot <slot: 14> 
    0772: [2] 56 80 2e ................... loadString <> 
    0775: [3] 44 ......................... load0 
    0776: [4] 7c ......................... getObjNameExpr 
    0777: [2] 1e aa 65 00 00 ............. callObjName <toLower> <> <argc: 0> 
    0782: [1] 93 ......................... pushResult 
    0783: [2] 7f 1c ...................... getLocalSlot <slot: 14> 
    0785: [3] 45 ......................... load1 
    0786: [4] 18 6e 02 ................... callObjSlot <slot: 55> <argc: 1> 
    0789: [2] 93 ......................... pushResult 
    0790: [3] 00 ......................... add 
    0791: [2] 56 b6 f0 01 ................ loadString <Id> 
    0795: [3] 00 ......................... add 
    0796: [2] b8 1c ...................... putLocalSlot <slot: 14> 
    0798: [1] 33 18 e2 09 bc f0 01 ....... debug 

    # ejs.db.mapper/Record.es:625                         conditions += _tableName + "." + tname + " = " + owner._tableName + "." + owner._keyName + " AND "

    0805: [1] 61 ......................... getLocalSlot6 
    0806: [2] 83 4c 02 ................... getThisTypeSlot <slot: 38> <1> 
    0809: [3] 56 b2 f2 01 ................ loadString <.> 
    0813: [4] 00 ......................... add 
    0814: [3] 7f 1c ...................... getLocalSlot <slot: 14> 
    0816: [4] 00 ......................... add 
    0817: [3] 56 b0 8e 01 ................ loadString < = > 
    0821: [4] 00 ......................... add 
    0822: [3] 7f 1a ...................... getLocalSlot <slot: 13> 
    0824: [4] 7b a0 13 00 ................ getObjName <_tableName> <> 
    0828: [4] 00 ......................... add 
    0829: [3] 56 b2 f2 01 ................ loadString <.> 
    0833: [4] 00 ......................... add 
    0834: [3] 7f 1a ...................... getLocalSlot <slot: 13> 
    0836: [4] 7b b8 10 00 ................ getObjName <_keyName> <> 
    0840: [4] 00 ......................... add 
    0841: [3] 56 b6 f2 01 ................ loadString < AND > 
    0845: [4] 00 ......................... add 
    0846: [3] 00 ......................... add 
    0847: [2] 9a ......................... putLocalSlot6 
    0848: [1] 3e 8d ...................... goto8 <addr: 735> 
    0850: [1] 90 ......................... pop 
    0851: [0] 33 18 e6 09 c2 f2 01 ....... debug 

    # ejs.db.mapper/Record.es:627                     if (conditions == " ON ") {

    0858: [0] 61 ......................... getLocalSlot6 
    0859: [1] 56 86 e8 01 ................ loadString < ON > 
    0863: [2] 25 ......................... compareEq 
    0864: [1] 13 0d ...................... branchFalse8 <addr: 879> 
    0866: [0] 33 18 e8 09 a2 f3 01 ....... debug 

    # ejs.db.mapper/Record.es:628                         conditions = ""

    0873: [0] 56 80 2e ................... loadString <> 
    0876: [1] 9a ......................... putLocalSlot6 
    0877: [0] 3e 00 ...................... goto8 <addr: 879> 
    0879: [0] 3e 00 ...................... goto8 <addr: 881> 
    0881: [0] 3e 00 ...................... goto8 <addr: 883> 
    0883: [0] 33 18 f2 09 f2 f3 01 ....... debug 

    # ejs.db.mapper/Record.es:633             if (options.joins) {

    0890: [0] 5d ......................... getLocalSlot2 
    0891: [1] 7b b4 f4 01 80 2e .......... getObjName <joins> <> 
    0897: [1] 07 fe 01 f7 f7 ............. branchFalse <addr: 1029> 
    0902: [0] 33 18 f4 09 c0 f4 01 ....... debug 

    # ejs.db.mapper/Record.es:634                 if (conditions == "") {

    0909: [0] 61 ......................... getLocalSlot6 
    0910: [1] 56 80 2e ................... loadString <> 
    0913: [2] 25 ......................... compareEq 
    0914: [1] 13 0e ...................... branchFalse8 <addr: 930> 
    0916: [0] 33 18 f6 09 84 eb 01 ....... debug 

    # ejs.db.mapper/Record.es:635                     conditions = " ON "

    0923: [0] 56 86 e8 01 ................ loadString < ON > 
    0927: [1] 9a ......................... putLocalSlot6 
    0928: [0] 3e 00 ...................... goto8 <addr: 930> 
    0930: [0] 33 18 f8 09 b4 61 .......... debug 

    # ejs.db.mapper/Record.es:636                 }

    0936: [0] 33 18 fa 09 b4 f5 01 ....... debug 

    # ejs.db.mapper/Record.es:637                 let parts: Array = options.joins.split(/ ON | on /)

    0943: [0] 5d ......................... getLocalSlot2 
    0944: [1] 7b b4 f4 01 80 2e .......... getObjName <joins> <> 
    0950: [1] 55 bc f6 01 ................ loadRegexp </ ON | on /> 
    0954: [2] 1e d4 f6 01 00 02 .......... callObjName <split> <> <argc: 1> 
    0960: [0] 93 ......................... pushResult 
    0961: [1] b8 1e ...................... putLocalSlot <slot: 15> 
    0963: [0] 33 18 fc 09 e0 f6 01 ....... debug 

    # ejs.db.mapper/Record.es:638                 from += " " + parts[0]

    0970: [0] 60 ......................... getLocalSlot5 
    0971: [1] 56 ae f7 01 ................ loadString < > 
    0975: [2] 7f 1e ...................... getLocalSlot <slot: 15> 
    0977: [3] 56 80 2e ................... loadString <> 
    0980: [4] 44 ......................... load0 
    0981: [5] 7c ......................... getObjNameExpr 
    0982: [3] 00 ......................... add 
    0983: [2] 00 ......................... add 
    0984: [1] 99 ......................... putLocalSlot5 
    0985: [0] 33 18 fe 09 b2 f7 01 ....... debug 

    # ejs.db.mapper/Record.es:639                 if (parts.length > 1) {

    0992: [0] 7f 1e ...................... getLocalSlot <slot: 15> 
    0994: [1] 7b 8e 53 d6 02 ............. getObjName <length> <public> 
    0999: [1] 45 ......................... load1 
    1000: [2] 29 ......................... compareGt 
    1001: [1] 13 18 ...................... branchFalse8 <addr: 1027> 
    1003: [0] 33 18 80 0a 82 f8 01 ....... debug 

    # ejs.db.mapper/Record.es:640                     conditions += parts[1] + " AND "

    1010: [0] 61 ......................... getLocalSlot6 
    1011: [1] 7f 1e ...................... getLocalSlot <slot: 15> 
    1013: [2] 56 80 2e ................... loadString <> 
    1016: [3] 45 ......................... load1 
    1017: [4] 7c ......................... getObjNameExpr 
    1018: [2] 56 b6 f2 01 ................ loadString < AND > 
    1022: [3] 00 ......................... add 
    1023: [2] 00 ......................... add 
    1024: [1] 9a ......................... putLocalSlot6 
    1025: [0] 3e 00 ...................... goto8 <addr: 1027> 
    1027: [0] 3e 00 ...................... goto8 <addr: 1029> 
    1029: [0] 33 18 84 0a 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:642             }

    1036: [0] 33 18 86 0a ec f8 01 ....... debug 

    # ejs.db.mapper/Record.es:643             conditions = conditions.trim(" AND ")

    1043: [0] 61 ......................... getLocalSlot6 
    1044: [1] 56 b6 f2 01 ................ loadString < AND > 
    1048: [2] 18 7e 02 ................... callObjSlot <slot: 63> <argc: 1> 
    1051: [0] 93 ......................... pushResult 
    1052: [1] 9a ......................... putLocalSlot6 
    1053: [0] 33 18 8a 0a d0 f9 01 ....... debug 

    # ejs.db.mapper/Record.es:645             if (options.conditions) {

    1060: [0] 5d ......................... getLocalSlot2 
    1061: [1] 7b 9a 8e 01 80 2e .......... getObjName <conditions> <> 
    1067: [1] 07 da 05 f7 f7 ............. branchFalse <addr: 1437> 
    1072: [0] 33 18 8c 0a d4 fa 01 ....... debug 

    # ejs.db.mapper/Record.es:646                 let whereConditions: String = " WHERE "

    1079: [0] 56 fe b7 01 ................ loadString < WHERE > 
    1083: [1] b8 20 ...................... putLocalSlot <slot: 16> 
    1085: [0] 33 18 8e 0a c4 fb 01 ....... debug 

    # ejs.db.mapper/Record.es:647                 if (options.conditions is Array) {

    1092: [0] 5d ......................... getLocalSlot2 
    1093: [1] 7b 9a 8e 01 80 2e .......... getObjName <conditions> <> 
    1099: [1] 7e 0a ...................... getGlobalSlot <slot: 5> 
    1101: [2] 43 ......................... isA 
    1102: [1] 13 56 ...................... branchFalse8 <addr: 1190> 
    1104: [0] 33 18 90 0a aa fc 01 ....... debug 

    # ejs.db.mapper/Record.es:648                     for each (cond in options.conditions) {

    1111: [0] 5d ......................... getLocalSlot2 
    1112: [1] 7b 9a 8e 01 80 2e .......... getObjName <conditions> <> 
    1118: [1] 1e 96 e4 01 cc 36 00 ....... callObjName <getValues> <iterator> <argc: 0> 
    1125: [0] 93 ......................... pushResult 
    1126: [1] 39 ......................... dup 
    1127: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    1130: [1] 93 ......................... pushResult 
    1131: [2] b8 22 ...................... putLocalSlot <slot: 17> 
    1133: [1] 33 18 92 0a c4 fd 01 ....... debug 

    # ejs.db.mapper/Record.es:649                         whereConditions += cond + " " + " AND "

    1140: [1] 7f 20 ...................... getLocalSlot <slot: 16> 
    1142: [2] 7f 22 ...................... getLocalSlot <slot: 17> 
    1144: [3] 56 ae f7 01 ................ loadString < > 
    1148: [4] 00 ......................... add 
    1149: [3] 56 b6 f2 01 ................ loadString < AND > 
    1153: [4] 00 ......................... add 
    1154: [3] 00 ......................... add 
    1155: [2] b8 20 ...................... putLocalSlot <slot: 16> 
    1157: [1] 3e df ...................... goto8 <addr: 1126> 
    1159: [1] 90 ......................... pop 
    1160: [0] 33 18 94 0a ba 68 .......... debug 

    # ejs.db.mapper/Record.es:650                     }

    1166: [0] 33 18 96 0a c4 fe 01 ....... debug 

    # ejs.db.mapper/Record.es:651                     whereConditions = whereConditions.trim(" AND ")

    1173: [0] 7f 20 ...................... getLocalSlot <slot: 16> 
    1175: [1] 56 b6 f2 01 ................ loadString < AND > 
    1179: [2] 18 7e 02 ................... callObjSlot <slot: 63> <argc: 1> 
    1182: [0] 93 ......................... pushResult 
    1183: [1] b8 20 ...................... putLocalSlot <slot: 16> 
    1185: [0] 3d 9c 02 f7 f7 ............. goto <addr: 1332> 
    1190: [0] 33 18 9a 0a cc ff 01 ....... debug 

    # ejs.db.mapper/Record.es:653                 } else if (options.conditions is String) {

    1197: [0] 5d ......................... getLocalSlot2 
    1198: [1] 7b 9a 8e 01 80 2e .......... getObjName <conditions> <> 
    1204: [1] 7e e8 01 ................... getGlobalSlot <slot: 116> 
    1207: [2] 43 ......................... isA 
    1208: [1] 13 1a ...................... branchFalse8 <addr: 1236> 
    1210: [0] 33 18 9c 0a c2 80 02 ....... debug 

    # ejs.db.mapper/Record.es:654                     whereConditions += options.conditions + " " 

    1217: [0] 7f 20 ...................... getLocalSlot <slot: 16> 
    1219: [1] 5d ......................... getLocalSlot2 
    1220: [2] 7b 9a 8e 01 80 2e .......... getObjName <conditions> <> 
    1226: [2] 56 ae f7 01 ................ loadString < > 
    1230: [3] 00 ......................... add 
    1231: [2] 00 ......................... add 
    1232: [1] b8 20 ...................... putLocalSlot <slot: 16> 
    1234: [0] 3e 60 ...................... goto8 <addr: 1332> 
    1236: [0] 33 18 a0 0a c4 81 02 ....... debug 

    # ejs.db.mapper/Record.es:656                 } else if (options.conditions is Object) {

    1243: [0] 5d ......................... getLocalSlot2 
    1244: [1] 7b 9a 8e 01 80 2e .......... getObjName <conditions> <> 
    1250: [1] 7e d8 01 ................... getGlobalSlot <slot: 108> 
    1253: [2] 43 ......................... isA 
    1254: [1] 13 4c ...................... branchFalse8 <addr: 1332> 
    1256: [0] 33 18 a2 0a ba 82 02 ....... debug 

    # ejs.db.mapper/Record.es:657                     for (field in options.conditions) {

    1263: [0] 5d ......................... getLocalSlot2 
    1264: [1] 7b 9a 8e 01 80 2e .......... getObjName <conditions> <> 
    1270: [1] 1e 9c 5e cc 36 00 .......... callObjName <get> <iterator> <argc: 0> 
    1276: [0] 93 ......................... pushResult 
    1277: [1] 39 ......................... dup 
    1278: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    1281: [1] 93 ......................... pushResult 
    1282: [2] b8 24 ...................... putLocalSlot <slot: 18> 
    1284: [1] 33 18 a6 0a c2 83 02 ....... debug 

    # ejs.db.mapper/Record.es:659                         whereConditions += field + " = '" + options.conditions[field] + "' " + " AND "

    1291: [1] 7f 20 ...................... getLocalSlot <slot: 16> 
    1293: [2] 7f 24 ...................... getLocalSlot <slot: 18> 
    1295: [3] 56 90 85 02 ................ loadString < = '> 
    1299: [4] 00 ......................... add 
    1300: [3] 5d ......................... getLocalSlot2 
    1301: [4] 7b 9a 8e 01 80 2e .......... getObjName <conditions> <> 
    1307: [4] 56 80 2e ................... loadString <> 
    1310: [5] 7f 24 ...................... getLocalSlot <slot: 18> 
    1312: [6] 7c ......................... getObjNameExpr 
    1313: [4] 00 ......................... add 
    1314: [3] 56 9a 85 02 ................ loadString <' > 
    1318: [4] 00 ......................... add 
    1319: [3] 56 b6 f2 01 ................ loadString < AND > 
    1323: [4] 00 ......................... add 
    1324: [3] 00 ......................... add 
    1325: [2] b8 20 ...................... putLocalSlot <slot: 16> 
    1327: [1] 3e cc ...................... goto8 <addr: 1277> 
    1329: [1] 90 ......................... pop 
    1330: [0] 3e 00 ...................... goto8 <addr: 1332> 
    1332: [0] 33 18 aa 0a b4 61 .......... debug 

    # ejs.db.mapper/Record.es:661                 }

    1338: [0] 33 18 ac 0a a0 85 02 ....... debug 

    # ejs.db.mapper/Record.es:662                 whereConditions = whereConditions.trim(" AND ")

    1345: [0] 7f 20 ...................... getLocalSlot <slot: 16> 
    1347: [1] 56 b6 f2 01 ................ loadString < AND > 
    1351: [2] 18 7e 02 ................... callObjSlot <slot: 63> <argc: 1> 
    1354: [0] 93 ......................... pushResult 
    1355: [1] b8 20 ...................... putLocalSlot <slot: 16> 
    1357: [0] 33 18 ae 0a a0 86 02 ....... debug 

    # ejs.db.mapper/Record.es:663                 if (whereConditions != " WHERE ") {

    1364: [0] 7f 20 ...................... getLocalSlot <slot: 16> 
    1366: [1] 56 fe b7 01 ................ loadString < WHERE > 
    1370: [2] 2c ......................... compareNe 
    1371: [1] 13 1b ...................... branchFalse8 <addr: 1400> 
    1373: [0] 33 18 b0 0a 88 87 02 ....... debug 

    # ejs.db.mapper/Record.es:664                     where = true

    1380: [0] 50 ......................... loadGlobal 
    1381: [1] 7b ba 65 02 ................ getObjName <true> <ejs> 
    1385: [1] 9b ......................... putLocalSlot7 
    1386: [0] 33 18 b2 0a ca 87 02 ....... debug 

    # ejs.db.mapper/Record.es:665                     conditions += whereConditions

    1393: [0] 61 ......................... getLocalSlot6 
    1394: [1] 7f 20 ...................... getLocalSlot <slot: 16> 
    1396: [2] 00 ......................... add 
    1397: [1] 9a ......................... putLocalSlot6 
    1398: [0] 3e 23 ...................... goto8 <addr: 1435> 
    1400: [0] 33 18 b4 0a c2 79 .......... debug 

    # ejs.db.mapper/Record.es:666                 } else {

    1406: [0] 33 18 b6 0a ae 88 02 ....... debug 

    # ejs.db.mapper/Record.es:667                     whereConditions = ""

    1413: [0] 56 80 2e ................... loadString <> 
    1416: [1] b8 20 ...................... putLocalSlot <slot: 16> 
    1418: [0] 33 18 b8 0a 80 89 02 ....... debug 

    # ejs.db.mapper/Record.es:668                     from = from.trim(" AND ")

    1425: [0] 60 ......................... getLocalSlot5 
    1426: [1] 56 b6 f2 01 ................ loadString < AND > 
    1430: [2] 18 7e 02 ................... callObjSlot <slot: 63> <argc: 1> 
    1433: [0] 93 ......................... pushResult 
    1434: [1] 99 ......................... putLocalSlot5 
    1435: [0] 3e 17 ...................... goto8 <addr: 1460> 
    1437: [0] 33 18 be 0a ee 58 .......... debug 

    # ejs.db.mapper/Record.es:671             } else {

    1443: [0] 33 18 c0 0a dc 89 02 ....... debug 

    # ejs.db.mapper/Record.es:672                 from = from.trim(" AND ")

    1450: [0] 60 ......................... getLocalSlot5 
    1451: [1] 56 b6 f2 01 ................ loadString < AND > 
    1455: [2] 18 7e 02 ................... callObjSlot <slot: 63> <argc: 1> 
    1458: [0] 93 ......................... pushResult 
    1459: [1] 99 ......................... putLocalSlot5 
    1460: [0] 33 18 c6 0a b0 8a 02 ....... debug 

    # ejs.db.mapper/Record.es:675             if (key || options.key) {

    1467: [0] 5b ......................... getLocalSlot0 
    1468: [1] 39 ......................... dup 
    1469: [2] 14 07 ...................... branchTrue8 <addr: 1478> 
    1471: [1] 90 ......................... pop 
    1472: [0] 5d ......................... getLocalSlot2 
    1473: [1] 7b b4 44 80 2e ............. getObjName <key> <> 
    1478: [1] 13 6c ...................... branchFalse8 <addr: 1588> 
    1480: [0] 33 18 c8 0a fc 8a 02 ....... debug 

    # ejs.db.mapper/Record.es:676                 if (!where) {

    1487: [0] 62 ......................... getLocalSlot7 
    1488: [1] 86 ......................... logicalNot 
    1489: [1] 13 1d ...................... branchFalse8 <addr: 1520> 
    1491: [0] 33 18 ca 0a b8 8b 02 ....... debug 

    # ejs.db.mapper/Record.es:677                     conditions += " WHERE "

    1498: [0] 61 ......................... getLocalSlot6 
    1499: [1] 56 fe b7 01 ................ loadString < WHERE > 
    1503: [2] 00 ......................... add 
    1504: [1] 9a ......................... putLocalSlot6 
    1505: [0] 33 18 cc 0a 88 87 02 ....... debug 

    # ejs.db.mapper/Record.es:678                     where = true

    1512: [0] 50 ......................... loadGlobal 
    1513: [1] 7b ba 65 02 ................ getObjName <true> <ejs> 
    1517: [1] 9b ......................... putLocalSlot7 
    1518: [0] 3e 14 ...................... goto8 <addr: 1540> 
    1520: [0] 33 18 ce 0a c2 79 .......... debug 

    # ejs.db.mapper/Record.es:679                 } else {

    1526: [0] 33 18 d0 0a 90 8c 02 ....... debug 

    # ejs.db.mapper/Record.es:680                     conditions += " AND "

    1533: [0] 61 ......................... getLocalSlot6 
    1534: [1] 56 b6 f2 01 ................ loadString < AND > 
    1538: [2] 00 ......................... add 
    1539: [1] 9a ......................... putLocalSlot6 
    1540: [0] 33 18 d2 0a b4 61 .......... debug 

    # ejs.db.mapper/Record.es:681                 }

    1546: [0] 33 18 d4 0a e4 8c 02 ....... debug 

    # ejs.db.mapper/Record.es:682                 conditions += (_tableName + "." + _keyName + " = ") + ((key) ? key : options.key)

    1553: [0] 61 ......................... getLocalSlot6 
    1554: [1] 83 4c 02 ................... getThisTypeSlot <slot: 38> <1> 
    1557: [2] 56 b2 f2 01 ................ loadString <.> 
    1561: [3] 00 ......................... add 
    1562: [2] 83 48 02 ................... getThisTypeSlot <slot: 36> <1> 
    1565: [3] 00 ......................... add 
    1566: [2] 56 b0 8e 01 ................ loadString < = > 
    1570: [3] 00 ......................... add 
    1571: [2] 5b ......................... getLocalSlot0 
    1572: [3] 13 03 ...................... branchFalse8 <addr: 1577> 
    1574: [2] 5b ......................... getLocalSlot0 
    1575: [3] 3e 06 ...................... goto8 <addr: 1583> 
    1577: [3] 5d ......................... getLocalSlot2 
    1578: [4] 7b b4 44 80 2e ............. getObjName <key> <> 
    1583: [4] 00 ......................... add 
    1584: [3] 00 ......................... add 
    1585: [2] 9a ......................... putLocalSlot6 
    1586: [1] 3e 00 ...................... goto8 <addr: 1588> 
    1588: [1] 33 18 d6 0a 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:683             }

    1595: [1] 33 18 dc 0a a8 8e 02 ....... debug 

    # ejs.db.mapper/Record.es:686             cmd = "SELECT " + Database.quote(columns) + " FROM " + from + conditions

    1602: [1] 56 d2 8f 02 ................ loadString <SELECT > 
    1606: [2] 50 ......................... loadGlobal 
    1607: [3] 7b 9a 0d 0a ................ getObjName <Database> <ejs.db> 
    1611: [3] 5f ......................... getLocalSlot4 
    1612: [4] 1c 74 00 02 ................ callObjStaticSlot <slot: 58> <0> <argc: 1> 
    1616: [2] 93 ......................... pushResult 
    1617: [3] 00 ......................... add 
    1618: [2] 56 e2 8f 02 ................ loadString < FROM > 
    1622: [3] 00 ......................... add 
    1623: [2] 60 ......................... getLocalSlot5 
    1624: [3] 00 ......................... add 
    1625: [2] 61 ......................... getLocalSlot6 
    1626: [3] 00 ......................... add 
    1627: [2] 97 ......................... putLocalSlot3 
    1628: [1] 33 18 de 0a f0 8f 02 ....... debug 

    # ejs.db.mapper/Record.es:687             if (options.group) {

    1635: [1] 5d ......................... getLocalSlot2 
    1636: [2] 7b b2 90 02 80 2e .......... getObjName <group> <> 
    1642: [2] 13 18 ...................... branchFalse8 <addr: 1668> 
    1644: [1] 33 18 e0 0a be 90 02 ....... debug 

    # ejs.db.mapper/Record.es:688                 cmd += " GROUP BY " + options.group

    1651: [1] 5e ......................... getLocalSlot3 
    1652: [2] 56 a6 91 02 ................ loadString < GROUP BY > 
    1656: [3] 5d ......................... getLocalSlot2 
    1657: [4] 7b b2 90 02 80 2e .......... getObjName <group> <> 
    1663: [4] 00 ......................... add 
    1664: [3] 00 ......................... add 
    1665: [2] 97 ......................... putLocalSlot3 
    1666: [1] 3e 00 ...................... goto8 <addr: 1668> 
    1668: [1] 33 18 e4 0a bc 91 02 ....... debug 

    # ejs.db.mapper/Record.es:690             if (options.order) {

    1675: [1] 5d ......................... getLocalSlot2 
    1676: [2] 7b fe 91 02 80 2e .......... getObjName <order> <> 
    1682: [2] 13 18 ...................... branchFalse8 <addr: 1708> 
    1684: [1] 33 18 e6 0a 8a 92 02 ....... debug 

    # ejs.db.mapper/Record.es:691                 cmd += " ORDER BY " + options.order

    1691: [1] 5e ......................... getLocalSlot3 
    1692: [2] 56 f2 92 02 ................ loadString < ORDER BY > 
    1696: [3] 5d ......................... getLocalSlot2 
    1697: [4] 7b fe 91 02 80 2e .......... getObjName <order> <> 
    1703: [4] 00 ......................... add 
    1704: [3] 00 ......................... add 
    1705: [2] 97 ......................... putLocalSlot3 
    1706: [1] 3e 00 ...................... goto8 <addr: 1708> 
    1708: [1] 33 18 ea 0a 88 93 02 ....... debug 

    # ejs.db.mapper/Record.es:693             if (limit) {

    1715: [1] 5c ......................... getLocalSlot1 
    1716: [2] 13 12 ...................... branchFalse8 <addr: 1736> 
    1718: [1] 33 18 ec 0a ba 93 02 ....... debug 

    # ejs.db.mapper/Record.es:694                 cmd += " LIMIT " + limit

    1725: [1] 5e ......................... getLocalSlot3 
    1726: [2] 56 8c 94 02 ................ loadString < LIMIT > 
    1730: [3] 5c ......................... getLocalSlot1 
    1731: [4] 00 ......................... add 
    1732: [3] 00 ......................... add 
    1733: [2] 97 ......................... putLocalSlot3 
    1734: [1] 3e 28 ...................... goto8 <addr: 1776> 
    1736: [1] 33 18 ee 0a 9c 94 02 ....... debug 

    # ejs.db.mapper/Record.es:695             } else if (options.limit) {

    1743: [1] 5d ......................... getLocalSlot2 
    1744: [2] 7b ec 94 02 80 2e .......... getObjName <limit> <> 
    1750: [2] 13 18 ...................... branchFalse8 <addr: 1776> 
    1752: [1] 33 18 f0 0a f8 94 02 ....... debug 

    # ejs.db.mapper/Record.es:696                 cmd += " LIMIT " + options.limit

    1759: [1] 5e ......................... getLocalSlot3 
    1760: [2] 56 8c 94 02 ................ loadString < LIMIT > 
    1764: [3] 5d ......................... getLocalSlot2 
    1765: [4] 7b ec 94 02 80 2e .......... getObjName <limit> <> 
    1771: [4] 00 ......................... add 
    1772: [3] 00 ......................... add 
    1773: [2] 97 ......................... putLocalSlot3 
    1774: [1] 3e 00 ...................... goto8 <addr: 1776> 
    1776: [1] 33 18 f4 0a da 95 02 ....... debug 

    # ejs.db.mapper/Record.es:698             if (options.offset) {

    1783: [1] 5d ......................... getLocalSlot2 
    1784: [2] 7b 9e 96 02 80 2e .......... getObjName <offset> <> 
    1790: [2] 13 18 ...................... branchFalse8 <addr: 1816> 
    1792: [1] 33 18 f6 0a ac 96 02 ....... debug 

    # ejs.db.mapper/Record.es:699                 cmd += " OFFSET " + options.offset

    1799: [1] 5e ......................... getLocalSlot3 
    1800: [2] 56 92 97 02 ................ loadString < OFFSET > 
    1804: [3] 5d ......................... getLocalSlot2 
    1805: [4] 7b 9e 96 02 80 2e .......... getObjName <offset> <> 
    1811: [4] 00 ......................... add 
    1812: [3] 00 ......................... add 
    1813: [2] 97 ......................... putLocalSlot3 
    1814: [1] 3e 00 ...................... goto8 <addr: 1816> 
    1816: [1] 33 18 f8 0a 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:700             }

    1823: [1] 33 18 fa 0a a4 97 02 ....... debug 

    # ejs.db.mapper/Record.es:701             cmd += ";"

    1830: [1] 5e ......................... getLocalSlot3 
    1831: [2] 56 d2 97 02 ................ loadString <;> 
    1835: [3] 00 ......................... add 
    1836: [2] 97 ......................... putLocalSlot3 
    1837: [1] 33 18 fe 0a d6 97 02 ....... debug 

    # ejs.db.mapper/Record.es:703             if (_db == null) {

    1844: [1] 83 44 02 ................... getThisTypeSlot <slot: 34> <1> 
    1847: [2] 50 ......................... loadGlobal 
    1848: [3] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    1852: [3] 25 ......................... compareEq 
    1853: [2] 13 13 ...................... branchFalse8 <addr: 1874> 
    1855: [1] 33 18 80 0b 94 98 02 ....... debug 

    # ejs.db.mapper/Record.es:704                 throw new Error("Database connection has not yet been established")

    1862: [1] 7e 2c ...................... getGlobalSlot <slot: 22> 
    1864: [2] 89 ......................... new 
    1865: [2] 56 bc 99 02 ................ loadString <Database connection has not yet been established> 
    1869: [3] 20 02 ...................... callConstructor <argc: 1> 
    1871: [2] c6 ......................... throw 
    1872: [2] 3e 00 ...................... goto8 <addr: 1874> 
    1874: [2] 33 18 82 0b 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:705             }

    1881: [2] 33 18 86 0b 9e 9a 02 ....... debug 

    # ejs.db.mapper/Record.es:707             let results: Array

    1888: [2] 33 18 88 0b dc 9a 02 ....... debug 

    # ejs.db.mapper/Record.es:708             try {

    1895: [2] 8d 28 00 ................... openBlock <slot: 20> <0> 
    1898: [2] 33 18 8c 0b 80 9b 02 ....... debug 

    # ejs.db.mapper/Record.es:710                 if (_trace || 1) {

    1905: [2] 83 4e 02 ................... getThisTypeSlot <slot: 39> <1> 
    1908: [3] 39 ......................... dup 
    1909: [4] 14 02 ...................... branchTrue8 <addr: 1913> 
    1911: [3] 90 ......................... pop 
    1912: [2] 45 ......................... load1 
    1913: [3] 13 1d ...................... branchFalse8 <addr: 1944> 
    1915: [2] 33 18 90 0b c6 9b 02 ....... debug 

    # ejs.db.mapper/Record.es:712                     results = _db.query(cmd, "find", _trace)

    1922: [2] 83 44 02 ................... getThisTypeSlot <slot: 34> <1> 
    1925: [3] 7d 06 02 ................... getBlockSlot <slot: 3> <1> 
    1928: [4] 56 8a 9b 01 ................ loadString <find> 
    1932: [5] 83 4e 02 ................... getThisTypeSlot <slot: 39> <1> 
    1935: [6] 18 5c 06 ................... callObjSlot <slot: 46> <argc: 3> 
    1938: [2] 93 ......................... pushResult 
    1939: [3] b6 10 02 ................... putBlockSlot <slot: 8> <1> 
    1942: [2] 3e 21 ...................... goto8 <addr: 1977> 
    1944: [2] 33 18 94 0b c2 79 .......... debug 

    # ejs.db.mapper/Record.es:714                 } else {

    1950: [2] 33 18 96 0b c6 9b 02 ....... debug 

    # ejs.db.mapper/Record.es:715                     results = _db.query(cmd, "find", _trace)

    1957: [2] 83 44 02 ................... getThisTypeSlot <slot: 34> <1> 
    1960: [3] 7d 06 02 ................... getBlockSlot <slot: 3> <1> 
    1963: [4] 56 8a 9b 01 ................ loadString <find> 
    1967: [5] 83 4e 02 ................... getThisTypeSlot <slot: 39> <1> 
    1970: [6] 18 5c 06 ................... callObjSlot <slot: 46> <argc: 3> 
    1973: [2] 93 ......................... pushResult 
    1974: [3] b6 10 02 ................... putBlockSlot <slot: 8> <1> 
    1977: [2] 24 ......................... closeBlock 
    1978: [2] 3e 17 ...................... goto8 <addr: 2003> 
    1980: [2] 33 18 9c 0b f6 9c 02 ....... debug 

    # ejs.db.mapper/Record.es:718             catch (e) {

    1987: [2] 92 ......................... pushCatchArg 
    1988: [3] b6 2a 02 ................... putBlockSlot <slot: 21> <1> 
    1991: [2] 33 18 9e 0b c2 9d 02 ....... debug 

    # ejs.db.mapper/Record.es:719                 throw e

    1998: [2] 7d 2a 02 ................... getBlockSlot <slot: 21> <1> 
    2001: [3] c6 ......................... throw 
    2002: [3] 3c ......................... endException 
    2003: [3] 33 18 a2 0b f2 9d 02 ....... debug 

    # ejs.db.mapper/Record.es:721             return results

    2010: [3] 63 ......................... getLocalSlot8 
    2011: [4] bf ......................... returnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration    458     461        580          580       StopIteration
1   iteration    691     694        720          720       StopIteration
2   iteration    736     739        850          850       StopIteration
3   iteration   1127    1130       1159         1159       StopIteration
4   iteration   1278    1281       1329         1329       StopIteration
5   catch       1888    1980       1980         2003       Void

VARIABLE:   [key-00]  private var key : Object
VARIABLE:   [limit-01]  private var limit : Number
VARIABLE:   [options-02]  private var options : Object
VARIABLE:   [cmd-03]  private var cmd : String
VARIABLE:   [columns-04]  private var columns : Array
VARIABLE:   [from-05]  private var from : String
VARIABLE:   [conditions-06]  private var conditions : String
VARIABLE:   [where-07]  private var where : Boolean
VARIABLE:   [results-08]  private var results : Array
VARIABLE:   [index-09]  -hoisted-9 var index : Number
VARIABLE:   [model-10]  -hoisted-10 var model
VARIABLE:   [entry-11]  -hoisted-11 var entry
VARIABLE:   [owner-12]  -hoisted-12 var owner
VARIABLE:   [owner-13]  -hoisted-13 var owner
VARIABLE:   [tname-14]  -hoisted-13 var tname : String
VARIABLE:   [parts-15]  -hoisted-15 var parts : Array
VARIABLE:   [whereConditions-16]  -hoisted-16 var whereConditions : String
VARIABLE:   [cond-17]  -hoisted-17 var cond
VARIABLE:   [field-18]  -hoisted-18 var field

BLOCK:      [block_0708_121-20]  block_0708_121 (Slots 0)
VARIABLE:   [e-21]  -hoisted-21 var e

FUNCTION:   [Record-76]  [Record,private] const static function makeLazyReader(rec: Record, field: String, model, key: String, options: Object) : Function

     ARG:   [arg-00]   private rec : Record
     ARG:   [arg-01]   private field : String
     ARG:   [arg-02]   private model
     ARG:   [arg-03]   private key : String
     ARG:   [arg-04]   private options : Object
   LOCAL:   [local-05] var --fun_5160--697346038-- : Function
   LOCAL:   [local-06] var lazyReader : Function

    0000: [0] 41 02 02 0e ................ initDefaultArgs8 <2> <4> <16> 
    0004: [0] 33 18 b0 0b fc 9f 02 ....... debug 

    # ejs.db.mapper/Record.es:728                 options: Object = {}): Function {

    0011: [0] 8a e4 06 00 ................ newObject <type: 0x1b2,  ejs::Object> <argc: 0> <att: >
    0015: [1] 98 ......................... putLocalSlot4 
    0016: [0] 33 18 b4 0b e0 a0 02 ....... debug 

    # ejs.db.mapper/Record.es:730             var lazyReader: Function = function(): Object {

    0023: [0] 35 0a 00 ................... defineFunction <slot: 5> <0> 
    0026: [0] 33 18 b0 0b fc 9f 02 ....... debug 

    # ejs.db.mapper/Record.es:728                 options: Object = {}): Function {

    0033: [0] 33 18 ba 0b 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:733             }

    0040: [0] 60 ......................... getLocalSlot5 
    0041: [1] 33 18 b4 0b e0 a0 02 ....... debug 

    # ejs.db.mapper/Record.es:730             var lazyReader: Function = function(): Object {

    0048: [1] 9a ......................... putLocalSlot6 
    0049: [0] 33 18 bc 0b a4 a3 02 ....... debug 

    # ejs.db.mapper/Record.es:734             return makeGetter(lazyReader)

    0056: [0] 61 ......................... getLocalSlot6 
    0057: [1] 17 50 02 ................... callGlobalSlot <slot: 40> <argc: 1> 
    0060: [0] 93 ......................... pushResult 
    0061: [1] bf ......................... returnValue 
    
VARIABLE:   [rec-00]  private var rec : Record
VARIABLE:   [field-01]  private var field : String
VARIABLE:   [model-02]  private var model
VARIABLE:   [key-03]  private var key : String
VARIABLE:   [options-04]  private var options : Object

FUNCTION:   [--fun_5160--697346038---05]  private function --fun_5160--697346038--() : Object


    0000: [0] 33 18 b8 0b d8 a1 02 ....... debug 

    # ejs.db.mapper/Record.es:732                 return cachedRead(rec, field, model, key, options)

    0007: [0] 7d 00 02 ................... getBlockSlot <slot: 0> <1> 
    0010: [1] 7d 02 02 ................... getBlockSlot <slot: 1> <1> 
    0013: [2] 7d 04 02 ................... getBlockSlot <slot: 2> <1> 
    0016: [3] 7d 06 02 ................... getBlockSlot <slot: 3> <1> 
    0019: [4] 7d 08 02 ................... getBlockSlot <slot: 4> <1> 
    0022: [5] 1d 62 02 0a ................ callThisStaticSlot <slot: 49> <1> <argc: 5> 
    0026: [0] 93 ......................... pushResult 
    0027: [1] bf ......................... returnValue 
    
VARIABLE:   [lazyReader-06]  private var lazyReader : Function

FUNCTION:   [Record-77]  [Record,private] const static function mapSqlTypeToEjs(sqlType: String) : Type

     ARG:   [arg-00]   private sqlType : String
   LOCAL:   [local-01] var ejsType : Type

    0000: [0] 33 18 c4 0b ba a5 02 ....... debug 

    # ejs.db.mapper/Record.es:738             sqlType = sqlType.replace(/\(.*/, "")

    0007: [0] 5b ......................... getLocalSlot0 
    0008: [1] 55 9e a6 02 ................ loadRegexp </\(.*/> 
    0012: [2] 56 80 2e ................... loadString <> 
    0015: [3] 18 68 04 ................... callObjSlot <slot: 52> <argc: 2> 
    0018: [0] 93 ......................... pushResult 
    0019: [1] 94 ......................... putLocalSlot0 
    0020: [0] 33 18 c6 0b ac a6 02 ....... debug 

    # ejs.db.mapper/Record.es:739             let ejsType: Type = _db.sqlTypeToEjsType(sqlType)

    0027: [0] 83 44 02 ................... getThisTypeSlot <slot: 34> <1> 
    0030: [1] 5b ......................... getLocalSlot0 
    0031: [2] 18 6c 02 ................... callObjSlot <slot: 54> <argc: 1> 
    0034: [0] 93 ......................... pushResult 
    0035: [1] 95 ......................... putLocalSlot1 
    0036: [0] 33 18 c8 0b a8 a7 02 ....... debug 

    # ejs.db.mapper/Record.es:740             if (ejsType == undefined) {

    0043: [0] 5c ......................... getLocalSlot1 
    0044: [1] 50 ......................... loadGlobal 
    0045: [2] 7b e2 4f 02 ................ getObjName <undefined> <ejs> 
    0049: [2] 25 ......................... compareEq 
    0050: [1] 13 19 ...................... branchFalse8 <addr: 77> 
    0052: [0] 33 18 ca 0b f8 a7 02 ....... debug 

    # ejs.db.mapper/Record.es:741                 throw new Error("Unsupported SQL type: \"" + sqlType + "\"")

    0059: [0] 7e 2c ...................... getGlobalSlot <slot: 22> 
    0061: [1] 89 ......................... new 
    0062: [1] 56 92 a9 02 ................ loadString <Unsupported SQL type: "> 
    0066: [2] 5b ......................... getLocalSlot0 
    0067: [3] 00 ......................... add 
    0068: [2] 56 96 5a ................... loadString <"> 
    0071: [3] 00 ......................... add 
    0072: [2] 20 02 ...................... callConstructor <argc: 1> 
    0074: [1] c6 ......................... throw 
    0075: [1] 3e 00 ...................... goto8 <addr: 77> 
    0077: [1] 33 18 ce 0b c2 a9 02 ....... debug 

    # ejs.db.mapper/Record.es:743             return ejsType

    0084: [1] 5c ......................... getLocalSlot1 
    0085: [2] bf ......................... returnValue 
    
VARIABLE:   [sqlType-00]  private var sqlType : String
VARIABLE:   [ejsType-01]  private var ejsType : Type

FUNCTION:   [Record-78]  [Record,private] const static function prepareValue(field: String, value: Object) : String

     ARG:   [arg-00]   private field : String
     ARG:   [arg-01]   private value : Object
   LOCAL:   [local-02] var col

    0000: [0] 33 18 dc 0b c2 ab 02 ....... debug 

    # ejs.db.mapper/Record.es:750             let col: Column = _columns[field]

    0007: [0] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0010: [1] 56 80 2e ................... loadString <> 
    0013: [2] 5b ......................... getLocalSlot0 
    0014: [3] 7c ......................... getObjNameExpr 
    0015: [1] 96 ......................... putLocalSlot2 
    0016: [0] 33 18 de 0b 9e ac 02 ....... debug 

    # ejs.db.mapper/Record.es:751             if (col == undefined) {

    0023: [0] 5d ......................... getLocalSlot2 
    0024: [1] 50 ......................... loadGlobal 
    0025: [2] 7b e2 4f 02 ................ getObjName <undefined> <ejs> 
    0029: [2] 25 ......................... compareEq 
    0030: [1] 13 0f ...................... branchFalse8 <addr: 47> 
    0032: [0] 33 18 e0 0b e6 ac 02 ....... debug 

    # ejs.db.mapper/Record.es:752                 return undefined

    0039: [0] 50 ......................... loadGlobal 
    0040: [1] 7b e2 4f 02 ................ getObjName <undefined> <ejs> 
    0044: [1] bf ......................... returnValue 
    0045: [0] 3e 00 ...................... goto8 <addr: 47> 
    0047: [0] 33 18 e4 0b a8 ad 02 ....... debug 

    # ejs.db.mapper/Record.es:754 			if (value == undefined) {

    0054: [0] 5c ......................... getLocalSlot1 
    0055: [1] 50 ......................... loadGlobal 
    0056: [2] 7b e2 4f 02 ................ getObjName <undefined> <ejs> 
    0060: [2] 25 ......................... compareEq 
    0061: [1] 13 1a ...................... branchFalse8 <addr: 89> 
    0063: [0] 33 18 e6 0b e2 ad 02 ....... debug 

    # ejs.db.mapper/Record.es:755 				throw new Error("Field \"" + field + "\" is undefined")

    0070: [0] 7e 2c ...................... getGlobalSlot <slot: 22> 
    0072: [1] 89 ......................... new 
    0073: [1] 56 da ae 02 ................ loadString <Field "> 
    0077: [2] 5b ......................... getLocalSlot0 
    0078: [3] 00 ......................... add 
    0079: [2] 56 ea ae 02 ................ loadString <" is undefined> 
    0083: [3] 00 ......................... add 
    0084: [2] 20 02 ...................... callConstructor <argc: 1> 
    0086: [1] c6 ......................... throw 
    0087: [1] 3e 00 ...................... goto8 <addr: 89> 
    0089: [1] 33 18 ea 0b 88 af 02 ....... debug 

    # ejs.db.mapper/Record.es:757 			if (value == null) {

    0096: [1] 5c ......................... getLocalSlot1 
    0097: [2] 50 ......................... loadGlobal 
    0098: [3] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0102: [3] 25 ......................... compareEq 
    0103: [2] 13 1a ...................... branchFalse8 <addr: 131> 
    0105: [1] 33 18 ec 0b b8 af 02 ....... debug 

    # ejs.db.mapper/Record.es:758 				throw new Error("Field \"" + field + "\" is null")

    0112: [1] 7e 2c ...................... getGlobalSlot <slot: 22> 
    0114: [2] 89 ......................... new 
    0115: [2] 56 da ae 02 ................ loadString <Field "> 
    0119: [3] 5b ......................... getLocalSlot0 
    0120: [4] 00 ......................... add 
    0121: [3] 56 a6 b0 02 ................ loadString <" is null> 
    0125: [4] 00 ......................... add 
    0126: [3] 20 02 ...................... callConstructor <argc: 1> 
    0128: [2] c6 ......................... throw 
    0129: [2] 3e 00 ...................... goto8 <addr: 131> 
    0131: [2] 33 18 ee 0b ba b0 02 ....... debug 

    # ejs.db.mapper/Record.es:759 			}

    0138: [2] 33 18 f0 0b c4 b0 02 ....... debug 

    # ejs.db.mapper/Record.es:760             switch (col.ejsType) {

    0145: [2] 5d ......................... getLocalSlot2 
    0146: [3] 7b 9a 61 d6 02 ............. getObjName <ejsType> <public> 
    0151: [3] 33 18 f2 0b 8a b1 02 ....... debug 

    # ejs.db.mapper/Record.es:761             case Boolean:

    0158: [3] 39 ......................... dup 
    0159: [4] 7e 10 ...................... getGlobalSlot <slot: 8> 
    0161: [5] 26 ......................... compareStrictlyEq 
    0162: [4] 13 5c ...................... branchFalse8 <addr: 256> 
    0164: [3] 33 18 f4 0b be b1 02 ....... debug 

    # ejs.db.mapper/Record.es:762                 if (value is String) {

    0171: [3] 5c ......................... getLocalSlot1 
    0172: [4] 7e e8 01 ................... getGlobalSlot <slot: 116> 
    0175: [5] 43 ......................... isA 
    0176: [4] 13 16 ...................... branchFalse8 <addr: 200> 
    0178: [3] 33 18 f6 0b 8c b2 02 ....... debug 

    # ejs.db.mapper/Record.es:763                     value = (value.toLower() == "true")

    0185: [3] 5c ......................... getLocalSlot1 
    0186: [4] 1e aa 65 80 2e 00 .......... callObjName <toLower> <> <argc: 0> 
    0192: [3] 93 ......................... pushResult 
    0193: [4] 56 ba 65 ................... loadString <true> 
    0196: [5] 25 ......................... compareEq 
    0197: [4] 95 ......................... putLocalSlot1 
    0198: [3] 3e 2d ...................... goto8 <addr: 245> 
    0200: [3] 33 18 f8 0b fc b2 02 ....... debug 

    # ejs.db.mapper/Record.es:764                 } else if (value is Number) {

    0207: [3] 5c ......................... getLocalSlot1 
    0208: [4] 7e d6 01 ................... getGlobalSlot <slot: 107> 
    0211: [5] 43 ......................... isA 
    0212: [4] 13 0d ...................... branchFalse8 <addr: 227> 
    0214: [3] 33 18 fa 0b d8 b3 02 ....... debug 

    # ejs.db.mapper/Record.es:765                     value = (value == 1)

    0221: [3] 5c ......................... getLocalSlot1 
    0222: [4] 45 ......................... load1 
    0223: [5] 25 ......................... compareEq 
    0224: [4] 95 ......................... putLocalSlot1 
    0225: [3] 3e 12 ...................... goto8 <addr: 245> 
    0227: [3] 33 18 fc 0b c2 79 .......... debug 

    # ejs.db.mapper/Record.es:766                 } else {

    0233: [3] 33 18 fe 0b aa b4 02 ....... debug 

    # ejs.db.mapper/Record.es:767                     value = value cast Boolean

    0240: [3] 5c ......................... getLocalSlot1 
    0241: [4] 7e 10 ...................... getGlobalSlot <slot: 8> 
    0243: [5] 22 ......................... cast 
    0244: [4] 95 ......................... putLocalSlot1 
    0245: [3] 33 18 82 0c 88 b5 02 ....... debug 

    # ejs.db.mapper/Record.es:769                 return value

    0252: [3] 5c ......................... getLocalSlot1 
    0253: [4] bf ......................... returnValue 
    0254: [0] 3e 0d ...................... goto8 <addr: 269> 
    0256: [0] 33 18 86 0c c2 b5 02 ....... debug 

    # ejs.db.mapper/Record.es:771             case Date:

    0263: [0] 39 ......................... dup 
    0264: [1] 7e 1e ...................... getGlobalSlot <slot: 15> 
    0266: [2] 26 ......................... compareStrictlyEq 
    0267: [1] 13 20 ...................... branchFalse8 <addr: 301> 
    0269: [0] 33 18 88 0c f0 b5 02 ....... debug 

    # ejs.db.mapper/Record.es:772                 return "%Ld".format((new Date(value)).time)

    0276: [0] 56 e8 b6 02 ................ loadString <%Ld> 
    0280: [1] 7e 1e ...................... getGlobalSlot <slot: 15> 
    0282: [2] 89 ......................... new 
    0283: [2] 5c ......................... getLocalSlot1 
    0284: [3] 20 02 ...................... callConstructor <argc: 1> 
    0286: [2] 7b f0 b6 02 d6 02 .......... getObjName <time> <public> 
    0292: [2] 1e 84 47 00 02 ............. callObjName <format> <> <argc: 1> 
    0297: [0] 93 ......................... pushResult 
    0298: [1] bf ......................... returnValue 
    0299: [0] 3e 0e ...................... goto8 <addr: 315> 
    0301: [0] 33 18 8c 0c fa b6 02 ....... debug 

    # ejs.db.mapper/Record.es:774             case Number:

    0308: [0] 39 ......................... dup 
    0309: [1] 7e d6 01 ................... getGlobalSlot <slot: 107> 
    0312: [2] 26 ......................... compareStrictlyEq 
    0313: [1] 13 0f ...................... branchFalse8 <addr: 330> 
    0315: [0] 33 18 8e 0c ac b7 02 ....... debug 

    # ejs.db.mapper/Record.es:775                 return value cast Number

    0322: [0] 5c ......................... getLocalSlot1 
    0323: [1] 7e d6 01 ................... getGlobalSlot <slot: 107> 
    0326: [2] 22 ......................... cast 
    0327: [1] bf ......................... returnValue 
    0328: [0] 3e 0e ...................... goto8 <addr: 344> 
    0330: [0] 33 18 94 0c fe b7 02 ....... debug 

    # ejs.db.mapper/Record.es:778             case String:

    0337: [0] 39 ......................... dup 
    0338: [1] 7e e8 01 ................... getGlobalSlot <slot: 116> 
    0341: [2] 26 ......................... compareStrictlyEq 
    0342: [1] 13 13 ...................... branchFalse8 <addr: 363> 
    0344: [0] 33 18 96 0c b0 b8 02 ....... debug 

    # ejs.db.mapper/Record.es:779                 return Database.quote(value)

    0351: [0] 50 ......................... loadGlobal 
    0352: [1] 7b 9a 0d 0a ................ getObjName <Database> <ejs.db> 
    0356: [1] 5c ......................... getLocalSlot1 
    0357: [2] 1c 74 00 02 ................ callObjStaticSlot <slot: 58> <0> <argc: 1> 
    0361: [0] 93 ......................... pushResult 
    0362: [1] bf ......................... returnValue 
    0363: [0] 90 ......................... pop 
    0364: [-1] 33 18 9a 0c 8a b9 02 ....... debug 

    # ejs.db.mapper/Record.es:781             return Database.quote(value.toString())

    0371: [-1] 50 ......................... loadGlobal 
    0372: [0] 7b 9a 0d 0a ................ getObjName <Database> <ejs.db> 
    0376: [0] 5c ......................... getLocalSlot1 
    0377: [1] 18 30 00 ................... callObjSlot <slot: 24> <argc: 0> 
    0380: [0] 93 ......................... pushResult 
    0381: [1] 1c 74 00 02 ................ callObjStaticSlot <slot: 58> <0> <argc: 1> 
    0385: [-1] 93 ......................... pushResult 
    0386: [0] bf ......................... returnValue 
    
VARIABLE:   [field-00]  private var field : String
VARIABLE:   [value-01]  private var value : Object
VARIABLE:   [col-02]  private var col : Column

FUNCTION:   [Record-79]  [Record,private] const static function readRecords(key: String, options: Object) : Object

     ARG:   [arg-00]   private key : String
     ARG:   [arg-01]   private options : Object
   LOCAL:   [local-02] var data : Array
   LOCAL:   [local-03] var result : Array
   LOCAL:   [local-04] var row

    0000: [0] 33 18 a8 0c b4 bb 02 ....... debug 

    # ejs.db.mapper/Record.es:788             let data: Array = innerFind(key, null, options)

    0007: [0] 5b ......................... getLocalSlot0 
    0008: [1] 50 ......................... loadGlobal 
    0009: [2] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0013: [2] 5c ......................... getLocalSlot1 
    0014: [3] 1d 96 01 00 06 ............. callThisStaticSlot <slot: 75> <0> <argc: 3> 
    0019: [0] 93 ......................... pushResult 
    0020: [1] 96 ......................... putLocalSlot2 
    0021: [0] 33 18 aa 0c ac bc 02 ....... debug 

    # ejs.db.mapper/Record.es:789             if (data.length > 1) {

    0028: [0] 5d ......................... getLocalSlot2 
    0029: [1] 7b 8e 53 d6 02 ............. getObjName <length> <public> 
    0034: [1] 45 ......................... load1 
    0035: [2] 29 ......................... compareGt 
    0036: [1] 13 3e ...................... branchFalse8 <addr: 100> 
    0038: [0] 33 18 ac 0c f2 bc 02 ....... debug 

    # ejs.db.mapper/Record.es:790                 let result: Array = new Array

    0045: [0] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0047: [1] 89 ......................... new 
    0048: [1] 20 00 ...................... callConstructor <argc: 0> 
    0050: [1] 97 ......................... putLocalSlot3 
    0051: [0] 33 18 ae 0c ce bd 02 ....... debug 

    # ejs.db.mapper/Record.es:791                 for each (row in data) {

    0058: [0] 5d ......................... getLocalSlot2 
    0059: [1] 18 18 00 ................... callObjSlot <slot: 12> <argc: 0> 
    0062: [0] 93 ......................... pushResult 
    0063: [1] 39 ......................... dup 
    0064: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0067: [1] 93 ......................... pushResult 
    0068: [2] 98 ......................... putLocalSlot4 
    0069: [1] 33 18 b0 0c a0 be 02 ....... debug 

    # ejs.db.mapper/Record.es:792                     result.append(createRecord(row))

    0076: [1] 5e ......................... getLocalSlot3 
    0077: [2] 5f ......................... getLocalSlot4 
    0078: [3] 1d 70 00 02 ................ callThisStaticSlot <slot: 56> <0> <argc: 1> 
    0082: [2] 93 ......................... pushResult 
    0083: [3] 18 36 02 ................... callObjSlot <slot: 27> <argc: 1> 
    0086: [1] 3e e7 ...................... goto8 <addr: 63> 
    0088: [1] 90 ......................... pop 
    0089: [0] 33 18 b4 0c 8a bf 02 ....... debug 

    # ejs.db.mapper/Record.es:794                 return result

    0096: [0] 5e ......................... getLocalSlot3 
    0097: [1] bf ......................... returnValue 
    0098: [0] 3e 26 ...................... goto8 <addr: 138> 
    0100: [0] 33 18 b8 0c c6 bf 02 ....... debug 

    # ejs.db.mapper/Record.es:796             } else if (data.length == 1) {

    0107: [0] 5d ......................... getLocalSlot2 
    0108: [1] 7b 8e 53 d6 02 ............. getObjName <length> <public> 
    0113: [1] 45 ......................... load1 
    0114: [2] 25 ......................... compareEq 
    0115: [1] 13 15 ...................... branchFalse8 <addr: 138> 
    0117: [0] 33 18 ba 0c 9c c0 02 ....... debug 

    # ejs.db.mapper/Record.es:797                 return createRecord(data[0])

    0124: [0] 5d ......................... getLocalSlot2 
    0125: [1] 56 80 2e ................... loadString <> 
    0128: [2] 44 ......................... load0 
    0129: [3] 7c ......................... getObjNameExpr 
    0130: [1] 1d 70 00 02 ................ callThisStaticSlot <slot: 56> <0> <argc: 1> 
    0134: [0] 93 ......................... pushResult 
    0135: [1] bf ......................... returnValue 
    0136: [0] 3e 00 ...................... goto8 <addr: 138> 
    0138: [0] 33 18 be 0c da 9a 01 ....... debug 

    # ejs.db.mapper/Record.es:799             return null

    0145: [0] 50 ......................... loadGlobal 
    0146: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0150: [1] bf ......................... returnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     64      67         88           88       StopIteration

VARIABLE:   [key-00]  private var key : String
VARIABLE:   [options-01]  private var options : Object
VARIABLE:   [data-02]  private var data : Array
VARIABLE:   [result-03]  -hoisted-3 var result : Array
VARIABLE:   [row-04]  -hoisted-4 var row

FUNCTION:   [Record-80]  public const static function remove(ids: Array) : Void

     ARG:   [arg-00]   private ids : Array
   LOCAL:   [local-01] var key : Object
   LOCAL:   [local-02] var cmd : String

    0000: [0] 33 18 ce 0c d4 c1 02 ....... debug 

    # ejs.db.mapper/Record.es:807             for each (let key: Object in ids) {

    0007: [0] 5b ......................... getLocalSlot0 
    0008: [1] 18 18 00 ................... callObjSlot <slot: 12> <argc: 0> 
    0011: [0] 93 ......................... pushResult 
    0012: [1] 39 ......................... dup 
    0013: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0016: [1] 93 ......................... pushResult 
    0017: [2] 95 ......................... putLocalSlot1 
    0018: [1] 33 18 d0 0c b4 c2 02 ....... debug 

    # ejs.db.mapper/Record.es:808                 let cmd: String = "DELETE FROM " + _tableName + " WHERE " + _keyName + " = " + key + ";"

    0025: [1] 56 86 c4 02 ................ loadString <DELETE FROM > 
    0029: [2] 83 4c 02 ................... getThisTypeSlot <slot: 38> <1> 
    0032: [3] 00 ......................... add 
    0033: [2] 56 fe b7 01 ................ loadString < WHERE > 
    0037: [3] 00 ......................... add 
    0038: [2] 83 48 02 ................... getThisTypeSlot <slot: 36> <1> 
    0041: [3] 00 ......................... add 
    0042: [2] 56 b0 8e 01 ................ loadString < = > 
    0046: [3] 00 ......................... add 
    0047: [2] 5c ......................... getLocalSlot1 
    0048: [3] 00 ......................... add 
    0049: [2] 56 d2 97 02 ................ loadString <;> 
    0053: [3] 00 ......................... add 
    0054: [2] 96 ......................... putLocalSlot2 
    0055: [1] 33 18 d2 0c a0 c4 02 ....... debug 

    # ejs.db.mapper/Record.es:809                 db.query(cmd, "remove", _trace)

    0062: [1] 57 ......................... loadThis 
    0063: [2] 7b 80 c5 02 d6 02 .......... getObjName <db> <public> 
    0069: [2] 5d ......................... getLocalSlot2 
    0070: [3] 56 86 c5 02 ................ loadString <remove> 
    0074: [4] 83 4e 02 ................... getThisTypeSlot <slot: 39> <1> 
    0077: [5] 1e 94 c5 02 00 06 .......... callObjName <query> <> <argc: 3> 
    0083: [1] 3e b7 ...................... goto8 <addr: 12> 
    0085: [1] 90 ......................... pop 
    0086: [0] be ......................... return 
    0087: [0] 33 18 d6 0c d2 32 .......... debug 

    # ejs.db.mapper/Record.es:811         }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     13      16         85           85       StopIteration

VARIABLE:   [ids-00]  private var ids : Array
VARIABLE:   [key-01]  -hoisted-1 var key : Object
VARIABLE:   [cmd-02]  -hoisted-1 var cmd : String

FUNCTION:   [Record-81]  [Record,private] const function runFilters(filters) : Void

     ARG:   [arg-00]   private filters
   LOCAL:   [local-01] var filter
   LOCAL:   [local-02] var fn
   LOCAL:   [local-03] var options
   LOCAL:   [local-04] var only

    0000: [0] 33 18 dc 0c 92 c6 02 ....... debug 

    # ejs.db.mapper/Record.es:814             for each (filter in filters) {

    0007: [0] 5b ......................... getLocalSlot0 
    0008: [1] 1e 96 e4 01 cc 36 00 ....... callObjName <getValues> <iterator> <argc: 0> 
    0015: [0] 93 ......................... pushResult 
    0016: [1] 39 ......................... dup 
    0017: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0020: [1] 93 ......................... pushResult 
    0021: [2] 95 ......................... putLocalSlot1 
    0022: [1] 33 18 de 0c f6 c6 02 ....... debug 

    # ejs.db.mapper/Record.es:815                 let fn = filter[0]

    0029: [1] 5c ......................... getLocalSlot1 
    0030: [2] 56 80 2e ................... loadString <> 
    0033: [3] 44 ......................... load0 
    0034: [4] 7c ......................... getObjNameExpr 
    0035: [2] 96 ......................... putLocalSlot2 
    0036: [1] 33 18 e0 0c bc c7 02 ....... debug 

    # ejs.db.mapper/Record.es:816                 let options = filter[1]

    0043: [1] 5c ......................... getLocalSlot1 
    0044: [2] 56 80 2e ................... loadString <> 
    0047: [3] 45 ......................... load1 
    0048: [4] 7c ......................... getObjNameExpr 
    0049: [2] 97 ......................... putLocalSlot3 
    0050: [1] 33 18 e2 0c 8c c8 02 ....... debug 

    # ejs.db.mapper/Record.es:817                 if (options) {

    0057: [1] 5e ......................... getLocalSlot3 
    0058: [2] 13 10 ...................... branchFalse8 <addr: 76> 
    0060: [1] 33 18 e4 0c d4 c8 02 ....... debug 

    # ejs.db.mapper/Record.es:818                     let only = options.only

    0067: [1] 5e ......................... getLocalSlot3 
    0068: [2] 7b ca c8 02 00 ............. getObjName <only> <> 
    0073: [2] 98 ......................... putLocalSlot4 
    0074: [1] 3e 00 ...................... goto8 <addr: 76> 
    0076: [1] 33 18 8c 0d b4 61 .......... debug 

    # ejs.db.mapper/Record.es:838                 }

    0082: [1] 33 18 8e 0d ac c9 02 ....... debug 

    # ejs.db.mapper/Record.es:839                 fn.call(this)

    0089: [1] 5d ......................... getLocalSlot2 
    0090: [2] 57 ......................... loadThis 
    0091: [3] 1e e8 c9 02 00 02 .......... callObjName <call> <> <argc: 1> 
    0097: [1] 3e ad ...................... goto8 <addr: 16> 
    0099: [1] 90 ......................... pop 
    0100: [0] be ......................... return 
    0101: [0] 33 18 92 0d d2 32 .......... debug 

    # ejs.db.mapper/Record.es:841         }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     17      20         99           99       StopIteration

VARIABLE:   [filters-00]  private var filters
VARIABLE:   [filter-01]  -hoisted-1 var filter
VARIABLE:   [fn-02]  -hoisted-1 var fn
VARIABLE:   [options-03]  -hoisted-1 var options
VARIABLE:   [only-04]  -hoisted-4 var only

FUNCTION:   [Record-82]  public const function save() : Boolean

   LOCAL:   [local-00] var sql : String
   LOCAL:   [local-01] var result : Array
   LOCAL:   [local-02] var field : String
   LOCAL:   [local-03] var field : String
   LOCAL:   [local-04] var field : String

    0000: [0] 33 18 a2 0d de ca 02 ....... debug 

    # ejs.db.mapper/Record.es:849             var sql: String

    0007: [0] 33 18 a4 0d 88 a9 01 ....... debug 

    # ejs.db.mapper/Record.es:850             if (!_columns) _model.getSchema()

    0014: [0] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0017: [1] 86 ......................... logicalNot 
    0018: [1] 13 0b ...................... branchFalse8 <addr: 31> 
    0020: [0] 83 4a 02 ................... getThisTypeSlot <slot: 37> <1> 
    0023: [1] 1e e2 73 80 2e 00 .......... callObjName <getSchema> <> <argc: 0> 
    0029: [0] 3e 00 ...................... goto8 <addr: 31> 
    0031: [0] 33 18 a6 0d 96 cb 02 ....... debug 

    # ejs.db.mapper/Record.es:851             if (!validateRecord()) {

    0038: [0] 19 b8 01 00 ................ callThisSlot <slot: 92> <argc: 0> 
    0042: [0] 93 ......................... pushResult 
    0043: [1] 86 ......................... logicalNot 
    0044: [1] 13 0f ...................... branchFalse8 <addr: 61> 
    0046: [0] 33 18 a8 0d e0 cb 02 ....... debug 

    # ejs.db.mapper/Record.es:852                 return false

    0053: [0] 50 ......................... loadGlobal 
    0054: [1] 7b e4 69 02 ................ getObjName <false> <ejs> 
    0058: [1] bf ......................... returnValue 
    0059: [0] 3e 00 ...................... goto8 <addr: 61> 
    0061: [0] 33 18 aa 0d 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:853             }

    0068: [0] 33 18 ac 0d 9a cc 02 ....... debug 

    # ejs.db.mapper/Record.es:854             runFilters(_beforeFilters)

    0075: [0] 83 52 02 ................... getThisTypeSlot <slot: 41> <1> 
    0078: [1] 19 a2 01 02 ................ callThisSlot <slot: 81> <argc: 1> 
    0082: [0] 33 18 b0 0d e8 cc 02 ....... debug 

    # ejs.db.mapper/Record.es:856             if (_keyValue == null) {

    0089: [0] 57 ......................... loadThis 
    0090: [1] 7b dc 1b 4c ................ getObjName <_keyValue> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0094: [1] 50 ......................... loadGlobal 
    0095: [2] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0099: [2] 25 ......................... compareEq 
    0100: [1] 07 d6 03 f7 f7 ............. branchFalse <addr: 340> 
    0105: [0] 33 18 b2 0d b2 cd 02 ....... debug 

    # ejs.db.mapper/Record.es:857                 sql = "INSERT INTO " + _tableName + " ("

    0112: [0] 56 a4 ce 02 ................ loadString <INSERT INTO > 
    0116: [1] 83 4c 02 ................... getThisTypeSlot <slot: 38> <1> 
    0119: [2] 00 ......................... add 
    0120: [1] 56 be ce 02 ................ loadString < (> 
    0124: [2] 00 ......................... add 
    0125: [1] 94 ......................... putLocalSlot0 
    0126: [0] 33 18 b4 0d c4 ce 02 ....... debug 

    # ejs.db.mapper/Record.es:858                 for (let field: String in this) {

    0133: [0] 57 ......................... loadThis 
    0134: [1] 1e 9c 5e cc 36 00 .......... callObjName <get> <iterator> <argc: 0> 
    0140: [0] 93 ......................... pushResult 
    0141: [1] 39 ......................... dup 
    0142: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0145: [1] 93 ......................... pushResult 
    0146: [2] 96 ......................... putLocalSlot2 
    0147: [1] 33 18 b6 0d a8 cf 02 ....... debug 

    # ejs.db.mapper/Record.es:859                     if (_columns[field]) {

    0154: [1] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0157: [2] 56 80 2e ................... loadString <> 
    0160: [3] 5d ......................... getLocalSlot2 
    0161: [4] 7c ......................... getObjNameExpr 
    0162: [2] 13 12 ...................... branchFalse8 <addr: 182> 
    0164: [1] 33 18 b8 0d fe cf 02 ....... debug 

    # ejs.db.mapper/Record.es:860                         sql += field + ", "

    0171: [1] 5b ......................... getLocalSlot0 
    0172: [2] 5d ......................... getLocalSlot2 
    0173: [3] 56 d6 d0 02 ................ loadString <, > 
    0177: [4] 00 ......................... add 
    0178: [3] 00 ......................... add 
    0179: [2] 94 ......................... putLocalSlot0 
    0180: [1] 3e 00 ...................... goto8 <addr: 182> 
    0182: [1] 3e d5 ...................... goto8 <addr: 141> 
    0184: [1] 90 ......................... pop 
    0185: [0] 33 18 bc 0d b4 61 .......... debug 

    # ejs.db.mapper/Record.es:862                 }

    0191: [0] 33 18 be 0d dc d0 02 ....... debug 

    # ejs.db.mapper/Record.es:863                 sql = sql.trim(', ')

    0198: [0] 5b ......................... getLocalSlot0 
    0199: [1] 56 d6 d0 02 ................ loadString <, > 
    0203: [2] 18 7e 02 ................... callObjSlot <slot: 63> <argc: 1> 
    0206: [0] 93 ......................... pushResult 
    0207: [1] 94 ......................... putLocalSlot0 
    0208: [0] 33 18 c0 0d a6 d1 02 ....... debug 

    # ejs.db.mapper/Record.es:864                 sql += ") VALUES("

    0215: [0] 5b ......................... getLocalSlot0 
    0216: [1] 56 ec d1 02 ................ loadString <) VALUES(> 
    0220: [2] 00 ......................... add 
    0221: [1] 94 ......................... putLocalSlot0 
    0222: [0] 33 18 c2 0d c4 ce 02 ....... debug 

    # ejs.db.mapper/Record.es:865                 for (let field: String in this) {

    0229: [0] 57 ......................... loadThis 
    0230: [1] 1e 9c 5e cc 36 00 .......... callObjName <get> <iterator> <argc: 0> 
    0236: [0] 93 ......................... pushResult 
    0237: [1] 39 ......................... dup 
    0238: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0241: [1] 93 ......................... pushResult 
    0242: [2] 97 ......................... putLocalSlot3 
    0243: [1] 33 18 c4 0d a8 cf 02 ....... debug 

    # ejs.db.mapper/Record.es:866                     if (_columns[field]) {

    0250: [1] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0253: [2] 56 80 2e ................... loadString <> 
    0256: [3] 5e ......................... getLocalSlot3 
    0257: [4] 7c ......................... getObjNameExpr 
    0258: [2] 13 23 ...................... branchFalse8 <addr: 295> 
    0260: [1] 33 18 c6 0d 80 d2 02 ....... debug 

    # ejs.db.mapper/Record.es:867                         sql += "'" + prepareValue(field, this[field]) + "', "

    0267: [1] 5b ......................... getLocalSlot0 
    0268: [2] 56 9c d3 02 ................ loadString <'> 
    0272: [3] 5e ......................... getLocalSlot3 
    0273: [4] 57 ......................... loadThis 
    0274: [5] 56 80 2e ................... loadString <> 
    0277: [6] 5e ......................... getLocalSlot3 
    0278: [7] 7c ......................... getObjNameExpr 
    0279: [5] 1d 9c 01 02 04 ............. callThisStaticSlot <slot: 78> <1> <argc: 2> 
    0284: [3] 93 ......................... pushResult 
    0285: [4] 00 ......................... add 
    0286: [3] 56 a0 d3 02 ................ loadString <', > 
    0290: [4] 00 ......................... add 
    0291: [3] 00 ......................... add 
    0292: [2] 94 ......................... putLocalSlot0 
    0293: [1] 3e 00 ...................... goto8 <addr: 295> 
    0295: [1] 3e c4 ...................... goto8 <addr: 237> 
    0297: [1] 90 ......................... pop 
    0298: [0] 33 18 ca 0d b4 61 .......... debug 

    # ejs.db.mapper/Record.es:869                 }

    0304: [0] 33 18 cc 0d dc d0 02 ....... debug 

    # ejs.db.mapper/Record.es:870                 sql = sql.trim(', ')

    0311: [0] 5b ......................... getLocalSlot0 
    0312: [1] 56 d6 d0 02 ................ loadString <, > 
    0316: [2] 18 7e 02 ................... callObjSlot <slot: 63> <argc: 1> 
    0319: [0] 93 ......................... pushResult 
    0320: [1] 94 ......................... putLocalSlot0 
    0321: [0] 33 18 ce 0d a8 d3 02 ....... debug 

    # ejs.db.mapper/Record.es:871                 sql += ")"

    0328: [0] 5b ......................... getLocalSlot0 
    0329: [1] 56 de d3 02 ................ loadString <)> 
    0333: [2] 00 ......................... add 
    0334: [1] 94 ......................... putLocalSlot0 
    0335: [0] 3d ba 02 f7 f7 ............. goto <addr: 497> 
    0340: [0] 33 18 d2 0d ee 58 .......... debug 

    # ejs.db.mapper/Record.es:873             } else {

    0346: [0] 33 18 d4 0d e2 d3 02 ....... debug 

    # ejs.db.mapper/Record.es:874                 sql = "UPDATE " + _tableName + " SET "

    0353: [0] 56 d0 d4 02 ................ loadString <UPDATE > 
    0357: [1] 83 4c 02 ................... getThisTypeSlot <slot: 38> <1> 
    0360: [2] 00 ......................... add 
    0361: [1] 56 e0 d4 02 ................ loadString < SET > 
    0365: [2] 00 ......................... add 
    0366: [1] 94 ......................... putLocalSlot0 
    0367: [0] 33 18 d6 0d c4 ce 02 ....... debug 

    # ejs.db.mapper/Record.es:875                 for (let field: String in this) {

    0374: [0] 57 ......................... loadThis 
    0375: [1] 1e 9c 5e cc 36 00 .......... callObjName <get> <iterator> <argc: 0> 
    0381: [0] 93 ......................... pushResult 
    0382: [1] 39 ......................... dup 
    0383: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0386: [1] 93 ......................... pushResult 
    0387: [2] 98 ......................... putLocalSlot4 
    0388: [1] 33 18 d8 0d a8 cf 02 ....... debug 

    # ejs.db.mapper/Record.es:876                     if (_columns[field]) {

    0395: [1] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0398: [2] 56 80 2e ................... loadString <> 
    0401: [3] 5f ......................... getLocalSlot4 
    0402: [4] 7c ......................... getObjNameExpr 
    0403: [2] 13 25 ...................... branchFalse8 <addr: 442> 
    0405: [1] 33 18 da 0d ec d4 02 ....... debug 

    # ejs.db.mapper/Record.es:877                         sql += field + " = '" + prepareValue(field, this[field]) + "', "

    0412: [1] 5b ......................... getLocalSlot0 
    0413: [2] 5f ......................... getLocalSlot4 
    0414: [3] 56 90 85 02 ................ loadString < = '> 
    0418: [4] 00 ......................... add 
    0419: [3] 5f ......................... getLocalSlot4 
    0420: [4] 57 ......................... loadThis 
    0421: [5] 56 80 2e ................... loadString <> 
    0424: [6] 5f ......................... getLocalSlot4 
    0425: [7] 7c ......................... getObjNameExpr 
    0426: [5] 1d 9c 01 02 04 ............. callThisStaticSlot <slot: 78> <1> <argc: 2> 
    0431: [3] 93 ......................... pushResult 
    0432: [4] 00 ......................... add 
    0433: [3] 56 a0 d3 02 ................ loadString <', > 
    0437: [4] 00 ......................... add 
    0438: [3] 00 ......................... add 
    0439: [2] 94 ......................... putLocalSlot0 
    0440: [1] 3e 00 ...................... goto8 <addr: 442> 
    0442: [1] 3e c2 ...................... goto8 <addr: 382> 
    0444: [1] 90 ......................... pop 
    0445: [0] 33 18 de 0d b4 61 .......... debug 

    # ejs.db.mapper/Record.es:879                 }

    0451: [0] 33 18 e0 0d dc d0 02 ....... debug 

    # ejs.db.mapper/Record.es:880                 sql = sql.trim(', ')

    0458: [0] 5b ......................... getLocalSlot0 
    0459: [1] 56 d6 d0 02 ................ loadString <, > 
    0463: [2] 18 7e 02 ................... callObjSlot <slot: 63> <argc: 1> 
    0466: [0] 93 ......................... pushResult 
    0467: [1] 94 ......................... putLocalSlot0 
    0468: [0] 33 18 e2 0d 9e d6 02 ....... debug 

    # ejs.db.mapper/Record.es:881                 sql += " WHERE " + _keyName + " = " +  _keyValue

    0475: [0] 5b ......................... getLocalSlot0 
    0476: [1] 56 fe b7 01 ................ loadString < WHERE > 
    0480: [2] 83 48 02 ................... getThisTypeSlot <slot: 36> <1> 
    0483: [3] 00 ......................... add 
    0484: [2] 56 b0 8e 01 ................ loadString < = > 
    0488: [3] 00 ......................... add 
    0489: [2] 57 ......................... loadThis 
    0490: [3] 7b dc 1b 4c ................ getObjName <_keyValue> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0494: [3] 00 ......................... add 
    0495: [2] 00 ......................... add 
    0496: [1] 94 ......................... putLocalSlot0 
    0497: [0] 33 18 e6 0d a0 d7 02 ....... debug 

    # ejs.db.mapper/Record.es:883             if (!_keyValue) {

    0504: [0] 57 ......................... loadThis 
    0505: [1] 7b dc 1b 4c ................ getObjName <_keyValue> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0509: [1] 86 ......................... logicalNot 
    0510: [1] 13 10 ...................... branchFalse8 <addr: 528> 
    0512: [0] 33 18 e8 0d dc d7 02 ....... debug 

    # ejs.db.mapper/Record.es:884                 sql += "; SELECT last_insert_rowid();"

    0519: [0] 5b ......................... getLocalSlot0 
    0520: [1] 56 ca d8 02 ................ loadString <; SELECT last_insert_rowid();> 
    0524: [2] 00 ......................... add 
    0525: [1] 94 ......................... putLocalSlot0 
    0526: [0] 3e 14 ...................... goto8 <addr: 548> 
    0528: [0] 33 18 ea 0d ee 58 .......... debug 

    # ejs.db.mapper/Record.es:885             } else {

    0534: [0] 33 18 ec 0d 86 d9 02 ....... debug 

    # ejs.db.mapper/Record.es:886                 sql += ";"

    0541: [0] 5b ......................... getLocalSlot0 
    0542: [1] 56 d2 97 02 ................ loadString <;> 
    0546: [2] 00 ......................... add 
    0547: [1] 94 ......................... putLocalSlot0 
    0548: [0] 33 18 ee 0d 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:887             }

    0555: [0] 33 18 f2 0d bc d9 02 ....... debug 

    # ejs.db.mapper/Record.es:889             let result: Array = _db.query(sql, "save", _trace)

    0562: [0] 83 44 02 ................... getThisTypeSlot <slot: 34> <1> 
    0565: [1] 5b ......................... getLocalSlot0 
    0566: [2] 56 ba da 02 ................ loadString <save> 
    0570: [3] 83 4e 02 ................... getThisTypeSlot <slot: 39> <1> 
    0573: [4] 18 5c 06 ................... callObjSlot <slot: 46> <argc: 3> 
    0576: [0] 93 ......................... pushResult 
    0577: [1] 95 ......................... putLocalSlot1 
    0578: [0] 33 18 f4 0d a0 d7 02 ....... debug 

    # ejs.db.mapper/Record.es:890             if (!_keyValue) {

    0585: [0] 57 ......................... loadThis 
    0586: [1] 7b dc 1b 4c ................ getObjName <_keyValue> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0590: [1] 86 ......................... logicalNot 
    0591: [1] 13 29 ...................... branchFalse8 <addr: 634> 
    0593: [0] 33 18 f6 0d c4 da 02 ....... debug 

    # ejs.db.mapper/Record.es:891                 _keyValue = this["id"] = result[0]["last_insert_rowid()"] cast Number

    0600: [0] 5c ......................... getLocalSlot1 
    0601: [1] 56 80 2e ................... loadString <> 
    0604: [2] 44 ......................... load0 
    0605: [3] 7c ......................... getObjNameExpr 
    0606: [1] 56 80 2e ................... loadString <> 
    0609: [2] 56 f0 db 02 ................ loadString <last_insert_rowid()> 
    0613: [3] 7c ......................... getObjNameExpr 
    0614: [1] 7e d6 01 ................... getGlobalSlot <slot: 107> 
    0617: [2] 22 ......................... cast 
    0618: [1] 39 ......................... dup 
    0619: [2] 57 ......................... loadThis 
    0620: [3] 56 80 2e ................... loadString <> 
    0623: [4] 56 ca 2c ................... loadString <id> 
    0626: [5] b2 ......................... putObjNameExpr 
    0627: [1] 57 ......................... loadThis 
    0628: [2] b3 dc 1b 4c ................ putObjName <_keyValue> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0632: [0] 3e 00 ...................... goto8 <addr: 634> 
    0634: [0] 33 18 f8 0d 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:892             }

    0641: [0] 33 18 fa 0d 98 dc 02 ....... debug 

    # ejs.db.mapper/Record.es:893             runFilters(_afterFilters)

    0648: [0] 83 54 02 ................... getThisTypeSlot <slot: 42> <1> 
    0651: [1] 19 a2 01 02 ................ callThisSlot <slot: 81> <argc: 1> 
    0655: [0] 33 18 fc 0d e4 dc 02 ....... debug 

    # ejs.db.mapper/Record.es:894             return true

    0662: [0] 50 ......................... loadGlobal 
    0663: [1] 7b ba 65 02 ................ getObjName <true> <ejs> 
    0667: [1] bf ......................... returnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration    142     145        184          184       StopIteration
1   iteration    238     241        297          297       StopIteration
2   iteration    383     386        444          444       StopIteration

VARIABLE:   [sql-00]  private var sql : String
VARIABLE:   [result-01]  private var result : Array
VARIABLE:   [field-02]  -hoisted-2 var field : String
VARIABLE:   [field-03]  -hoisted-3 var field : String
VARIABLE:   [field-04]  -hoisted-4 var field : String

FUNCTION:   [Record-83]  public const function saveUpdate(fields: Object) : Boolean

     ARG:   [arg-00]   private fields : Object
   LOCAL:   [local-01] var field

    0000: [0] 33 18 92 0e 82 de 02 ....... debug 

    # ejs.db.mapper/Record.es:905             for (field in fields) {

    0007: [0] 5b ......................... getLocalSlot0 
    0008: [1] 18 10 00 ................... callObjSlot <slot: 8> <argc: 0> 
    0011: [0] 93 ......................... pushResult 
    0012: [1] 39 ......................... dup 
    0013: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0016: [1] 93 ......................... pushResult 
    0017: [2] 95 ......................... putLocalSlot1 
    0018: [1] 33 18 94 0e ca de 02 ....... debug 

    # ejs.db.mapper/Record.es:906                 if (this[field] != undefined) {

    0025: [1] 57 ......................... loadThis 
    0026: [2] 56 80 2e ................... loadString <> 
    0029: [3] 5c ......................... getLocalSlot1 
    0030: [4] 7c ......................... getObjNameExpr 
    0031: [2] 50 ......................... loadGlobal 
    0032: [3] 7b e2 4f 02 ................ getObjName <undefined> <ejs> 
    0036: [3] 2c ......................... compareNe 
    0037: [2] 13 15 ...................... branchFalse8 <addr: 60> 
    0039: [1] 33 18 96 0e aa df 02 ....... debug 

    # ejs.db.mapper/Record.es:907                     this[field] = fields[field]

    0046: [1] 5b ......................... getLocalSlot0 
    0047: [2] 56 80 2e ................... loadString <> 
    0050: [3] 5c ......................... getLocalSlot1 
    0051: [4] 7c ......................... getObjNameExpr 
    0052: [2] 57 ......................... loadThis 
    0053: [3] 56 80 2e ................... loadString <> 
    0056: [4] 5c ......................... getLocalSlot1 
    0057: [5] b2 ......................... putObjNameExpr 
    0058: [1] 3e 00 ...................... goto8 <addr: 60> 
    0060: [1] 3e ce ...................... goto8 <addr: 12> 
    0062: [1] 90 ......................... pop 
    0063: [0] 33 18 9c 0e 8a e0 02 ....... debug 

    # ejs.db.mapper/Record.es:910             return save()

    0070: [0] 19 a4 01 00 ................ callThisSlot <slot: 82> <argc: 0> 
    0074: [0] 93 ......................... pushResult 
    0075: [1] bf ......................... returnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     13      16         62           62       StopIteration

VARIABLE:   [fields-00]  private var fields : Object
VARIABLE:   [field-01]  -hoisted-1 var field

FUNCTION:   [Record-84]  public const static function setDb(database: Database) : void

     ARG:   [arg-00]   private database : Database

    0000: [0] 33 18 ac 0e bc e1 02 ....... debug 

    # ejs.db.mapper/Record.es:918             _db = database

    0007: [0] 5b ......................... getLocalSlot0 
    0008: [1] bc 44 02 ................... putThisTypeSlot <slot: 34> <1> 
    0011: [0] be ......................... return 
    0012: [0] 33 18 ae 0e d2 32 .......... debug 

    # ejs.db.mapper/Record.es:919         }
    
VARIABLE:   [database-00]  private var database : Database

FUNCTION:   [Record-85]  public const static function setKeyName(name: String) : Void

     ARG:   [arg-00]   private name : String

    0000: [0] 33 18 ba 0e 82 e3 02 ....... debug 

    # ejs.db.mapper/Record.es:925             _keyName = name

    0007: [0] 5b ......................... getLocalSlot0 
    0008: [1] bc 48 02 ................... putThisTypeSlot <slot: 36> <1> 
    0011: [0] be ......................... return 
    0012: [0] 33 18 bc 0e d2 32 .......... debug 

    # ejs.db.mapper/Record.es:926         }
    
VARIABLE:   [name-00]  private var name : String

FUNCTION:   [Record-86]  public const static function setTableName(name: String) : Void

     ARG:   [arg-00]   private name : String

    0000: [0] 33 18 ca 0e c6 e4 02 ....... debug 

    # ejs.db.mapper/Record.es:933             if (_tableName != name) {

    0007: [0] 83 4c 02 ................... getThisTypeSlot <slot: 38> <1> 
    0010: [1] 5b ......................... getLocalSlot0 
    0011: [2] 2c ......................... compareNe 
    0012: [1] 13 2b ...................... branchFalse8 <addr: 57> 
    0014: [0] 33 18 cc 0e 92 e5 02 ....... debug 

    # ejs.db.mapper/Record.es:934                 _tableName = name

    0021: [0] 5b ......................... getLocalSlot0 
    0022: [1] bc 4c 02 ................... putThisTypeSlot <slot: 38> <1> 
    0025: [0] 33 18 ce 0e d6 e5 02 ....... debug 

    # ejs.db.mapper/Record.es:935                 if (_db) {

    0032: [0] 83 44 02 ................... getThisTypeSlot <slot: 34> <1> 
    0035: [1] 13 12 ...................... branchFalse8 <addr: 55> 
    0037: [0] 33 18 d0 0e 8c e6 02 ....... debug 

    # ejs.db.mapper/Record.es:936                     _model.getSchema()

    0044: [0] 83 4a 02 ................... getThisTypeSlot <slot: 37> <1> 
    0047: [1] 1e e2 73 80 2e 00 .......... callObjName <getSchema> <> <argc: 0> 
    0053: [0] 3e 00 ...................... goto8 <addr: 55> 
    0055: [0] 3e 00 ...................... goto8 <addr: 57> 
    0057: [0] be ......................... return 
    0058: [0] 33 18 d6 0e d2 32 .......... debug 

    # ejs.db.mapper/Record.es:939         }
    
VARIABLE:   [name-00]  private var name : String

FUNCTION:   [Record-87]  public const static function sql(cmd: String, count: Number) : Array

     ARG:   [arg-00]   private cmd : String
     ARG:   [arg-01]   private count : Number

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 95 ......................... putLocalSlot1 
    0010: [0] 33 18 e8 0e 86 e8 02 ....... debug 

    # ejs.db.mapper/Record.es:948             cmd = "SELECT " + cmd + ";"

    0017: [0] 56 d2 8f 02 ................ loadString <SELECT > 
    0021: [1] 5b ......................... getLocalSlot0 
    0022: [2] 00 ......................... add 
    0023: [1] 56 d2 97 02 ................ loadString <;> 
    0027: [2] 00 ......................... add 
    0028: [1] 94 ......................... putLocalSlot0 
    0029: [0] 33 18 ea 0e d6 e8 02 ....... debug 

    # ejs.db.mapper/Record.es:949             return db.query(cmd, "select", _trace)

    0036: [0] 57 ......................... loadThis 
    0037: [1] 7b 80 c5 02 d6 02 .......... getObjName <db> <public> 
    0043: [1] 5b ......................... getLocalSlot0 
    0044: [2] 56 bc e9 02 ................ loadString <select> 
    0048: [3] 83 4e 02 ................... getThisTypeSlot <slot: 39> <1> 
    0051: [4] 1e 94 c5 02 00 06 .......... callObjName <query> <> <argc: 3> 
    0057: [0] 93 ......................... pushResult 
    0058: [1] bf ......................... returnValue 
    
VARIABLE:   [cmd-00]  private var cmd : String
VARIABLE:   [count-01]  private var count : Number

FUNCTION:   [Record-88]  public const static function trace(on: Boolean) : Void

     ARG:   [arg-00]   private on : Boolean

    0000: [0] 33 18 fa 0e ac ea 02 ....... debug 

    # ejs.db.mapper/Record.es:957             _trace = on

    0007: [0] 5b ......................... getLocalSlot0 
    0008: [1] bc 4e 02 ................... putThisTypeSlot <slot: 39> <1> 
    0011: [0] be ......................... return 
    
VARIABLE:   [on-00]  private var on : Boolean

FUNCTION:   [Record-89]  public const static function validateFormat(fields: Object, options) : void

     ARG:   [arg-00]   private fields : Object
     ARG:   [arg-01]   private options

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 95 ......................... putLocalSlot1 
    0010: [0] 33 18 82 0f 80 ec 02 ....... debug 

    # ejs.db.mapper/Record.es:961             if (_validations == null) {

    0017: [0] 83 50 02 ................... getThisTypeSlot <slot: 40> <1> 
    0020: [1] 50 ......................... loadGlobal 
    0021: [2] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0025: [2] 25 ......................... compareEq 
    0026: [1] 13 0f ...................... branchFalse8 <addr: 43> 
    0028: [0] 33 18 84 0f d0 ec 02 ....... debug 

    # ejs.db.mapper/Record.es:962                 _validations = []

    0035: [0] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0037: [1] 89 ......................... new 
    0038: [1] bc 50 02 ................... putThisTypeSlot <slot: 40> <1> 
    0041: [0] 3e 00 ...................... goto8 <addr: 43> 
    0043: [0] 33 18 86 0f 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:963             }

    0050: [0] 33 18 88 0f 94 ed 02 ....... debug 

    # ejs.db.mapper/Record.es:964             _validations.append([checkFormat, fields, options])

    0057: [0] 83 50 02 ................... getThisTypeSlot <slot: 40> <1> 
    0060: [1] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0062: [2] 89 ......................... new 
    0063: [2] 39 ......................... dup 
    0064: [3] 83 64 02 ................... getThisTypeSlot <slot: 50> <1> 
    0067: [4] c5 ......................... swap 
    0068: [4] 56 80 2e ................... loadString <> 
    0071: [5] 44 ......................... load0 
    0072: [6] b2 ......................... putObjNameExpr 
    0073: [2] 39 ......................... dup 
    0074: [3] 5b ......................... getLocalSlot0 
    0075: [4] c5 ......................... swap 
    0076: [4] 56 80 2e ................... loadString <> 
    0079: [5] 45 ......................... load1 
    0080: [6] b2 ......................... putObjNameExpr 
    0081: [2] 39 ......................... dup 
    0082: [3] 5c ......................... getLocalSlot1 
    0083: [4] c5 ......................... swap 
    0084: [4] 56 80 2e ................... loadString <> 
    0087: [5] 46 ......................... load2 
    0088: [6] b2 ......................... putObjNameExpr 
    0089: [2] 18 36 02 ................... callObjSlot <slot: 27> <argc: 1> 
    0092: [0] be ......................... return 
    0093: [0] 33 18 8a 0f d2 32 .......... debug 

    # ejs.db.mapper/Record.es:965         }
    
VARIABLE:   [fields-00]  private var fields : Object
VARIABLE:   [options-01]  private var options

FUNCTION:   [Record-90]  public const static function validateNumber(fields: Object, options) : void

     ARG:   [arg-00]   private fields : Object
     ARG:   [arg-01]   private options

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 95 ......................... putLocalSlot1 
    0010: [0] 33 18 92 0f 80 ec 02 ....... debug 

    # ejs.db.mapper/Record.es:969             if (_validations == null) {

    0017: [0] 83 50 02 ................... getThisTypeSlot <slot: 40> <1> 
    0020: [1] 50 ......................... loadGlobal 
    0021: [2] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0025: [2] 25 ......................... compareEq 
    0026: [1] 13 0f ...................... branchFalse8 <addr: 43> 
    0028: [0] 33 18 94 0f d0 ec 02 ....... debug 

    # ejs.db.mapper/Record.es:970                 _validations = []

    0035: [0] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0037: [1] 89 ......................... new 
    0038: [1] bc 50 02 ................... putThisTypeSlot <slot: 40> <1> 
    0041: [0] 3e 00 ...................... goto8 <addr: 43> 
    0043: [0] 33 18 96 0f 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:971             }

    0050: [0] 33 18 98 0f c4 ef 02 ....... debug 

    # ejs.db.mapper/Record.es:972             _validations.append([checkNumber, fields, options])

    0057: [0] 83 50 02 ................... getThisTypeSlot <slot: 40> <1> 
    0060: [1] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0062: [2] 89 ......................... new 
    0063: [2] 39 ......................... dup 
    0064: [3] 83 66 02 ................... getThisTypeSlot <slot: 51> <1> 
    0067: [4] c5 ......................... swap 
    0068: [4] 56 80 2e ................... loadString <> 
    0071: [5] 44 ......................... load0 
    0072: [6] b2 ......................... putObjNameExpr 
    0073: [2] 39 ......................... dup 
    0074: [3] 5b ......................... getLocalSlot0 
    0075: [4] c5 ......................... swap 
    0076: [4] 56 80 2e ................... loadString <> 
    0079: [5] 45 ......................... load1 
    0080: [6] b2 ......................... putObjNameExpr 
    0081: [2] 39 ......................... dup 
    0082: [3] 5c ......................... getLocalSlot1 
    0083: [4] c5 ......................... swap 
    0084: [4] 56 80 2e ................... loadString <> 
    0087: [5] 46 ......................... load2 
    0088: [6] b2 ......................... putObjNameExpr 
    0089: [2] 18 36 02 ................... callObjSlot <slot: 27> <argc: 1> 
    0092: [0] be ......................... return 
    0093: [0] 33 18 9a 0f d2 32 .......... debug 

    # ejs.db.mapper/Record.es:973         }
    
VARIABLE:   [fields-00]  private var fields : Object
VARIABLE:   [options-01]  private var options

FUNCTION:   [Record-91]  public const static function validatePresence(fields: Object, options) : void

     ARG:   [arg-00]   private fields : Object
     ARG:   [arg-01]   private options

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 95 ......................... putLocalSlot1 
    0010: [0] 33 18 a2 0f 80 ec 02 ....... debug 

    # ejs.db.mapper/Record.es:977             if (_validations == null) {

    0017: [0] 83 50 02 ................... getThisTypeSlot <slot: 40> <1> 
    0020: [1] 50 ......................... loadGlobal 
    0021: [2] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0025: [2] 25 ......................... compareEq 
    0026: [1] 13 0f ...................... branchFalse8 <addr: 43> 
    0028: [0] 33 18 a4 0f d0 ec 02 ....... debug 

    # ejs.db.mapper/Record.es:978                 _validations = []

    0035: [0] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0037: [1] 89 ......................... new 
    0038: [1] bc 50 02 ................... putThisTypeSlot <slot: 40> <1> 
    0041: [0] 3e 00 ...................... goto8 <addr: 43> 
    0043: [0] 33 18 a6 0f 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:979             }

    0050: [0] 33 18 a8 0f f8 f1 02 ....... debug 

    # ejs.db.mapper/Record.es:980             _validations.append([checkPresent, fields, options])

    0057: [0] 83 50 02 ................... getThisTypeSlot <slot: 40> <1> 
    0060: [1] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0062: [2] 89 ......................... new 
    0063: [2] 39 ......................... dup 
    0064: [3] 83 68 02 ................... getThisTypeSlot <slot: 52> <1> 
    0067: [4] c5 ......................... swap 
    0068: [4] 56 80 2e ................... loadString <> 
    0071: [5] 44 ......................... load0 
    0072: [6] b2 ......................... putObjNameExpr 
    0073: [2] 39 ......................... dup 
    0074: [3] 5b ......................... getLocalSlot0 
    0075: [4] c5 ......................... swap 
    0076: [4] 56 80 2e ................... loadString <> 
    0079: [5] 45 ......................... load1 
    0080: [6] b2 ......................... putObjNameExpr 
    0081: [2] 39 ......................... dup 
    0082: [3] 5c ......................... getLocalSlot1 
    0083: [4] c5 ......................... swap 
    0084: [4] 56 80 2e ................... loadString <> 
    0087: [5] 46 ......................... load2 
    0088: [6] b2 ......................... putObjNameExpr 
    0089: [2] 18 36 02 ................... callObjSlot <slot: 27> <argc: 1> 
    0092: [0] be ......................... return 
    0093: [0] 33 18 aa 0f d2 32 .......... debug 

    # ejs.db.mapper/Record.es:981         }
    
VARIABLE:   [fields-00]  private var fields : Object
VARIABLE:   [options-01]  private var options

FUNCTION:   [Record-92]  public const function validateRecord() : Boolean

   LOCAL:   [local-00] var thisType
   LOCAL:   [local-01] var validation : String
   LOCAL:   [local-02] var check
   LOCAL:   [local-03] var fields
   LOCAL:   [local-04] var options
   LOCAL:   [local-05] var field

    0000: [0] 33 18 b8 0f 88 a9 01 ....... debug 

    # ejs.db.mapper/Record.es:988             if (!_columns) _model.getSchema()

    0007: [0] 83 3e 02 ................... getThisTypeSlot <slot: 31> <1> 
    0010: [1] 86 ......................... logicalNot 
    0011: [1] 13 0b ...................... branchFalse8 <addr: 24> 
    0013: [0] 83 4a 02 ................... getThisTypeSlot <slot: 37> <1> 
    0016: [1] 1e e2 73 80 2e 00 .......... callObjName <getSchema> <> <argc: 0> 
    0022: [0] 3e 00 ...................... goto8 <addr: 24> 
    0024: [0] 33 18 ba 0f f6 f3 02 ....... debug 

    # ejs.db.mapper/Record.es:989             _errors = {}

    0031: [0] 8a e4 06 00 ................ newObject <type: 0x1b2,  ejs::Object> <argc: 0> <att: >
    0035: [1] 57 ......................... loadThis 
    0036: [2] b3 88 1d 4c ................ putObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0040: [0] 33 18 bc 0f a8 f4 02 ....... debug 

    # ejs.db.mapper/Record.es:990             if (_validations) {

    0047: [0] 83 50 02 ................... getThisTypeSlot <slot: 40> <1> 
    0050: [1] 07 88 03 f7 f7 ............. branchFalse <addr: 251> 
    0055: [0] 33 18 be 0f e8 f4 02 ....... debug 

    # ejs.db.mapper/Record.es:991                 for each (let validation: String in _validations) {

    0062: [0] 83 50 02 ................... getThisTypeSlot <slot: 40> <1> 
    0065: [1] 18 18 00 ................... callObjSlot <slot: 12> <argc: 0> 
    0068: [0] 93 ......................... pushResult 
    0069: [1] 39 ......................... dup 
    0070: [2] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0073: [1] 93 ......................... pushResult 
    0074: [2] 95 ......................... putLocalSlot1 
    0075: [1] 33 18 c0 0f 92 f6 02 ....... debug 

    # ejs.db.mapper/Record.es:992                     let check = validation[0]

    0082: [1] 5c ......................... getLocalSlot1 
    0083: [2] 56 80 2e ................... loadString <> 
    0086: [3] 44 ......................... load0 
    0087: [4] 7c ......................... getObjNameExpr 
    0088: [2] 96 ......................... putLocalSlot2 
    0089: [1] 33 18 c2 0f ee f6 02 ....... debug 

    # ejs.db.mapper/Record.es:993                     let fields = validation[1]

    0096: [1] 5c ......................... getLocalSlot1 
    0097: [2] 56 80 2e ................... loadString <> 
    0100: [3] 45 ......................... load1 
    0101: [4] 7c ......................... getObjNameExpr 
    0102: [2] 97 ......................... putLocalSlot3 
    0103: [1] 33 18 c4 0f cc f7 02 ....... debug 

    # ejs.db.mapper/Record.es:994                     let options = validation[2]

    0110: [1] 5c ......................... getLocalSlot1 
    0111: [2] 56 80 2e ................... loadString <> 
    0114: [3] 46 ......................... load2 
    0115: [4] 7c ......................... getObjNameExpr 
    0116: [2] 98 ......................... putLocalSlot4 
    0117: [1] 33 18 c6 0f ac f8 02 ....... debug 

    # ejs.db.mapper/Record.es:995                     if (fields is Array) {

    0124: [1] 5e ......................... getLocalSlot3 
    0125: [2] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0127: [3] 43 ......................... isA 
    0128: [2] 13 57 ...................... branchFalse8 <addr: 217> 
    0130: [1] 33 18 c8 0f 82 f9 02 ....... debug 

    # ejs.db.mapper/Record.es:996                         for each (let field in fields) {

    0137: [1] 5e ......................... getLocalSlot3 
    0138: [2] 1e 96 e4 01 cc 36 00 ....... callObjName <getValues> <iterator> <argc: 0> 
    0145: [1] 93 ......................... pushResult 
    0146: [2] 39 ......................... dup 
    0147: [3] 18 34 00 ................... callObjSlot <slot: 26> <argc: 0> 
    0150: [2] 93 ......................... pushResult 
    0151: [3] 99 ......................... putLocalSlot5 
    0152: [2] 33 18 ca 0f f4 f9 02 ....... debug 

    # ejs.db.mapper/Record.es:997                             if (_errors[field]) {

    0159: [2] 57 ......................... loadThis 
    0160: [3] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0164: [3] 56 80 2e ................... loadString <> 
    0167: [4] 60 ......................... getLocalSlot5 
    0168: [5] 7c ......................... getObjNameExpr 
    0169: [3] 13 0e ...................... branchFalse8 <addr: 185> 
    0171: [2] 33 18 cc 0f d8 fa 02 ....... debug 

    # ejs.db.mapper/Record.es:998                                 continue

    0178: [2] 3d 4b f7 f7 f7 ............. goto <addr: 146> 
    0183: [2] 3e 00 ...................... goto8 <addr: 185> 
    0185: [2] 33 18 ce 0f aa fb 02 ....... debug 

    # ejs.db.mapper/Record.es:999                             }

    0192: [2] 33 18 d0 0f e6 fb 02 ....... debug 

    # ejs.db.mapper/Record.es:1000                             check(this, field, this[field], options)

    0199: [2] 57 ......................... loadThis 
    0200: [3] 60 ......................... getLocalSlot5 
    0201: [4] 57 ......................... loadThis 
    0202: [5] 56 80 2e ................... loadString <> 
    0205: [6] 60 ......................... getLocalSlot5 
    0206: [7] 7c ......................... getObjNameExpr 
    0207: [5] 5f ......................... getLocalSlot4 
    0208: [6] 1a 04 00 08 ................ callBlockSlot <slot: 2> <0> <argc: 4> 
    0212: [2] 3e bc ...................... goto8 <addr: 146> 
    0214: [2] 90 ......................... pop 
    0215: [1] 3e 1a ...................... goto8 <addr: 243> 
    0217: [1] 33 18 d4 0f 8e 67 .......... debug 

    # ejs.db.mapper/Record.es:1002                     } else {

    0223: [1] 33 18 d6 0f f0 fc 02 ....... debug 

    # ejs.db.mapper/Record.es:1003                         check(this, fields, this[fields], options)

    0230: [1] 57 ......................... loadThis 
    0231: [2] 5e ......................... getLocalSlot3 
    0232: [3] 57 ......................... loadThis 
    0233: [4] 56 80 2e ................... loadString <> 
    0236: [5] 5e ......................... getLocalSlot3 
    0237: [6] 7c ......................... getObjNameExpr 
    0238: [4] 5f ......................... getLocalSlot4 
    0239: [5] 1a 04 00 08 ................ callBlockSlot <slot: 2> <0> <argc: 4> 
    0243: [1] 3d e7 02 f7 f7 ............. goto <addr: 69> 
    0248: [1] 90 ......................... pop 
    0249: [0] 3e 00 ...................... goto8 <addr: 251> 
    0251: [0] 33 18 dc 0f 9e 91 01 ....... debug 

    # ejs.db.mapper/Record.es:1006             }

    0258: [0] 33 18 de 0f 88 fe 02 ....... debug 

    # ejs.db.mapper/Record.es:1007             let thisType = Reflect(this).type

    0265: [0] 57 ......................... loadThis 
    0266: [1] 17 de 01 02 ................ callGlobalSlot <slot: 111> <argc: 1> 
    0270: [0] 93 ......................... pushResult 
    0271: [1] 7b aa 61 d6 02 ............. getObjName <type> <public> 
    0276: [1] 94 ......................... putLocalSlot0 
    0277: [0] 33 18 e0 0f e4 fe 02 ....... debug 

    # ejs.db.mapper/Record.es:1008             if (thisType["validate"]) {

    0284: [0] 5b ......................... getLocalSlot0 
    0285: [1] 56 80 2e ................... loadString <> 
    0288: [2] 56 b4 ff 02 ................ loadString <validate> 
    0292: [3] 7c ......................... getObjNameExpr 
    0293: [1] 13 19 ...................... branchFalse8 <addr: 320> 
    0295: [0] 33 18 e2 0f c6 ff 02 ....... debug 

    # ejs.db.mapper/Record.es:1009                 thisType["validate"].call(this)

    0302: [0] 5b ......................... getLocalSlot0 
    0303: [1] 56 80 2e ................... loadString <> 
    0306: [2] 56 b4 ff 02 ................ loadString <validate> 
    0310: [3] 7c ......................... getObjNameExpr 
    0311: [1] 57 ......................... loadThis 
    0312: [2] 1e e8 c9 02 00 02 .......... callObjName <call> <> <argc: 1> 
    0318: [0] 3e 00 ...................... goto8 <addr: 320> 
    0320: [0] 33 18 e6 0f a6 80 03 ....... debug 

    # ejs.db.mapper/Record.es:1011             if (_errors.length == 0) {

    0327: [0] 57 ......................... loadThis 
    0328: [1] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0332: [1] 7b 8e 53 02 ................ getObjName <length> <ejs> 
    0336: [1] 44 ......................... load0 
    0337: [2] 25 ......................... compareEq 
    0338: [1] 13 0c ...................... branchFalse8 <addr: 352> 
    0340: [0] 33 18 e8 0f f4 80 03 ....... debug 

    # ejs.db.mapper/Record.es:1012                 coerceToEjsTypes()

    0347: [0] 19 6c 00 ................... callThisSlot <slot: 54> <argc: 0> 
    0350: [0] 3e 00 ...................... goto8 <addr: 352> 
    0352: [0] 33 18 ec 0f ba 81 03 ....... debug 

    # ejs.db.mapper/Record.es:1014             return _errors.length == 0

    0359: [0] 57 ......................... loadThis 
    0360: [1] 7b 88 1d 4c ................ getObjName <_errors> <internal-fa62c6843d5c582731f196f8cecaee45-5> 
    0364: [1] 7b 8e 53 02 ................ getObjName <length> <ejs> 
    0368: [1] 44 ......................... load0 
    0369: [2] 25 ......................... compareEq 
    0370: [1] bf ......................... returnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration    147     150        214          214       StopIteration
1   iteration     70      73        248          248       StopIteration

VARIABLE:   [thisType-00]  private var thisType
VARIABLE:   [validation-01]  -hoisted-1 var validation : String
VARIABLE:   [check-02]  -hoisted-1 var check
VARIABLE:   [fields-03]  -hoisted-1 var fields
VARIABLE:   [options-04]  -hoisted-1 var options
VARIABLE:   [field-05]  -hoisted-5 var field

FUNCTION:   [Record-93]  public const static function validateUnique(fields: Object, option) : void

     ARG:   [arg-00]   private fields : Object
     ARG:   [arg-01]   private option

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 95 ......................... putLocalSlot1 
    0010: [0] 33 18 f6 0f b2 83 03 ....... debug 

    # ejs.db.mapper/Record.es:1019             _validations.append([checkUnique, fields, options])

    0017: [0] 83 50 02 ................... getThisTypeSlot <slot: 40> <1> 
    0020: [1] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0022: [2] 89 ......................... new 
    0023: [2] 39 ......................... dup 
    0024: [3] 83 6a 02 ................... getThisTypeSlot <slot: 53> <1> 
    0027: [4] c5 ......................... swap 
    0028: [4] 56 80 2e ................... loadString <> 
    0031: [5] 44 ......................... load0 
    0032: [6] b2 ......................... putObjNameExpr 
    0033: [2] 39 ......................... dup 
    0034: [3] 5b ......................... getLocalSlot0 
    0035: [4] c5 ......................... swap 
    0036: [4] 56 80 2e ................... loadString <> 
    0039: [5] 45 ......................... load1 
    0040: [6] b2 ......................... putObjNameExpr 
    0041: [2] 39 ......................... dup 
    0042: [3] 79 b0 39 80 2e ............. getScopedName <options> <> 
    0047: [4] c5 ......................... swap 
    0048: [4] 56 80 2e ................... loadString <> 
    0051: [5] 46 ......................... load2 
    0052: [6] b2 ......................... putObjNameExpr 
    0053: [2] 18 36 02 ................... callObjSlot <slot: 27> <argc: 1> 
    0056: [0] 93 ......................... pushResult 
    0057: [1] bf ......................... returnValue 
    
VARIABLE:   [fields-00]  private var fields : Object
VARIABLE:   [option-01]  private var option

FUNCTION:   [Record-94]  public const static function wrapFilter(fn, options: Object) : Void

     ARG:   [arg-00]   private fn
     ARG:   [arg-01]   private options : Object

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 95 ......................... putLocalSlot1 
    0010: [0] 33 18 86 10 ee 85 03 ....... debug 

    # ejs.db.mapper/Record.es:1027             _wrapFilters ||= []

    0017: [0] 83 56 02 ................... getThisTypeSlot <slot: 43> <1> 
    0020: [1] 39 ......................... dup 
    0021: [2] 14 04 ...................... branchTrue8 <addr: 27> 
    0023: [1] 90 ......................... pop 
    0024: [0] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0026: [1] 89 ......................... new 
    0027: [1] bc 56 02 ................... putThisTypeSlot <slot: 43> <1> 
    0030: [0] 33 18 88 10 ae 86 03 ....... debug 

    # ejs.db.mapper/Record.es:1028             _wrapFilters.append([fn, options])

    0037: [0] 83 56 02 ................... getThisTypeSlot <slot: 43> <1> 
    0040: [1] 7e 0a ...................... getGlobalSlot <slot: 5> 
    0042: [2] 89 ......................... new 
    0043: [2] 39 ......................... dup 
    0044: [3] 5b ......................... getLocalSlot0 
    0045: [4] c5 ......................... swap 
    0046: [4] 56 80 2e ................... loadString <> 
    0049: [5] 44 ......................... load0 
    0050: [6] b2 ......................... putObjNameExpr 
    0051: [2] 39 ......................... dup 
    0052: [3] 5c ......................... getLocalSlot1 
    0053: [4] c5 ......................... swap 
    0054: [4] 56 80 2e ................... loadString <> 
    0057: [5] 45 ......................... load1 
    0058: [6] b2 ......................... putObjNameExpr 
    0059: [2] 18 36 02 ................... callObjSlot <slot: 27> <argc: 1> 
    0062: [0] be ......................... return 
    0063: [0] 33 18 8a 10 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:1029         }
    
VARIABLE:   [fn-00]  private var fn
VARIABLE:   [options-01]  private var options : Object

FUNCTION:   [Record-95]  public const static get function columnNames() : Array


    0000: [0] 33 18 94 10 88 88 03 ....... debug 

    # ejs.db.mapper/Record.es:1034             return getColumnNames()

    0007: [0] 1d 7c 00 00 ................ callThisStaticSlot <slot: 62> <0> <argc: 0> 
    0011: [0] 93 ......................... pushResult 
    0012: [1] bf ......................... returnValue 
    

FUNCTION:   [Record-96]  public const static get function columnTitles() : Array


    0000: [0] 33 18 9c 10 d0 89 03 ....... debug 

    # ejs.db.mapper/Record.es:1038             return getColumnTitles()

    0007: [0] 1d 7e 00 00 ................ callThisStaticSlot <slot: 63> <0> <argc: 0> 
    0011: [0] 93 ......................... pushResult 
    0012: [1] bf ......................... returnValue 
    

FUNCTION:   [Record-97]  public const static get function db() : void


    0000: [0] 33 18 a4 10 8c 8b 03 ....... debug 

    # ejs.db.mapper/Record.es:1042             return getDb()

    0007: [0] 1d 82 01 00 00 ............. callThisStaticSlot <slot: 65> <0> <argc: 0> 
    0012: [0] 93 ......................... pushResult 
    0013: [1] bf ......................... returnValue 
    

FUNCTION:   [Record-98]  public const static get function keyName() : String


    0000: [0] 33 18 ac 10 a2 8c 03 ....... debug 

    # ejs.db.mapper/Record.es:1046             return getKeyName()

    0007: [0] 1d 86 01 00 00 ............. callThisStaticSlot <slot: 67> <0> <argc: 0> 
    0012: [0] 93 ......................... pushResult 
    0013: [1] bf ......................... returnValue 
    

FUNCTION:   [Record-99]  public const static get function numRows() : String


    0000: [0] 33 18 b4 10 d2 8d 03 ....... debug 

    # ejs.db.mapper/Record.es:1050             return getNumRows()

    0007: [0] 1d 88 01 00 00 ............. callThisStaticSlot <slot: 68> <0> <argc: 0> 
    0012: [0] 93 ......................... pushResult 
    0013: [1] bf ......................... returnValue 
    

FUNCTION:   [Record-100]  public const static get function tableName() : String


    0000: [0] 33 18 bc 10 f6 8e 03 ....... debug 

    # ejs.db.mapper/Record.es:1054             return getTableName()

    0007: [0] 1d 8c 01 00 00 ............. callThisStaticSlot <slot: 70> <0> <argc: 0> 
    0012: [0] 93 ......................... pushResult 
    0013: [1] bf ......................... returnValue 
    

FUNCTION:   [Record-101]  public const function constructorOLD(fields: Object) : Void

     ARG:   [arg-00]   private fields : Object

    0000: [0] 41 02 02 08 ................ initDefaultArgs8 <2> <4> <10> 
    0004: [0] 50 ......................... loadGlobal 
    0005: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0009: [1] 94 ......................... putLocalSlot0 
    0010: [0] 33 18 c4 10 94 32 .......... debug 

    # ejs.db.mapper/Record.es:1058             initialize(fields)

    0016: [0] 5b ......................... getLocalSlot0 
    0017: [1] 19 5a 02 ................... callThisSlot <slot: 45> <argc: 1> 
    0020: [0] be ......................... return 
    0021: [0] 33 18 c6 10 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:1059         }
    
VARIABLE:   [fields-00]  private var fields : Object
VARIABLE:   [_keyValue-00]  internal-fa62c6843d5c582731f196f8cecaee45-5 var _keyValue : Object
VARIABLE:   [_errors-01]  internal-fa62c6843d5c582731f196f8cecaee45-5 var _errors : Object
VARIABLE:   [_cacheAssoc-02]  internal-fa62c6843d5c582731f196f8cecaee45-5 var _cacheAssoc : Object

CLASS:      class Column extends Object
            #  Class Details: 27 class traits, 2 instance traits, requested slot 144

FUNCTION:   [Column-26]  -constructor- const function Column(name: String, accessor: Boolean, ejsType: Type, sqlType: String) : void

     ARG:   [arg-00]   private name : String
     ARG:   [arg-01]   private accessor : Boolean
     ARG:   [arg-02]   private ejsType : Type
     ARG:   [arg-03]   private sqlType : String

    0000: [0] 41 04 04 0a 10 16 .......... initDefaultArgs8 <4> <6> <12> <18> <24> 
    0006: [0] 50 ......................... loadGlobal 
    0007: [1] 7b e4 69 02 ................ getObjName <false> <ejs> 
    0011: [1] 95 ......................... putLocalSlot1 
    0012: [0] 50 ......................... loadGlobal 
    0013: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0017: [1] 96 ......................... putLocalSlot2 
    0018: [0] 50 ......................... loadGlobal 
    0019: [1] 7b 8a 32 02 ................ getObjName <null> <ejs> 
    0023: [1] 97 ......................... putLocalSlot3 
    0024: [0] 33 18 e4 10 c6 96 03 ....... debug 

    # ejs.db.mapper/Record.es:1074             this.ejsType = ejsType

    0031: [0] 5d ......................... getLocalSlot2 
    0032: [1] 57 ......................... loadThis 
    0033: [2] b3 9a 61 d6 02 ............. putObjName <ejsType> <public> 
    0038: [0] 33 18 e6 10 8c 97 03 ....... debug 

    # ejs.db.mapper/Record.es:1075             this.sqlType = sqlType

    0045: [0] 5e ......................... getLocalSlot3 
    0046: [1] 57 ......................... loadThis 
    0047: [2] b3 96 b0 01 d6 02 .......... putObjName <sqlType> <public> 
    0053: [0] be ......................... return 
    0054: [0] 33 18 e8 10 d2 32 .......... debug 

    # ejs.db.mapper/Record.es:1076         }
    
VARIABLE:   [name-00]  private var name : String
VARIABLE:   [accessor-01]  private var accessor : Boolean
VARIABLE:   [ejsType-02]  private var ejsType : Type
VARIABLE:   [sqlType-03]  private var sqlType : String
VARIABLE:   [ejsType-00]  public var ejsType : Object
VARIABLE:   [sqlType-01]  public var sqlType : Object

FUNCTION:   [plural-145]  ejs.db.mapper function plural(name: String) : String

     ARG:   [arg-00]   private name : String

    0000: [0] 33 18 f2 10 b8 98 03 ....... debug 

    # ejs.db.mapper/Record.es:1081         name + "s"

    0007: [0] 5b ......................... getLocalSlot0 
    0008: [1] 56 de 98 03 ................ loadString <s> 
    0012: [2] 00 ......................... add 
    0013: [1] bf ......................... returnValue 
    
VARIABLE:   [name-00]  private var name : String

FUNCTION:   [singular-146]  ejs.db.mapper function singular(name: String) : String

     ARG:   [arg-00]   private name : String
   LOCAL:   [local-01] var s : String

    0000: [0] 33 18 fa 10 be 99 03 ....... debug 

    # ejs.db.mapper/Record.es:1085         var s: String = name + "s"

    0007: [0] 5b ......................... getLocalSlot0 
    0008: [1] 56 de 98 03 ................ loadString <s> 
    0012: [2] 00 ......................... add 
    0013: [1] 95 ......................... putLocalSlot1 
    0014: [0] 33 18 fc 10 84 9a 03 ....... debug 

    # ejs.db.mapper/Record.es:1086         if (name.endsWith("ies")) {

    0021: [0] 5b ......................... getLocalSlot0 
    0022: [1] 56 cc 9a 03 ................ loadString <ies> 
    0026: [2] 18 42 02 ................... callObjSlot <slot: 33> <argc: 1> 
    0029: [0] 93 ......................... pushResult 
    0030: [1] 13 17 ...................... branchFalse8 <addr: 55> 
    0032: [0] 33 18 fe 10 d4 9a 03 ....... debug 

    # ejs.db.mapper/Record.es:1087             return name.slice(0,-3) + "y"

    0039: [0] 5b ......................... getLocalSlot0 
    0040: [1] 44 ......................... load0 
    0041: [2] 47 ......................... load3 
    0042: [3] 88 ......................... neg 
    0043: [3] 18 6e 04 ................... callObjSlot <slot: 55> <argc: 2> 
    0046: [0] 93 ......................... pushResult 
    0047: [1] 56 a8 9b 03 ................ loadString <y> 
    0051: [2] 00 ......................... add 
    0052: [1] bf ......................... returnValue 
    0053: [0] 3e 48 ...................... goto8 <addr: 127> 
    0055: [0] 33 18 80 11 ac 9b 03 ....... debug 

    # ejs.db.mapper/Record.es:1088         } else if (name.endsWith("es")) {

    0062: [0] 5b ......................... getLocalSlot0 
    0063: [1] 56 80 9c 03 ................ loadString <es> 
    0067: [2] 18 42 02 ................... callObjSlot <slot: 33> <argc: 1> 
    0070: [0] 93 ......................... pushResult 
    0071: [1] 13 12 ...................... branchFalse8 <addr: 91> 
    0073: [0] 33 18 82 11 86 9c 03 ....... debug 

    # ejs.db.mapper/Record.es:1089             return name.slice(0,-2)

    0080: [0] 5b ......................... getLocalSlot0 
    0081: [1] 44 ......................... load0 
    0082: [2] 46 ......................... load2 
    0083: [3] 88 ......................... neg 
    0084: [3] 18 6e 04 ................... callObjSlot <slot: 55> <argc: 2> 
    0087: [0] 93 ......................... pushResult 
    0088: [1] bf ......................... returnValue 
    0089: [0] 3e 24 ...................... goto8 <addr: 127> 
    0091: [0] 33 18 84 11 ce 9c 03 ....... debug 

    # ejs.db.mapper/Record.es:1090         } else if (name.endsWith("s")) {

    0098: [0] 5b ......................... getLocalSlot0 
    0099: [1] 56 de 98 03 ................ loadString <s> 
    0103: [2] 18 42 02 ................... callObjSlot <slot: 33> <argc: 1> 
    0106: [0] 93 ......................... pushResult 
    0107: [1] 13 12 ...................... branchFalse8 <addr: 127> 
    0109: [0] 33 18 86 11 a0 9d 03 ....... debug 

    # ejs.db.mapper/Record.es:1091             return name.slice(0,-1)

    0116: [0] 5b ......................... getLocalSlot0 
    0117: [1] 44 ......................... load0 
    0118: [2] 45 ......................... load1 
    0119: [3] 88 ......................... neg 
    0120: [3] 18 6e 04 ................... callObjSlot <slot: 55> <argc: 2> 
    0123: [0] 93 ......................... pushResult 
    0124: [1] bf ......................... returnValue 
    0125: [0] 3e 00 ...................... goto8 <addr: 127> 
    0127: [0] 33 18 8a 11 e8 9d 03 ....... debug 

    # ejs.db.mapper/Record.es:1093         return name.toPascal()

    0134: [0] 5b ......................... getLocalSlot0 
    0135: [1] 18 60 00 ................... callObjSlot <slot: 48> <argc: 0> 
    0138: [0] 93 ......................... pushResult 
    0139: [1] bf ......................... returnValue 
    
VARIABLE:   [name-00]  private var name : String
VARIABLE:   [s-01]  private var s : String

FUNCTION:   [mapType-147]  ejs.db.mapper function mapType(value: Object) : String

     ARG:   [arg-00]   private value : Object

    0000: [0] 33 18 9a 11 94 9f 03 ....... debug 

    # ejs.db.mapper/Record.es:1101         if (value is Date) {

    0007: [0] 5b ......................... getLocalSlot0 
    0008: [1] 7e 1e ...................... getGlobalSlot <slot: 15> 
    0010: [2] 43 ......................... isA 
    0011: [1] 13 20 ...................... branchFalse8 <addr: 45> 
    0013: [0] 33 18 9c 11 ce 9f 03 ....... debug 

    # ejs.db.mapper/Record.es:1102             return "%Ld".format((new Date(value)).time)

    0020: [0] 56 e8 b6 02 ................ loadString <%Ld> 
    0024: [1] 7e 1e ...................... getGlobalSlot <slot: 15> 
    0026: [2] 89 ......................... new 
    0027: [2] 5b ......................... getLocalSlot0 
    0028: [3] 20 02 ...................... callConstructor <argc: 1> 
    0030: [2] 7b f0 b6 02 d6 02 .......... getObjName <time> <public> 
    0036: [2] 1e 84 47 00 02 ............. callObjName <format> <> <argc: 1> 
    0041: [0] 93 ......................... pushResult 
    0042: [1] bf ......................... returnValue 
    0043: [0] 3e 23 ...................... goto8 <addr: 80> 
    0045: [0] 33 18 9e 11 be a0 03 ....... debug 

    # ejs.db.mapper/Record.es:1103         } else if (value is Number) {

    0052: [0] 5b ......................... getLocalSlot0 
    0053: [1] 7e d6 01 ................... getGlobalSlot <slot: 107> 
    0056: [2] 43 ......................... isA 
    0057: [1] 13 15 ...................... branchFalse8 <addr: 80> 
    0059: [0] 33 18 a0 11 8a a1 03 ....... debug 

    # ejs.db.mapper/Record.es:1104             return "%Ld".format(value)

    0066: [0] 56 e8 b6 02 ................ loadString <%Ld> 
    0070: [1] 5b ......................... getLocalSlot0 
    0071: [2] 1e 84 47 00 02 ............. callObjName <format> <> <argc: 1> 
    0076: [0] 93 ......................... pushResult 
    0077: [1] bf ......................... returnValue 
    0078: [0] 3e 00 ...................... goto8 <addr: 80> 
    0080: [0] 33 18 a4 11 d8 a1 03 ....... debug 

    # ejs.db.mapper/Record.es:1106         return value

    0087: [0] 5b ......................... getLocalSlot0 
    0088: [1] bf ......................... returnValue 
    
VARIABLE:   [value-00]  private var value : Object

----------------------------------------------------------------------------------------------

#
#  Global slot assignments (Num prop 148)
#
0143    public var Record: Type
0144    ejs.db.mapper var Column: Type
0145    ejs.db.mapper function plural
0146    ejs.db.mapper function singular
0147    ejs.db.mapper function mapType

#
#  Initializer slot assignments (Num prop 0)
#

#
#  Class slot assignments for the "Record" class (Num slots 102, num inherited 26)
#
0000    public function constructor
0001    ejs function length
0002    public function prototype
0003    public function clone
0004    reserved slot for base class property
0005    reserved slot for base class property
0006    reserved slot for base class property
0007    reserved slot for base class property
0008    iterator function get
0009    reserved slot for base class property
0010    reserved slot for base class property
0011    reserved slot for base class property
0012    iterator function getValues
0013    public function hasOwnProperty
0014    reserved slot for base class property
0015    reserved slot for base class property
0016    public function isPrototypeOf
0017    reserved slot for base class property
0018    reserved slot for base class property
0019    reserved slot for base class property
0020    public function propertyIsEnumerable
0021    reserved slot for base class property
0022    public function toJSON
0023    public function toLocaleString
0024    public function toString
0025    public function valueOf
0026    -constructor- function Record
0027    -initializer- function Record-initializer
0028    internal-fa62c6843d5c582731f196f8cecaee45-5 var _assocName: String
0029    internal-fa62c6843d5c582731f196f8cecaee45-5 var _belongsTo: Array
0030    internal-fa62c6843d5c582731f196f8cecaee45-5 var _className: String
0031    internal-fa62c6843d5c582731f196f8cecaee45-5 var _columns: Object
0032    internal-fa62c6843d5c582731f196f8cecaee45-5 var _hasOne: Array
0033    internal-fa62c6843d5c582731f196f8cecaee45-5 var _hasMany: Array
0034    internal-fa62c6843d5c582731f196f8cecaee45-5 var _db: Database
0035    internal-fa62c6843d5c582731f196f8cecaee45-5 var _foreignId: String
0036    internal-fa62c6843d5c582731f196f8cecaee45-5 var _keyName: String
0037    internal-fa62c6843d5c582731f196f8cecaee45-5 var _model: Type
0038    internal-fa62c6843d5c582731f196f8cecaee45-5 var _tableName: String
0039    internal-fa62c6843d5c582731f196f8cecaee45-5 var _trace: Boolean
0040    internal-fa62c6843d5c582731f196f8cecaee45-5 var _validations: Array
0041    internal-fa62c6843d5c582731f196f8cecaee45-5 var _beforeFilters: Array
0042    internal-fa62c6843d5c582731f196f8cecaee45-5 var _afterFilters: Array
0043    internal-fa62c6843d5c582731f196f8cecaee45-5 var _wrapFilters: Array
0044    internal-fa62c6843d5c582731f196f8cecaee45-5 var ErrorMessages
0045    public function initialize
0046    public function afterFilter
0047    public function beforeFilter
0048    public function belongsTo
0049    [Record,private] function cachedRead
0050    [Record,private] function checkFormat
0051    [Record,private] function checkNumber
0052    [Record,private] function checkPresent
0053    [Record,private] function checkUnique
0054    [Record,private] function coerceToEjsTypes
0055    [Record,private] function createAssociations
0056    [Record,private] function createRecord
0057    public function error
0058    public function find
0059    public function findAll
0060    public function findOneWhere
0061    public function findWhere
0062    public function getColumnNames
0063    public function getColumnTitles
0064    public function getColumnType
0065    public function getDb
0066    public function getErrors
0067    public function getKeyName
0068    public function getNumRows
0069    [Record,private] function getSchema
0070    public function getTableName
0071    public function hasAndBelongsToMany
0072    public function hasError
0073    public function hasMany
0074    public function hasOne
0075    [Record,private] function innerFind
0076    [Record,private] function makeLazyReader
0077    [Record,private] function mapSqlTypeToEjs
0078    [Record,private] function prepareValue
0079    [Record,private] function readRecords
0080    public function remove
0081    [Record,private] function runFilters
0082    public function save
0083    public function saveUpdate
0084    public function setDb
0085    public function setKeyName
0086    public function setTableName
0087    public function sql
0088    public function trace
0089    public function validateFormat
0090    public function validateNumber
0091    public function validatePresence
0092    public function validateRecord
0093    public function validateUnique
0094    public function wrapFilter
0095    public function columnNames
0096    public function columnTitles
0097    public function db
0098    public function keyName
0099    public function numRows
0100    public function tableName
0101    public function constructorOLD

#
#  Instance slot assignments for the "Record" class (Num prop 3, num inherited 0)
#
0000    internal-fa62c6843d5c582731f196f8cecaee45-5 var _keyValue: Object
0001    internal-fa62c6843d5c582731f196f8cecaee45-5 var _errors: Object
0002    internal-fa62c6843d5c582731f196f8cecaee45-5 var _cacheAssoc: Object

#
#  Class slot assignments for the "Column" class (Num slots 27, num inherited 26)
#
0000    public function constructor
0001    ejs function length
0002    public function prototype
0003    public function clone
0004    reserved slot for base class property
0005    reserved slot for base class property
0006    reserved slot for base class property
0007    reserved slot for base class property
0008    iterator function get
0009    reserved slot for base class property
0010    reserved slot for base class property
0011    reserved slot for base class property
0012    iterator function getValues
0013    public function hasOwnProperty
0014    reserved slot for base class property
0015    reserved slot for base class property
0016    public function isPrototypeOf
0017    reserved slot for base class property
0018    reserved slot for base class property
0019    reserved slot for base class property
0020    public function propertyIsEnumerable
0021    reserved slot for base class property
0022    public function toJSON
0023    public function toLocaleString
0024    public function toString
0025    public function valueOf
0026    -constructor- function Column

#
#  Instance slot assignments for the "Column" class (Num prop 2, num inherited 0)
#
0000    public var ejsType: Object
0001    public var sqlType: Object

----------------------------------------------------------------------------------------------
#
#  Constant Pool (size 26799 bytes)
#
0000   ""
0001   "ejs"
0002   "ejs.db"
0003   "ejs.db.mapper/Record.es"
0004   "}"
0005   "internal-fa62c6843d5c582731f196f8cecaee45-5"
0006   "ejs.db.mapper"
0007   "module ejs.db.mapper {"
0008   "    require ejs.db"
0009   "    public class Record {"
0010   "Record"
0011   "public"
0012   "        static var  _assocName: String        //  Name for use in associations. Lower case class name"
0013   "_assocName"
0014   "String"
0015   "        static var  _belongsTo: Array         //  List of belonging associations"
0016   "_belongsTo"
0017   "Array"
0018   "        static var  _className: String        //  Model class name"
0019   "_className"
0020   "        static var  _columns: Object          //  List of columns in this database table"
0021   "_columns"
0022   "Object"
0023   "        static var  _hasOne: Array            //  List of 1-1 containment associations"
0024   "_hasOne"
0025   "        static var  _hasMany: Array           //  List of 1-many containment  associations"
0026   "_hasMany"
0027   "        static var  _db: Database             //  Hosting database"
0028   "_db"
0029   "Database"
0030   "        static var  _foreignId: String        //  Camel case class name with "Id". (userCartId))"
0031   "_foreignId"
0032   "        static var  _keyName: String          //  Name of the key column (typically "id")"
0033   "_keyName"
0034   "        static var  _model: Type              //  Model class"
0035   "_model"
0036   "Type"
0037   "        static var  _tableName: String        //  Name of the database table. Plural, PascalCase"
0038   "_tableName"
0039   "        static var  _trace: Boolean           //  Trace database SQL statements"
0040   "_trace"
0041   "Boolean"
0042   "        static var  _validations: Array"
0043   "_validations"
0044   "        static var  _beforeFilters: Array     //  Filters that run before saving data"
0045   "_beforeFilters"
0046   "        static var  _afterFilters: Array      //  Filters that run after saving data"
0047   "_afterFilters"
0048   "        static var  _wrapFilters: Array       //  Filters that run before and after saving data"
0049   "_wrapFilters"
0050   "        var _keyValue: Object                 //  Record key column value"
0051   "_keyValue"
0052   "        var _errors: Object                   //  Error message aggregation"
0053   "_errors"
0054   "        var _cacheAssoc: Object               //  Cached association data"
0055   "_cacheAssoc"
0056   "        static var ErrorMessages = {"
0057   "ErrorMessages"
0058   "            accepted: "must be accepted","
0059   "accepted"
0060   "must be accepted"
0061   "            blank: "can't be blank","
0062   "blank"
0063   "can't be blank"
0064   "            confirmation: "doesn't match confirmation","
0065   "confirmation"
0066   "doesn't match confirmation"
0067   "            empty: "can't be empty","
0068   "empty"
0069   "can't be empty"
0070   "            invalid: "is invalid","
0071   "invalid"
0072   "is invalid"
0073   "            missing: "is missing","
0074   "missing"
0075   "is missing"
0076   "            notNumber: "is not a number","
0077   "notNumber"
0078   "is not a number"
0079   "            notUnique: "is not unique","
0080   "notUnique"
0081   "is not unique"
0082   "            taken: "already taken","
0083   "taken"
0084   "already taken"
0085   "            tooLong: "is too long","
0086   "tooLong"
0087   "is too long"
0088   "            tooShort: "is too short","
0089   "tooShort"
0090   "is too short"
0091   "            wrongLength: "wrong length","
0092   "wrongLength"
0093   "wrong length"
0094   "            wrongFormat: "wrong format","
0095   "wrongFormat"
0096   "wrong format"
0097   "        _keyName = "id""
0098   "id"
0099   "        _className = Reflect(this).name"
0100   "name"
0101   "        _model = global[_className]"
0102   "global"
0103   ""
0104   "        _assocName = _className.toCamel()"
0105   "        _foreignId = _className.toCamel() + _keyName.toPascal()"
0106   "        _tableName = plural(_className).toPascal()"
0107   "plural"
0108   "toPascal"
0109   "        use default namespace public"
0110   "        function Record(fields: Object? = null) {"
0111   "null"
0112   "            initialize(fields)"
0113   "        }"
0114   "-constructor-"
0115   "fields"
0116   "private"
0117   "        function initialize(fields: Object? = null): Void {"
0118   "            if (fields) for (let field in fields) {"
0119   "field"
0120   "-hoisted-1"
0121   "                this."public"::[field] = fields[field]"
0122   "initialize"
0123   "Void"
0124   "StopIteration"
0125   "iterator"
0126   "        static function afterFilter(fn, options: Object? = null): Void {"
0127   "            _afterFilters ||= []"
0128   "            _afterFilters.append([fn, options])"
0129   "afterFilter"
0130   "fn"
0131   "options"
0132   "        static function beforeFilter(fn, options: Object? = null): Void {"
0133   "            _beforeFilters ||= []"
0134   "            _beforeFilters.append([fn, options])"
0135   "beforeFilter"
0136   "        static function belongsTo(owner, options: Object? = null): Void {"
0137   "            _belongsTo ||= []"
0138   "            _belongsTo.append(owner)"
0139   "belongsTo"
0140   "owner"
0141   "        private static function cachedRead(rec: Record, field: String, model, key: String, options: Object): Object {"
0142   "            rec._cacheAssoc ||= {}"
0143   "            if (rec._cacheAssoc[field] == null) {"
0144   "                rec._cacheAssoc[field] =  model.readRecords(key, options); "
0145   "readRecords"
0146   "            return rec._cacheAssoc[field]"
0147   "cachedRead"
0148   "[Record,private]"
0149   "rec"
0150   "model"
0151   "key"
0152   "        private static function checkFormat(thisObj: Record, field: String, value, options: Object): Void {"
0153   "            if (! RegExp(options.format).test(value)) {"
0154   "format"
0155   "                thisObj._errors[field] = options.message ? options.message : ErrorMessages.wrongFormat"
0156   "message"
0157   "checkFormat"
0158   "thisObj"
0159   "value"
0160   "        private static function checkNumber(thisObj: Record, field: String, value, options): Void {"
0161   "            if (! RegExp(/^[0-9]+$/).test(value)) {"
0162   "/^[0-9]+$/"
0163   "                thisObj._errors[field] = options.message ? options.message : ErrorMessages.notNumber"
0164   "checkNumber"
0165   "        private static function checkPresent(thisObj: Record, field: String, value, options): Void {"
0166   "            if (value == undefined) {"
0167   "undefined"
0168   "                thisObj._errors[field] = options.message ? options.message : ErrorMessages.missing"
0169   "            } else if (value.length == 0 || value.trim() == "" && thisObj._errors[field] == undefined) {"
0170   "length"
0171   "trim"
0172   "                thisObj._errors[field] = ErrorMessages.blank"
0173   "checkPresent"
0174   "        private static function checkUnique(thisObj: Record, field: String, value, options): Void {"
0175   "grid"
0176   "            let grid: Array"
0177   "            if (thisObj._keyValue) {"
0178   "                grid = findWhere(field + ' = "' + value + '" AND id <> ' + thisObj._keyValue)"
0179   " = ""
0180   "" AND id <> "
0181   "            } else {"
0182   "                grid = findWhere(field + ' = "' + value + '"')"
0183   """
0184   "            if (grid.length > 0) {"
0185   "                thisObj._errors[field] = options.message ? options.message : ErrorMessages.notUnique"
0186   "checkUnique"
0187   "        private function coerceToEjsTypes(): Void {"
0188   "            for (let field: String in this) {"
0189   "-hoisted-0"
0190   "get"
0191   "col"
0192   "                let col: Column = _columns[field]"
0193   "                if (col == undefined) {"
0194   "                    continue"
0195   "                if (col.ejsType == Reflect(this[field]).type) {"
0196   "ejsType"
0197   "type"
0198   "                }"
0199   "                let value: String = this[field]"
0200   "                switch (col.ejsType) {"
0201   "                case Boolean:"
0202   "                    if (value is String) {"
0203   "                        this[field] = (value.trim().toLower() == "true")"
0204   "toLower"
0205   "true"
0206   "                    } else if (value is Number) {"
0207   "                        this[field] = (value == 1)"
0208   "                    } else {"
0209   "                        this[field] = value cast Boolean"
0210   "                    }"
0211   "                    this[field] = (this[field]) ? true : false"
0212   "false"
0213   "                    break"
0214   "                case Date:"
0215   "                    this[field] = new Date(value)"
0216   "                case Number:"
0217   "                    this[field] = this[field] cast Number"
0218   "coerceToEjsTypes"
0219   "Column"
0220   "        private static function createAssociations(rec: Record, set: Array, preload, options): Void {"
0221   "            for each (let model in set) {"
0222   "-hoisted-4"
0223   "                if (model is Array) model = model[0]"
0224   "                if (preload == true || (preload && preload.contains(model))) {"
0225   "contains"
0226   "association"
0227   "-hoisted-5"
0228   "                    let association = {}"
0229   "                    if (!model._columns) model.getSchema()"
0230   "getSchema"
0231   "                    for (let field: String in model._columns) {"
0232   "-hoisted-6"
0233   "f"
0234   "                        let f: String = "_" + model._className + field.toPascal()"
0235   "_"
0236   "                        association[field] = rec[f]"
0237   "                        delete rec.public::[f]"
0238   "                    rec[model._assocName] = model.createRecord(association, options)"
0239   "createRecord"
0240   "                } else {"
0241   "                    rec[model._assocName] = makeLazyReader(rec, model._assocName, model, rec[model._foreignId])"
0242   "                    for (let field: String  in model._columns) {"
0243   "-hoisted-8"
0244   "                        if (rec[f]) {"
0245   "                            delete rec.public::[f]"
0246   "createAssociations"
0247   "set"
0248   "preload"
0249   "        private static function createRecord(data: Object, options: Object = {}) {"
0250   "            let rec: Record = new global[_className]"
0251   "            rec.initialize(data)"
0252   "            rec._keyValue = data[_keyName]"
0253   "            let subOptions = {}"
0254   "subOptions"
0255   "            if (options.depth) {"
0256   "depth"
0257   "                subOptions.depth = options.depth"
0258   "                subOptions.depth--"
0259   "            if (options.include) {"
0260   "include"
0261   "                createAssociations(rec, options.include, true, subOptions)"
0262   "            if (options.depth != 0) {"
0263   "                if (_belongsTo) {"
0264   "                    createAssociations(rec, _belongsTo, options.preload, subOptions)"
0265   "                if (_hasOne) {"
0266   "                    for each (model in _hasOne) {"
0267   "                        if (!rec[model._assocName]) {"
0268   "                            rec[model._assocName] = makeLazyReader(rec, model._assocName, model, null,"
0269   "                                {conditions: rec._foreignId + " = " + data[_keyName] + " LIMIT 1"})"
0270   "conditions"
0271   " = "
0272   " LIMIT 1"
0273   "                if (_hasMany) {"
0274   "                    for each (model in _hasMany) {"
0275   "                                {conditions: rec._foreignId + " = " + data[_keyName]})"
0276   "            }"
0277   "            rec.coerceToEjsTypes()"
0278   "            return rec"
0279   "data"
0280   "        function error(field: String, msg: String): Void {"
0281   "            field ||= """
0282   "            _errors[field] = msg"
0283   "error"
0284   "msg"
0285   "        static function find(key: Object, options: Object = {}): Object {"
0286   "            let grid: Array = innerFind(key, 1, options)"
0287   "            if (grid.length >= 1) {"
0288   "results"
0289   "-hoisted-3"
0290   "                let results = createRecord(grid[0], options)"
0291   "                if (options && options.debug) {"
0292   "debug"
0293   "                    print("RESULTS: " + serialize(results))"
0294   "RESULTS: "
0295   "                return results"
0296   "            return null"
0297   "find"
0298   "        static function findAll(options: Object = {}): Array {"
0299   "            let grid: Array = innerFind(null, null, options)"
0300   "            for (let i = 0; i < grid.length; i++) {"
0301   "i"
0302   "-hoisted-2"
0303   "                grid[i] = createRecord(grid[i], options)"
0304   "            if (options && options.debug) {"
0305   "                print("RESULTS: " + serialize(grid))"
0306   "            return grid"
0307   "findAll"
0308   "        static function findOneWhere(where: String): Object {"
0309   "            let grid: Array = innerFind(null, 1, { conditions: [where]})"
0310   "                return createRecord(grid[0])"
0311   "findOneWhere"
0312   "where"
0313   "        static function findWhere(where: String, count: Number? = null): Array {"
0314   "            let grid: Array = innerFind(null, null, { conditions: [where]})"
0315   "            for (i in grid.length) {"
0316   "                grid[i] = createRecord(grid[i])"
0317   "findWhere"
0318   "count"
0319   "Number"
0320   "        static function getColumnNames(): Array { "
0321   "            if (!_columns) _model.getSchema()"
0322   "            let result: Array = []"
0323   "result"
0324   "            for (let col: String in _columns) {"
0325   "                result.append(col)"
0326   "            return result"
0327   "getColumnNames"
0328   "        static function getColumnTitles(): Array { "
0329   "                result.append(col.toPascal())"
0330   "getColumnTitles"
0331   "        static function getColumnType(field: String): String {"
0332   "            return _db.sqlTypeToDataType(_columns[field].sqlType)"
0333   "sqlType"
0334   "getColumnType"
0335   "        static function getDb(): Database {"
0336   "            if (!_db) {"
0337   "                _db = Database.defaultDatabase"
0338   "defaultDatabase"
0339   "            return _db"
0340   "getDb"
0341   "        function getErrors(): Array"
0342   "            _errors"
0343   "getErrors"
0344   "        static function getKeyName(): String"
0345   "            _keyName"
0346   "getKeyName"
0347   "        static function getNumRows(): Number {"
0348   "            let cmd: String = "SELECT COUNT(*) FROM " + _tableName + " WHERE " + _keyName + " <> '';""
0349   "cmd"
0350   "SELECT COUNT(*) FROM "
0351   " WHERE "
0352   " <> '';"
0353   "            let grid: Array = _db.query(cmd, "numRows", _trace)"
0354   "numRows"
0355   "            return grid[0]["COUNT(*)"]"
0356   "COUNT(*)"
0357   "getNumRows"
0358   "        private static function getSchema(): Void {"
0359   "                if (!_db) {"
0360   "                    throw new Error("Can't get schema, database connection has not yet been established")"
0361   "Can't get schema, database connection has not yet been established"
0362   "sql"
0363   "            let sql: String = 'PRAGMA table_info("' + _tableName + '");'"
0364   "PRAGMA table_info(""
0365   "");"
0366   "            let grid: Array = _db.query(sql, "schema", _trace)"
0367   "schema"
0368   "            _columns = {}"
0369   "            for each (let row in grid) {"
0370   "row"
0371   "                let name = row["name"]"
0372   "                let sqlType = row["type"].toLower()"
0373   "                let ejsType = mapSqlTypeToEjs(sqlType)"
0374   "                _columns[name] = new Column(name, false, ejsType, sqlType)"
0375   "        static function getTableName(): String"
0376   "            _tableName"
0377   "getTableName"
0378   "        static function hasAndBelongsToMany(model: Object, options: Object = {}): Void {"
0379   "            belongsTo(model, options)"
0380   "            hasMany(model, options)"
0381   "hasAndBelongsToMany"
0382   "        function hasError(field: String? = null): Boolean {"
0383   "            if (field) {"
0384   "                return (_errors && _errors[field])"
0385   "            if (_errors) {"
0386   "                return (_errors.length > 0)"
0387   "            return false"
0388   "hasError"
0389   "        static function hasMany(model: Object, options: Object = {}): Void {"
0390   "            _hasMany ||= []"
0391   "            _hasMany.append(model)"
0392   "hasMany"
0393   "        static function hasOne(model: Object, options: Object? = null): Void {"
0394   "            _hasOne ||= []"
0395   "            _hasOne.append(model)"
0396   "hasOne"
0397   "        static private function innerFind(key: Object, limit: Number? = null, options: Object = {}): Array {"
0398   "            let cmd: String"
0399   "            let columns: Array"
0400   "columns"
0401   "            let from: String"
0402   "from"
0403   "            let conditions: String"
0404   "            let where: Boolean"
0405   "            if (options == null) {"
0406   "                options = {}"
0407   "            if (options.noassoc) {"
0408   "noassoc"
0409   "                options.depth = 0"
0410   "            if (options.columns) {"
0411   "                columns = options.columns"
0412   "                let index: Number = columns.indexOf("id")"
0413   "index"
0414   "-hoisted-9"
0415   "                if (index >= 0) {"
0416   "                    columns[index] = _tableName + ".id""
0417   ".id"
0418   "                } else if (!columns.contains(_tableName + ".id")) {"
0419   "                    columns.insert(0, _tableName + ".id")"
0420   "                columns = ["*"]"
0421   "*"
0422   "            conditions = """
0423   "            from = """
0424   "            where = false"
0425   "            if (options.from) {"
0426   "                from = options.from"
0427   "                from = _tableName"
0428   "-hoisted-10"
0429   "                let model"
0430   "                if (options.include is Array) {"
0431   "                    for each (entry in options.include) {"
0432   "entry"
0433   "-hoisted-11"
0434   "getValues"
0435   "                        if (entry is Array) {"
0436   "                            model = entry[0]"
0437   "                            from += " LEFT OUTER JOIN " + model._tableName"
0438   " LEFT OUTER JOIN "
0439   "                            from += " ON " + entry[1]"
0440   " ON "
0441   "                        } else {"
0442   "                            model = entry"
0443   "                    model = options.include"
0444   "                    from += " LEFT OUTER JOIN " + model._tableName"
0445   "                    conditions = " ON ""
0446   "                    for each (let owner in _belongsTo) {"
0447   "-hoisted-12"
0448   "                        from += " INNER JOIN " + owner._tableName"
0449   " INNER JOIN "
0450   "-hoisted-13"
0451   "tname"
0452   "                        let tname: String = Reflect(owner).name"
0453   "                        tname = tname[0].toLower() + tname.slice(1) + "Id""
0454   "Id"
0455   "                        conditions += _tableName + "." + tname + " = " + owner._tableName + "." + owner._keyName + " AND ""
0456   "."
0457   " AND "
0458   "                    if (conditions == " ON ") {"
0459   "                        conditions = """
0460   "            if (options.joins) {"
0461   "joins"
0462   "                if (conditions == "") {"
0463   "parts"
0464   "-hoisted-15"
0465   "                let parts: Array = options.joins.split(/ ON | on /)"
0466   "/ ON | on /"
0467   "split"
0468   "                from += " " + parts[0]"
0469   " "
0470   "                if (parts.length > 1) {"
0471   "                    conditions += parts[1] + " AND ""
0472   "            conditions = conditions.trim(" AND ")"
0473   "            if (options.conditions) {"
0474   "whereConditions"
0475   "-hoisted-16"
0476   "                let whereConditions: String = " WHERE ""
0477   "                if (options.conditions is Array) {"
0478   "                    for each (cond in options.conditions) {"
0479   "cond"
0480   "-hoisted-17"
0481   "                        whereConditions += cond + " " + " AND ""
0482   "                    whereConditions = whereConditions.trim(" AND ")"
0483   "                } else if (options.conditions is String) {"
0484   "                    whereConditions += options.conditions + " " "
0485   "                } else if (options.conditions is Object) {"
0486   "                    for (field in options.conditions) {"
0487   "-hoisted-18"
0488   "                        whereConditions += field + " = '" + options.conditions[field] + "' " + " AND ""
0489   " = '"
0490   "' "
0491   "                whereConditions = whereConditions.trim(" AND ")"
0492   "                if (whereConditions != " WHERE ") {"
0493   "                    where = true"
0494   "                    conditions += whereConditions"
0495   "                    whereConditions = """
0496   "                    from = from.trim(" AND ")"
0497   "                from = from.trim(" AND ")"
0498   "            if (key || options.key) {"
0499   "                if (!where) {"
0500   "                    conditions += " WHERE ""
0501   "                    conditions += " AND ""
0502   "                conditions += (_tableName + "." + _keyName + " = ") + ((key) ? key : options.key)"
0503   "            cmd = "SELECT " + Database.quote(columns) + " FROM " + from + conditions"
0504   "SELECT "
0505   " FROM "
0506   "            if (options.group) {"
0507   "group"
0508   "                cmd += " GROUP BY " + options.group"
0509   " GROUP BY "
0510   "            if (options.order) {"
0511   "order"
0512   "                cmd += " ORDER BY " + options.order"
0513   " ORDER BY "
0514   "            if (limit) {"
0515   "                cmd += " LIMIT " + limit"
0516   " LIMIT "
0517   "            } else if (options.limit) {"
0518   "limit"
0519   "                cmd += " LIMIT " + options.limit"
0520   "            if (options.offset) {"
0521   "offset"
0522   "                cmd += " OFFSET " + options.offset"
0523   " OFFSET "
0524   "            cmd += ";""
0525   ";"
0526   "            if (_db == null) {"
0527   "                throw new Error("Database connection has not yet been established")"
0528   "Database connection has not yet been established"
0529   "            let results: Array"
0530   "            try {"
0531   "                if (_trace || 1) {"
0532   "                    results = _db.query(cmd, "find", _trace)"
0533   "block_0708_121"
0534   "-hoisted-20"
0535   "            catch (e) {"
0536   "e"
0537   "-hoisted-21"
0538   "                throw e"
0539   "            return results"
0540   "innerFind"
0541   "        private static function makeLazyReader(rec: Record, field: String, model, key: String, "
0542   "                options: Object = {}): Function {"
0543   "            var lazyReader: Function = function(): Object {"
0544   "                return cachedRead(rec, field, model, key, options)"
0545   "--fun_5160--697346038--"
0546   "lazyReader"
0547   "            return makeGetter(lazyReader)"
0548   "makeLazyReader"
0549   "Function"
0550   "        private static function mapSqlTypeToEjs(sqlType: String): Type {"
0551   "            sqlType = sqlType.replace(/\(.*/, "")"
0552   "/\(.*/"
0553   "            let ejsType: Type = _db.sqlTypeToEjsType(sqlType)"
0554   "            if (ejsType == undefined) {"
0555   "                throw new Error("Unsupported SQL type: \"" + sqlType + "\"")"
0556   "Unsupported SQL type: ""
0557   "            return ejsType"
0558   "mapSqlTypeToEjs"
0559   "        private static function prepareValue(field: String, value: Object): String {"
0560   "            let col: Column = _columns[field]"
0561   "            if (col == undefined) {"
0562   "                return undefined"
0563   "			if (value == undefined) {"
0564   "				throw new Error("Field \"" + field + "\" is undefined")"
0565   "Field ""
0566   "" is undefined"
0567   "			if (value == null) {"
0568   "				throw new Error("Field \"" + field + "\" is null")"
0569   "" is null"
0570   "			}"
0571   "            switch (col.ejsType) {"
0572   "            case Boolean:"
0573   "                if (value is String) {"
0574   "                    value = (value.toLower() == "true")"
0575   "                } else if (value is Number) {"
0576   "                    value = (value == 1)"
0577   "                    value = value cast Boolean"
0578   "                return value"
0579   "            case Date:"
0580   "                return "%Ld".format((new Date(value)).time)"
0581   "%Ld"
0582   "time"
0583   "            case Number:"
0584   "                return value cast Number"
0585   "            case String:"
0586   "                return Database.quote(value)"
0587   "            return Database.quote(value.toString())"
0588   "prepareValue"
0589   "        private static function readRecords(key: String, options: Object): Object {"
0590   "            let data: Array = innerFind(key, null, options)"
0591   "            if (data.length > 1) {"
0592   "                let result: Array = new Array"
0593   "                for each (row in data) {"
0594   "                    result.append(createRecord(row))"
0595   "                return result"
0596   "            } else if (data.length == 1) {"
0597   "                return createRecord(data[0])"
0598   "        static function remove(...ids): Void {"
0599   "            for each (let key: Object in ids) {"
0600   "                let cmd: String = "DELETE FROM " + _tableName + " WHERE " + _keyName + " = " + key + ";""
0601   "DELETE FROM "
0602   "                db.query(cmd, "remove", _trace)"
0603   "db"
0604   "remove"
0605   "query"
0606   "ids"
0607   "        private function runFilters(filters): Void {"
0608   "            for each (filter in filters) {"
0609   "filter"
0610   "                let fn = filter[0]"
0611   "                let options = filter[1]"
0612   "                if (options) {"
0613   "only"
0614   "                    let only = options.only"
0615   "                fn.call(this)"
0616   "call"
0617   "runFilters"
0618   "filters"
0619   "        function save(): Boolean {"
0620   "            var sql: String"
0621   "            if (!validateRecord()) {"
0622   "                return false"
0623   "            runFilters(_beforeFilters)"
0624   "            if (_keyValue == null) {"
0625   "                sql = "INSERT INTO " + _tableName + " (""
0626   "INSERT INTO "
0627   " ("
0628   "                for (let field: String in this) {"
0629   "                    if (_columns[field]) {"
0630   "                        sql += field + ", ""
0631   ", "
0632   "                sql = sql.trim(', ')"
0633   "                sql += ") VALUES(""
0634   ") VALUES("
0635   "                        sql += "'" + prepareValue(field, this[field]) + "', ""
0636   "'"
0637   "', "
0638   "                sql += ")""
0639   ")"
0640   "                sql = "UPDATE " + _tableName + " SET ""
0641   "UPDATE "
0642   " SET "
0643   "                        sql += field + " = '" + prepareValue(field, this[field]) + "', ""
0644   "                sql += " WHERE " + _keyName + " = " +  _keyValue"
0645   "            if (!_keyValue) {"
0646   "                sql += "; SELECT last_insert_rowid();""
0647   "; SELECT last_insert_rowid();"
0648   "                sql += ";""
0649   "            let result: Array = _db.query(sql, "save", _trace)"
0650   "save"
0651   "                _keyValue = this["id"] = result[0]["last_insert_rowid()"] cast Number"
0652   "last_insert_rowid()"
0653   "            runFilters(_afterFilters)"
0654   "            return true"
0655   "        function saveUpdate(fields: Object): Boolean {"
0656   "            for (field in fields) {"
0657   "                if (this[field] != undefined) {"
0658   "                    this[field] = fields[field]"
0659   "            return save()"
0660   "saveUpdate"
0661   "        static function setDb(database: Database) {"
0662   "            _db = database"
0663   "setDb"
0664   "database"
0665   "        static function setKeyName(name: String): Void {"
0666   "            _keyName = name"
0667   "setKeyName"
0668   "        static function setTableName(name: String): Void {"
0669   "            if (_tableName != name) {"
0670   "                _tableName = name"
0671   "                if (_db) {"
0672   "                    _model.getSchema()"
0673   "setTableName"
0674   "        static function sql(cmd: String, count: Number? = null): Array {"
0675   "            cmd = "SELECT " + cmd + ";""
0676   "            return db.query(cmd, "select", _trace)"
0677   "select"
0678   "        static function trace(on: Boolean): void"
0679   "            _trace = on"
0680   "trace"
0681   "on"
0682   "        static function validateFormat(fields: Object, options = null) {"
0683   "            if (_validations == null) {"
0684   "                _validations = []"
0685   "            _validations.append([checkFormat, fields, options])"
0686   "validateFormat"
0687   "        static function validateNumber(fields: Object, options = null) {"
0688   "            _validations.append([checkNumber, fields, options])"
0689   "validateNumber"
0690   "        static function validatePresence(fields: Object, options = null) {"
0691   "            _validations.append([checkPresent, fields, options])"
0692   "validatePresence"
0693   "        function validateRecord(): Boolean {"
0694   "            _errors = {}"
0695   "            if (_validations) {"
0696   "                for each (let validation: String in _validations) {"
0697   "validation"
0698   "check"
0699   "                    let check = validation[0]"
0700   "                    let fields = validation[1]"
0701   "                    let options = validation[2]"
0702   "                    if (fields is Array) {"
0703   "                        for each (let field in fields) {"
0704   "                            if (_errors[field]) {"
0705   "                                continue"
0706   "                            }"
0707   "                            check(this, field, this[field], options)"
0708   "                        check(this, fields, this[fields], options)"
0709   "thisType"
0710   "            let thisType = Reflect(this).type"
0711   "            if (thisType["validate"]) {"
0712   "validate"
0713   "                thisType["validate"].call(this)"
0714   "            if (_errors.length == 0) {"
0715   "                coerceToEjsTypes()"
0716   "            return _errors.length == 0"
0717   "validateRecord"
0718   "        static function validateUnique(fields: Object, option = null)"
0719   "            _validations.append([checkUnique, fields, options])"
0720   "validateUnique"
0721   "option"
0722   "        static function wrapFilter(fn, options: Object? = null): Void {"
0723   "            _wrapFilters ||= []"
0724   "            _wrapFilters.append([fn, options])"
0725   "wrapFilter"
0726   "        static function get columnNames(): Array {"
0727   "            return getColumnNames()"
0728   "columnNames"
0729   "        static function get columnTitles(): Array {"
0730   "            return getColumnTitles()"
0731   "columnTitles"
0732   "        static function get db(): Datbase {"
0733   "            return getDb()"
0734   "        static function get keyName(): String {"
0735   "            return getKeyName()"
0736   "keyName"
0737   "        static function get numRows(): String {"
0738   "            return getNumRows()"
0739   "        static function get tableName(): String {"
0740   "            return getTableName()"
0741   "tableName"
0742   "        function constructorOLD(fields: Object? = null): Void {"
0743   "constructorOLD"
0744   "Record-initializer"
0745   "-initializer-"
0746   "constructor"
0747   "prototype"
0748   "clone"
0749   "Iterator"
0750   "hasOwnProperty"
0751   "isPrototypeOf"
0752   "propertyIsEnumerable"
0753   "toJSON"
0754   "toLocaleString"
0755   "toString"
0756   "valueOf"
0757   "    class Column {"
0758   "        public var ejsType: Object "
0759   "        public var sqlType: Object "
0760   "        function Column(name: String, accessor: Boolean = false, ejsType: Type? = null, sqlType: String? = null) {"
0761   "            this.ejsType = ejsType"
0762   "            this.sqlType = sqlType"
0763   "accessor"
0764   "    function plural(name: String): String"
0765   "        name + "s""
0766   "s"
0767   "    function singular(name: String): String {"
0768   "        var s: String = name + "s""
0769   "        if (name.endsWith("ies")) {"
0770   "ies"
0771   "            return name.slice(0,-3) + "y""
0772   "y"
0773   "        } else if (name.endsWith("es")) {"
0774   "es"
0775   "            return name.slice(0,-2)"
0776   "        } else if (name.endsWith("s")) {"
0777   "            return name.slice(0,-1)"
0778   "        return name.toPascal()"
0779   "singular"
0780   "    function mapType(value: Object): String {"
0781   "        if (value is Date) {"
0782   "            return "%Ld".format((new Date(value)).time)"
0783   "        } else if (value is Number) {"
0784   "            return "%Ld".format(value)"
0785   "        return value"
0786   "mapType"
0787   "block_0013_35"
0788   "-block-"
0789   "__initializer__"
