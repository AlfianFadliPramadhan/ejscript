Unit tests 
    (No http server, just testing methods, check doc) 
    - ejs.web
        - Controller
        - Http Server methods
        - Mvc
        - Router
        - Request
            - Does this have to be done inside a running HTTP server?
        - Session
            - Does this have to be done inside a running HTTP server?
        - View
            (Test various kinds of binding)
    - ejs.cjs 
        - Loader
            (CommonJS require)
            (Caching)
    - ejs.web.template
    - ejs.jem

Servers
    (startService, hit some requests and terminate)
    - Simple (smallest possible web server)
    - Router
        (With route table)
        (Don't do unit testing of router - save for stand-alone unit tests)
    - Async server (no routing)

Live Server Tests
    - Static requests
    - Various HTTP methods
    - Streamed input data
    - Streamed output data
    - Routing
    - Stand-alone View
        (Sqlite binding, JS binding, XML binding)
    - Stand-alone Controller
        - Non finalized requests
    - *.ejs
    - *.es
    - Jack style requests
        - All different return forms (sample.es)
    - Async requests (timer)
    - File Upload
    - Events with web life cycle

ejs.mvc
    - ejsmvc generation scenarios

ejs.web.template
    - ejspage scenarios

- Http client
