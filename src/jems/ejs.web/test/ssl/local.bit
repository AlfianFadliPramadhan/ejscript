/*
  	local.bit -- Bit file for SSL management of certificates and keys

 	This provides Some targets to help you get going with SSL (using OpenSSL). 
	All these certificates are for internal use only.

 	Use 'bit serverSelfCert' to generate a test certificate 
 	Use 'bit serverCertReq' to generate a certificate request to send to a certificate authority like Verisign
 */


Bit.load({
    targets: {
		/*
			Create a test certificate authority. Use this if you will be generating multiple certificates for clients and 
			servers and want to validate them. The browser will say it doesn't recognize this certificate, but that is ok.
		 */
        ca: {
			shell: "
				set -x
                umask 77 
				export OPENSSL_CONF=openssl.ca
				openssl req -x509 -newkey rsa:1024 -passout pass:ca -out ca.crt -outform PEM
				openssl rsa -passin pass:ca -in ca.key -out ca.key.pem
				echo 01 >ca.serial
				>ca.db
			",
		},

		/*
			Client certificate to put in your browser. Used when doing client validation
		 */
		clientCert: {
			shell: "
				set -x 
                umask 77 
				export OPENSSL_CONF=openssl.conf
				rm -f client.crt client.key client.key.pem client.req
				openssl req -passout pass:client -newkey rsa:1024 -keyout client.key -out client.req < response.client
				openssl rsa -passin pass:client -in client.key -out client.key.pem
				export OPENSSL_CONF=openssl.ca ; openssl ca -batch -in client.req -out client.crt
			",
		}

		/*
            Create a server certificate for Appweb. Uses the certificate database.
		 */
		serverCert: {
			shell: "
				set -x 
                umask 77 
				export OPENSSL_CONF=openssl.conf
				rm -f server.crt server.key server.key.pem server.req
				openssl req -passout pass:server -newkey rsa:1024 -keyout server.key -out server.req < response.server
				openssl rsa -passin pass:server -in server.key -out server.key.pem 
				export OPENSSL_CONF=openssl.ca ; openssl ca -batch -in server.req -out server.crt
			",
		}

		/*
			Create a self signed certificate and server key.
			Use a self-signed certificate when you just want quick and dirty testing.
			The browser will say it doesn't recognize this certificate, but that is ok.
		 */
		serverSelfSignCert: {
			shell: "
				set -x 
                umask 77
				export OPENSSL_CONF=openssl.conf
				openssl genrsa -des3 -passout pass:server -out server.key 1024
				openssl req -passin pass:server -new -x509 -days 365 -key server.key -out server.crt < response.server
				openssl rsa -passin pass:server -in server.key -out server.key.pem
			",
		}

		/*
			Self-signed client request
		 */
		clientSelfSignCert: {
			shell: "
				set -x 
                umask 77
				export OPENSSL_CONF=openssl.conf
				openssl genrsa -des3 -passout pass:client -out client.key 1024
				openssl req -passin pass:client -new -x509 -days 365 -key client.key -out client.crt < response.client
				openssl rsa -passin pass:client -in client.key -out client.key.pem
			",
		}

		/*
			Generate a request to send to a certificate authority like Verisign
		 */
		ServerCertReq: {
			shell: "
				set -x 
                umask 77
				openssl genrsa -des3 -passout pass:server -out server.key 1024
				openssl req -new -key server.key -out server.csr
			",
		}

		/*
			Stop the key asking for a password by decrypting it and rewriting back
			to server.key. WARNING: this is not secure as the key is now decrypted.
		 */
		noPassPhrase: {
			shell: "
				openssl genrsa 1024 -out server.key
				chmod 600 server.key
			",
		}

		/*
			Decrypt the key into server.key.pem
		 */
		decrypted: {
			shell: "
				openssl rsa -in server.key -out server.key.pem -passin pass:server
			",
        },

        clean: {
            build: "
                rm(['ca.db*', 'ca.serial*', '*.req', 'client.crt'])
            "
        },
    },
})
