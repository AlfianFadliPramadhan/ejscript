/*
    Cmd.es - Cmd class

    Copyright (c) All Rights Reserved. See details at the end of the file.

    MOB
        - How to capture stderr
        - How to quote args
        - Need sync and async Cmd support

    Usage:
        cmd = Cmd("command line with quoted args")
        cmd.env = { "PATH": "/usr/bin" }
        cmd.on("readable", function ()) {})
        cmd.timeout = 1000

        cmd.start("command line with quoted args", {detach: true})
        cmd.start()
        cmd.wait()

        cmd.write(buf)
        cmd.finalize()
        cmd.read(buf)
        data = cmd.readString()
        status = cmd.status
        cmd.error.read(buf)
        print(cmd.response)

    Helpers
        data = Cmd.run(command)
        data = Cmd.daemon(command)
        data = Cmd.sh(command)

        cmd()   => Cmd.sh
    
        cmd('
            ls
            date
        ')

`        pwd ; ls .....
Shell does
        >file
        2>file
        <file
        | pipe

 */

module ejs {

    /**
        The Cmd class supports invoking other programs on the same system. 
        @spec ejs-11
     */
    native class Cmd implements Stream {

        use default namespace public

        /**
            Cached command output
         */
        private var _response: String

        /**
            Create an Cmd object. The Cmd object is initialized with the command line
            @param cmdline The (optional) command line to initialize with. This may be overridden via the $start
                or command cmdline methods.
            @param options. Command options hash. Supported options are:
            @options detach Boolean If true, run the command in the background. Do not capture the command's stdout or
                stderr, nor collect status. Defaults to false.
            @options dir Path or String. Directory to set as the current working directory for the command.
            @options exception Boolean If true, throw exceptions on errors. Defaults to true.
            @throws IOError if the command line is malformed.
         */
        native function Cmd(cmdline: String = null, options: Object = null)

        /** 
            @duplicate Stream.on
            @event readable Issued when output data to read.
            @event writable Issued when the connection to the command is writable to accept data.
            @event complete Issued when the command completes
            @event error Issued if the request does not complete successfully.
            All events are called with the signature:
            function (event: String, cmd: Cmd): Void
         */
        native function on(name, listener: Function): Void

        /** 
            @duplicate Stream.available
         */
        native function get available(): Number 

        /**
            Close the connection to the command and free up all associated resources. It is not normally required to call 
            $close. But it can be useful to force a command termination.
         */
        native function close(): Void 

        /**
            The command line for this Cmd object.
         */
        native function get cmdline(): String
        native function set cmdline(cmdlineString: String): Void

        /**
            The error stream object for the command's stderr output 
         */
        native function get error(): Stream

        /**
            Hash of environment strings for the command.
         */
        native function get env(): Object
        native function set env(values: Object): Void

        /** 
            Signals the end of write data. Finalize() must be called to properly signify the end of write data.
         */
        native function finalize(): Void 

        /**
            @duplicate Stream.flush
         */
        native function flush(dir: Number = Stream.BOTH): Void

        /** 
            @duplicate Stream.off
         */
        native function off(name, listener: Function): Void

        /**
            @duplicate Stream.read
         */
        native function read(buffer: ByteArray, offset: Number = 0, count: Number = -1): Number

        /**
            Read the data from the command output as a string. This reads from the command's standard output. 
            @param count of bytes to read. Returns the entire output data contents if count is -1.
            @returns a string of $count characters beginning at the start of the output data.
            @throws IOError if an I/O error occurs.
         */
        native function readString(count: Number = -1): String

        /**
            Read the data from the command as an array of lines. This reads from the command's standard output.
            @param count of linese to read. Returns the entire output contents if count is -1.
            @returns a string containing count lines of data starting with the first line of output data
            @throws IOError if an I/O error occurs.
         */
        native function readLines(count: Number = -1): Array

        /**
            Read the command output as an XML document. This reads from the command's standard output.
            @returns the output content as an XML object 
            @throws IOError if an I/O error occurs.
         */
        function readXml(): XML
            XML(readString())

        /**
            Return the command output data as a string. This is an alias for $readString() but it will cache the 
                output data and may be called multiple times. This reads from the command's standard output.
            @returns the output as a string of characters.
            @throws IOError if an I/O error occurs.
         */
        function get response(): String {
            if (!_response) {
                _response = readString()
            }
            return _response
        }

        /**
            Start the command.
            @param cmdline Command line to use. This overrides any previously defined cmdline for the Cmd object.
            @param options Command options. Sames as options in $Cmd
            @throws IOError if the request was cannot be issued to the remote server.
         */
        native function start(cmdline: String = null, options: Object = {}): Void

//  TODO - this should automatically call wait()
        native function get status(): Number

        /**
            Command timeout before the command is forcibly killed and a completion event issued. 
            This is the number of milliseconds for the command to complete.
         */
        native function get timeout(): Number
        native function set timeout(timeout: Number): Void

        /**
            Wait for a command to complete.
            @param timeout Time in seconds to wait for the command to complete. If unspecified the $timeout propoperty
                value is used instead
            @return True if the request successfully completes.
         */
        native function wait(timeout: Number = -1): Boolean

        /**
            @duplicate Stream.write
            Call finalize to signify the end of write data.
         */
        native function write(...data): Void


        /* Static Helper Methods */

        /*
            Run a command using the system command shell and wait for completion. This supports pipelines.
         */
        static function sh(cmdline: String, data: String = null): String
            run(("/bin/sh -c \"" + cmdline.replace(/\\/g, "\\\\") + "\"").trim('\n'), data)


        /**
            Execute a command/program. The call blocks while executing the command.
            @param command Command or program to execute
            @param data Optional data to write to the command on it's standard input.
            @returns The command output from it's standard output.
            @throws IOError if the command exits with non-zero status. The exception object will contain the command's
                standard error output. 
         */
        native static function run(cmdline: String, data: String = null): String {
            let cmd = new Cmd
            cmd.start(cmdline)
            if (data) {
                cmd.write(data)
                cmd.finalize()
            }
            if (cmd.status != 0) {
                //  MOB -- should capture stderr somehow?
                throw new IOError(cmd.error.readString())
            }
            return cmd.readString()
        }

        static function daemon(cmdline: String): Number {
            let cmd = new Cmd
            cmd.start(cmdline, {detach: true})
            cmd.start()
            //  MOB -- return value
        }
    }
}


/*
    @copy   default
    
    Copyright (c) Embedthis Software LLC, 2003-2011. All Rights Reserved.
    Copyright (c) Michael O'Brien, 1993-2011. All Rights Reserved.
    
    This software is distributed under commercial and open source licenses.
    You may use the GPL open source license described below or you may acquire 
    a commercial license from Embedthis Software. You agree to be fully bound 
    by the terms of either license. Consult the LICENSE.TXT distributed with 
    this software for full details.
    
    This software is open source; you can redistribute it and/or modify it 
    under the terms of the GNU General Public License as published by the 
    Free Software Foundation; either version 2 of the License, or (at your 
    option) any later version. See the GNU General Public License for more 
    details at: http://www.embedthis.com/downloads/gplLicense.html
    
    This program is distributed WITHOUT ANY WARRANTY; without even the 
    implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
    
    This GPL license does NOT permit incorporating this software into 
    proprietary programs. If you are unable to comply with the GPL, you must
    acquire a commercial license to use this software. Commercial licenses 
    for this software and support services are available from Embedthis 
    Software at http://www.embedthis.com 
    
    Local variables:
    tab-width: 4
    c-basic-offset: 4
    End:
    vim: sw=4 ts=4 expandtab

    @end
 */
