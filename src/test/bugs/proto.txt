/*
 *  Classical
 */

function Shape(size) {
    this.size = size
}
Shape.prototype.area = function() {
    return this.size
}

s = new Shape()

function Rectangle(h, w) {
    this.height = h
    this.width = w
    //  TODO - who calls Shape constructor
}
Rectangle.prototype = new Shape()
Rectangle.prototype.constructor = Rectangle


//  Call a base class
Shape.prototype.area.call(r, args)
    
-------------------------------------------
/*
 *  Not sure what this is called
 */
var Shape = {
    area: function () {
        return this.height * this.width
    },

    setWidth: function (width) {
        this.width = width
    }
}

/* NOTE: not using new on Shape */
Rectangle.prototype = Shape
function Rectangle() {
}
Rectangle.prototype.constructor = Rectangle

----------------------------------------------
/*
 *  Closure based inheritance
 */
function Shape() {
    /* private vars */
    var width, width

    /* private method */
    function calcArea() {
        return width * height
    }

    this.area = function() {
        return calcArea()
    }
}

/* NOTE: create an instance as a prototype */
Rectangle.prototype = new Shape
function Rectangle() {
}
Rectangle.prototype.constructor = Rectangle

-----------------------------------------------------
/*
 *  Yahoo Module Pattern
 */

var Shape = function() {
    /* private vars */
    var height, width

    /* private method */
    function calcArea() {
        return height * width
    }

    return {
        name: "shape",
        area: function () {
            return calcArea.call(this)
        }
    }
}()

/* NOTE: don't use new on Shape */
Rectangle.prototype = Shape
function Rectangle() {
}
Rectangle.prototype.constructor = Rectangle

--------------------------------------------------------------
/*
 *  Closure constructor (slow and big)
 */

var Shape = (function () {
    function Shape() {
    }

    /* private vars */
    var height, width

    /* private method */
    function calcArea() {
        return height * width
    }

    Shape.prototype.area = function () {
        return calcArea.call(this)
    }
    return Shape
})()

Rectangle.prototype = new Shape
function Rectangle() {
}
Rectangle.prototype.constructor = Rectangle


--------------------------------------------------------
/*
 *  Use an anonymous closure to set the constructor property (But clumsy)
 */
Rectangle.prototype = (function() {
    var dummy = function() { 
        this.constructor = Rectangle
    }
    dummy.prototype = Shape.prototype
    return new dummy()
})()


--------------------------------------------------------
/*
 *  Prototype (Ajax framework) methodology
 */

var Shape = Class.create({
    area: function() {
        return this.height * this.width
    }
})

var Rectangle = Class.create(Shape, {
})

--------------------------------------------------------
Anonymous closures

x = (function() {
    /* Defines a function and runs it */
    return ...
})()

