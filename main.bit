/*
    main.bit -- Main Bit File for Ejscript
 */

Bit.load({
    blend: [
        '${BITS}/embedthis.bit',
        'src/deps/mpr/mpr.bit',
        'src/deps/est/est.bit',
        'src/deps/pcre/pcre.bit',
        'src/deps/http/http.bit',
        'src/deps/sqlite/sqlite.bit',
        'src/deps/zlib/zlib.bit',

        'src/libejs.bit',
        'src/cmd/cmd.bit',
        'src/core/core.bit',

        'src/jems/ejs.unix/unix.bit',
        'src/jems/ejs.jem/jem.bit',
        'src/jems/ejs.db/db.bit',
        'src/jems/ejs.db.mapper/mapper.bit',
        'src/jems/ejs.db.sqlite/sqlite.bit',
        'src/jems/ejs.mail/mail.bit',
        'src/jems/ejs.web/web.bit',
        'src/jems/ejs.template/template.bit',
        'src/jems/ejs.zlib/zlib.bit',
        'src/jems/ejs.tar/tar.bit',
        'src/jems/ejs.mvc/mvc.bit',
        'src/jems/ejs.utest/utest.bit',
        'package/package.bit',
        'doc/doc.bit',
    ],

    customize: [
        /* Optionally load this if present. Feel free to create and customize */
        'custom.bit',
    ],

    '+modules': [
        'bits/ejs.es',
    ],

    settings: {
        product: 'ejs',
        title: 'Embedthis Ejscript',
        company: 'Embedthis',
        version: '2.3.0',
        buildNumber: '1',
        bit: '0.8.0',
        sync: [ 'bitos', 'est', 'http', 'mpr', 'pcre', 'sqlite', 'zlib' ],
        packs: [ 'bits/packs' ],
        /* Must build locally to build tools */
        platforms: [ 'local' ],

        /*
            Optional packs to automatically discover and configure
         */
        '+discover': [ 'doxygen', 'dsi', 'est', 'man', 'man2html', 'pmaker', 'sqlite', 'zip' ],
        '+required': [ 'pcre', 'zlib' ]

        /*
            Packs to disable when using --without all
         */
        'without-all': ['doxygen', 'dsi', 'est', 'man', 'man2html'],

        /*
            Packs to disable when using --without default (generating packages)
         */
        'without-default': ['doxygen', 'dsi', 'man', 'man2html'],

        /*
            Set to true for a static (non-shared library) build                                            
         */
        static: false,

        /*
            EST SSL stack configuration
         */
        est: {
            camellia: false,
            padlock: false,                                                                                
            sslClient: false,                                                                              
            des: false,                                                                                    
            testCerts: false,                                                                              
            xtea: false,                                                                                   
            romTables: false,                                                                              
            genPrime: false,                                                                               
        }, 
                                                                                                           
        http: {                                                                                            
            /* Use PAM (Plugable Authentication Module) to store passwords */                              
            pam: true,                                                                                     
                                                                                                           
            /*                                                                                             
                Enable stealth options. Disable OPTIONS and TRACE methods. Not yet operational.            
             */                                                                                            
            stealth: true,                                                                                 
        },

        mpr: {
            /*
                Enable logging via mprLog to the log file. Error messages are always enabled.
                The default is to enable logging for both debug and release builds.
             */
            logging: true,

            manager: 'ejsman',

            /*
                Enable debug trace and asserts to the log file.
                This is enabled by default for debug builds.
                tracing: true,
             */
        },

        /*
            Tailor the optimization for size|speed
         */
        tune: 'size',
    },

    usage: {
        'http.pam':   'Enable Unix Pluggable Auth Module (true|false)',
        'mpr.logging':'Enable application logging (true|false)',
        'mpr.tracing':'Enable debug tracing (true|false)',
    },

    targets: {
        install: {
            depends: ['build'],
            action: "installBinary()",
        },

        package: {
            enable: "'${OS}' == 'linux' || '${OS}' == 'macosx' || '${OS}' == 'windows'",
            depends: ['packageBinary', 'packageSource', 'packageCombo'],
        },

        packageBinary: {
            depends: ['build'],
            action: "packageBinaryFiles()",
        },

        packageSource: {
            depends: ['build'],
            action: "packageSourceFiles()",
        },

        packageCombo: {
            depends: ['build'],
            action: "packageComboFiles()",
        },

        uninstall: {
            action: "uninstallBinary()"
        },

        testPackage: {
            type: 'test',
            action: "
                let package = packageName()
                if (!package || !package.exists || bit.settings.depth < 2) {
                    trace('Test', 'testPackage -- SKIPPED (Runs at depth 2 on windows or macosx)')
                } else {
                    if (Config.OS == 'macosx' && App.uid != 0) {
                        trace('Test', 'testPackage -- SKIPPED (Must run as root)')
                    } else {
                        trace('Test', 'testPackage')
                        if (bit.prefixes.bin.join('uninstall').exists) {
                            trace('Test', 'Cleanup prior to installation')
                            uninstallPackage()
                            checkUninstalled()
                        }
                        installPackage()
                        if (missing = checkInstalled()) {
                            trace('Test', 'Install is missing files: ' + missing)
                        }
                        let s = bit.settings
                        trace('Test', 'ejs -V')
                        assert(Cmd.run([bit.prefixes.bin.join('ejs'), '-V']).trim() == s.version + '-' + s.buildNumber)
                        uninstallPackage()
                        if (Config.OS == 'windows') App.sleep(1000)
                        if (existing = checkUninstalled()) {
                            trace('Warning', 'The uninstall for testPackage was not clean: ' + existing)
                        } else {
                            trace('Test', 'Uninstall is clean')
                        }
                    }
                }
            ",
        },
    },

    packs: {
        est: {},
        matrixssl: {},
        openssl: {},
        mocana: {},
    },

})
